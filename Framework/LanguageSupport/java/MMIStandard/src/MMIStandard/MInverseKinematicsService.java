/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MInverseKinematicsService {

  public interface Iface extends MMIServiceBase.Iface {

    public MMIStandard.MAvatarPosture ComputeIKStateless(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException;

    public MMIStandard.MAvatarPostureValues ComputeIK(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void ComputeIKStateless(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException;

    public void ComputeIK(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MMIStandard.MAvatarPosture ComputeIKStateless(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException
    {
      send_ComputeIKStateless(posture, properties);
      return recv_ComputeIKStateless();
    }

    public void send_ComputeIKStateless(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException
    {
      ComputeIKStateless_args args = new ComputeIKStateless_args();
      args.setPosture(posture);
      args.setProperties(properties);
      sendBase("ComputeIKStateless", args);
    }

    public MMIStandard.MAvatarPosture recv_ComputeIKStateless() throws org.apache.thrift.TException
    {
      ComputeIKStateless_result result = new ComputeIKStateless_result();
      receiveBase(result, "ComputeIKStateless");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ComputeIKStateless failed: unknown result");
    }

    public MMIStandard.MAvatarPostureValues ComputeIK(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException
    {
      send_ComputeIK(postureValues, properties);
      return recv_ComputeIK();
    }

    public void send_ComputeIK(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties) throws org.apache.thrift.TException
    {
      ComputeIK_args args = new ComputeIK_args();
      args.setPostureValues(postureValues);
      args.setProperties(properties);
      sendBase("ComputeIK", args);
    }

    public MMIStandard.MAvatarPostureValues recv_ComputeIK() throws org.apache.thrift.TException
    {
      ComputeIK_result result = new ComputeIK_result();
      receiveBase(result, "ComputeIK");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ComputeIK failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ComputeIKStateless(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ComputeIKStateless_call method_call = new ComputeIKStateless_call(posture, properties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ComputeIKStateless_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MAvatarPosture> {
      private MMIStandard.MAvatarPosture posture;
      private java.util.List<MIKProperty> properties;
      public ComputeIKStateless_call(MMIStandard.MAvatarPosture posture, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.posture = posture;
        this.properties = properties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ComputeIKStateless", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ComputeIKStateless_args args = new ComputeIKStateless_args();
        args.setPosture(posture);
        args.setProperties(properties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MAvatarPosture getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ComputeIKStateless();
      }
    }

    public void ComputeIK(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ComputeIK_call method_call = new ComputeIK_call(postureValues, properties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ComputeIK_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MAvatarPostureValues> {
      private MMIStandard.MAvatarPostureValues postureValues;
      private java.util.List<MIKProperty> properties;
      public ComputeIK_call(MMIStandard.MAvatarPostureValues postureValues, java.util.List<MIKProperty> properties, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.postureValues = postureValues;
        this.properties = properties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ComputeIK", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ComputeIK_args args = new ComputeIK_args();
        args.setPostureValues(postureValues);
        args.setProperties(properties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MAvatarPostureValues getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ComputeIK();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ComputeIKStateless", new ComputeIKStateless());
      processMap.put("ComputeIK", new ComputeIK());
      return processMap;
    }

    public static class ComputeIKStateless<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ComputeIKStateless_args> {
      public ComputeIKStateless() {
        super("ComputeIKStateless");
      }

      public ComputeIKStateless_args getEmptyArgsInstance() {
        return new ComputeIKStateless_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ComputeIKStateless_result getResult(I iface, ComputeIKStateless_args args) throws org.apache.thrift.TException {
        ComputeIKStateless_result result = new ComputeIKStateless_result();
        result.success = iface.ComputeIKStateless(args.posture, args.properties);
        return result;
      }
    }

    public static class ComputeIK<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ComputeIK_args> {
      public ComputeIK() {
        super("ComputeIK");
      }

      public ComputeIK_args getEmptyArgsInstance() {
        return new ComputeIK_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ComputeIK_result getResult(I iface, ComputeIK_args args) throws org.apache.thrift.TException {
        ComputeIK_result result = new ComputeIK_result();
        result.success = iface.ComputeIK(args.postureValues, args.properties);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ComputeIKStateless", new ComputeIKStateless());
      processMap.put("ComputeIK", new ComputeIK());
      return processMap;
    }

    public static class ComputeIKStateless<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ComputeIKStateless_args, MMIStandard.MAvatarPosture> {
      public ComputeIKStateless() {
        super("ComputeIKStateless");
      }

      public ComputeIKStateless_args getEmptyArgsInstance() {
        return new ComputeIKStateless_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture>() { 
          public void onComplete(MMIStandard.MAvatarPosture o) {
            ComputeIKStateless_result result = new ComputeIKStateless_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ComputeIKStateless_result result = new ComputeIKStateless_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ComputeIKStateless_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException {
        iface.ComputeIKStateless(args.posture, args.properties,resultHandler);
      }
    }

    public static class ComputeIK<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ComputeIK_args, MMIStandard.MAvatarPostureValues> {
      public ComputeIK() {
        super("ComputeIK");
      }

      public ComputeIK_args getEmptyArgsInstance() {
        return new ComputeIK_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues>() { 
          public void onComplete(MMIStandard.MAvatarPostureValues o) {
            ComputeIK_result result = new ComputeIK_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ComputeIK_result result = new ComputeIK_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ComputeIK_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
        iface.ComputeIK(args.postureValues, args.properties,resultHandler);
      }
    }

  }

  public static class ComputeIKStateless_args implements org.apache.thrift.TBase<ComputeIKStateless_args, ComputeIKStateless_args._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeIKStateless_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeIKStateless_args");

    private static final org.apache.thrift.protocol.TField POSTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("posture", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeIKStateless_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeIKStateless_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture posture; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MIKProperty> properties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSTURE((short)1, "posture"),
      PROPERTIES((short)2, "properties");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSTURE
            return POSTURE;
          case 2: // PROPERTIES
            return PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSTURE, new org.apache.thrift.meta_data.FieldMetaData("posture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPosture.class)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "MIKProperty"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeIKStateless_args.class, metaDataMap);
    }

    public ComputeIKStateless_args() {
    }

    public ComputeIKStateless_args(
      MMIStandard.MAvatarPosture posture,
      java.util.List<MIKProperty> properties)
    {
      this();
      this.posture = posture;
      this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeIKStateless_args(ComputeIKStateless_args other) {
      if (other.isSetPosture()) {
        this.posture = new MMIStandard.MAvatarPosture(other.posture);
      }
      if (other.isSetProperties()) {
        java.util.List<MIKProperty> __this__properties = new java.util.ArrayList<MIKProperty>(other.properties.size());
        for (MIKProperty other_element : other.properties) {
          __this__properties.add(new MIKProperty(other_element));
        }
        this.properties = __this__properties;
      }
    }

    public ComputeIKStateless_args deepCopy() {
      return new ComputeIKStateless_args(this);
    }

    @Override
    public void clear() {
      this.posture = null;
      this.properties = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPosture getPosture() {
      return this.posture;
    }

    public ComputeIKStateless_args setPosture(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture posture) {
      this.posture = posture;
      return this;
    }

    public void unsetPosture() {
      this.posture = null;
    }

    /** Returns true if field posture is set (has been assigned a value) and false otherwise */
    public boolean isSetPosture() {
      return this.posture != null;
    }

    public void setPostureIsSet(boolean value) {
      if (!value) {
        this.posture = null;
      }
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MIKProperty> getPropertiesIterator() {
      return (this.properties == null) ? null : this.properties.iterator();
    }

    public void addToProperties(MIKProperty elem) {
      if (this.properties == null) {
        this.properties = new java.util.ArrayList<MIKProperty>();
      }
      this.properties.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MIKProperty> getProperties() {
      return this.properties;
    }

    public ComputeIKStateless_args setProperties(@org.apache.thrift.annotation.Nullable java.util.List<MIKProperty> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case POSTURE:
        if (value == null) {
          unsetPosture();
        } else {
          setPosture((MMIStandard.MAvatarPosture)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((java.util.List<MIKProperty>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POSTURE:
        return getPosture();

      case PROPERTIES:
        return getProperties();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POSTURE:
        return isSetPosture();
      case PROPERTIES:
        return isSetProperties();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeIKStateless_args)
        return this.equals((ComputeIKStateless_args)that);
      return false;
    }

    public boolean equals(ComputeIKStateless_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_posture = true && this.isSetPosture();
      boolean that_present_posture = true && that.isSetPosture();
      if (this_present_posture || that_present_posture) {
        if (!(this_present_posture && that_present_posture))
          return false;
        if (!this.posture.equals(that.posture))
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPosture()) ? 131071 : 524287);
      if (isSetPosture())
        hashCode = hashCode * 8191 + posture.hashCode();

      hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
      if (isSetProperties())
        hashCode = hashCode * 8191 + properties.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputeIKStateless_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPosture()).compareTo(other.isSetPosture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posture, other.posture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeIKStateless_args(");
      boolean first = true;

      sb.append("posture:");
      if (this.posture == null) {
        sb.append("null");
      } else {
        sb.append(this.posture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (posture != null) {
        posture.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeIKStateless_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIKStateless_argsStandardScheme getScheme() {
        return new ComputeIKStateless_argsStandardScheme();
      }
    }

    private static class ComputeIKStateless_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeIKStateless_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeIKStateless_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.posture = new MMIStandard.MAvatarPosture();
                struct.posture.read(iprot);
                struct.setPostureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.properties = new java.util.ArrayList<MIKProperty>(_list126.size);
                  @org.apache.thrift.annotation.Nullable MIKProperty _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new MIKProperty();
                    _elem127.read(iprot);
                    struct.properties.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeIKStateless_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.posture != null) {
          oprot.writeFieldBegin(POSTURE_FIELD_DESC);
          struct.posture.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
            for (MIKProperty _iter129 : struct.properties)
            {
              _iter129.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeIKStateless_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIKStateless_argsTupleScheme getScheme() {
        return new ComputeIKStateless_argsTupleScheme();
      }
    }

    private static class ComputeIKStateless_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeIKStateless_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeIKStateless_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPosture()) {
          optionals.set(0);
        }
        if (struct.isSetProperties()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPosture()) {
          struct.posture.write(oprot);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (MIKProperty _iter130 : struct.properties)
            {
              _iter130.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeIKStateless_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.posture = new MMIStandard.MAvatarPosture();
          struct.posture.read(iprot);
          struct.setPostureIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.properties = new java.util.ArrayList<MIKProperty>(_list131.size);
            @org.apache.thrift.annotation.Nullable MIKProperty _elem132;
            for (int _i133 = 0; _i133 < _list131.size; ++_i133)
            {
              _elem132 = new MIKProperty();
              _elem132.read(iprot);
              struct.properties.add(_elem132);
            }
          }
          struct.setPropertiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ComputeIKStateless_result implements org.apache.thrift.TBase<ComputeIKStateless_result, ComputeIKStateless_result._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeIKStateless_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeIKStateless_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeIKStateless_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeIKStateless_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPosture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeIKStateless_result.class, metaDataMap);
    }

    public ComputeIKStateless_result() {
    }

    public ComputeIKStateless_result(
      MMIStandard.MAvatarPosture success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeIKStateless_result(ComputeIKStateless_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MAvatarPosture(other.success);
      }
    }

    public ComputeIKStateless_result deepCopy() {
      return new ComputeIKStateless_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPosture getSuccess() {
      return this.success;
    }

    public ComputeIKStateless_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MAvatarPosture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeIKStateless_result)
        return this.equals((ComputeIKStateless_result)that);
      return false;
    }

    public boolean equals(ComputeIKStateless_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputeIKStateless_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeIKStateless_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeIKStateless_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIKStateless_resultStandardScheme getScheme() {
        return new ComputeIKStateless_resultStandardScheme();
      }
    }

    private static class ComputeIKStateless_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeIKStateless_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeIKStateless_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MAvatarPosture();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeIKStateless_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeIKStateless_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIKStateless_resultTupleScheme getScheme() {
        return new ComputeIKStateless_resultTupleScheme();
      }
    }

    private static class ComputeIKStateless_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeIKStateless_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeIKStateless_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeIKStateless_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MAvatarPosture();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ComputeIK_args implements org.apache.thrift.TBase<ComputeIK_args, ComputeIK_args._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeIK_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeIK_args");

    private static final org.apache.thrift.protocol.TField POSTURE_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("postureValues", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeIK_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeIK_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues postureValues; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MIKProperty> properties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSTURE_VALUES((short)1, "postureValues"),
      PROPERTIES((short)2, "properties");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSTURE_VALUES
            return POSTURE_VALUES;
          case 2: // PROPERTIES
            return PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSTURE_VALUES, new org.apache.thrift.meta_data.FieldMetaData("postureValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPostureValues.class)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "MIKProperty"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeIK_args.class, metaDataMap);
    }

    public ComputeIK_args() {
    }

    public ComputeIK_args(
      MMIStandard.MAvatarPostureValues postureValues,
      java.util.List<MIKProperty> properties)
    {
      this();
      this.postureValues = postureValues;
      this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeIK_args(ComputeIK_args other) {
      if (other.isSetPostureValues()) {
        this.postureValues = new MMIStandard.MAvatarPostureValues(other.postureValues);
      }
      if (other.isSetProperties()) {
        java.util.List<MIKProperty> __this__properties = new java.util.ArrayList<MIKProperty>(other.properties.size());
        for (MIKProperty other_element : other.properties) {
          __this__properties.add(new MIKProperty(other_element));
        }
        this.properties = __this__properties;
      }
    }

    public ComputeIK_args deepCopy() {
      return new ComputeIK_args(this);
    }

    @Override
    public void clear() {
      this.postureValues = null;
      this.properties = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPostureValues getPostureValues() {
      return this.postureValues;
    }

    public ComputeIK_args setPostureValues(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues postureValues) {
      this.postureValues = postureValues;
      return this;
    }

    public void unsetPostureValues() {
      this.postureValues = null;
    }

    /** Returns true if field postureValues is set (has been assigned a value) and false otherwise */
    public boolean isSetPostureValues() {
      return this.postureValues != null;
    }

    public void setPostureValuesIsSet(boolean value) {
      if (!value) {
        this.postureValues = null;
      }
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MIKProperty> getPropertiesIterator() {
      return (this.properties == null) ? null : this.properties.iterator();
    }

    public void addToProperties(MIKProperty elem) {
      if (this.properties == null) {
        this.properties = new java.util.ArrayList<MIKProperty>();
      }
      this.properties.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MIKProperty> getProperties() {
      return this.properties;
    }

    public ComputeIK_args setProperties(@org.apache.thrift.annotation.Nullable java.util.List<MIKProperty> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case POSTURE_VALUES:
        if (value == null) {
          unsetPostureValues();
        } else {
          setPostureValues((MMIStandard.MAvatarPostureValues)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((java.util.List<MIKProperty>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POSTURE_VALUES:
        return getPostureValues();

      case PROPERTIES:
        return getProperties();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POSTURE_VALUES:
        return isSetPostureValues();
      case PROPERTIES:
        return isSetProperties();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeIK_args)
        return this.equals((ComputeIK_args)that);
      return false;
    }

    public boolean equals(ComputeIK_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_postureValues = true && this.isSetPostureValues();
      boolean that_present_postureValues = true && that.isSetPostureValues();
      if (this_present_postureValues || that_present_postureValues) {
        if (!(this_present_postureValues && that_present_postureValues))
          return false;
        if (!this.postureValues.equals(that.postureValues))
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPostureValues()) ? 131071 : 524287);
      if (isSetPostureValues())
        hashCode = hashCode * 8191 + postureValues.hashCode();

      hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
      if (isSetProperties())
        hashCode = hashCode * 8191 + properties.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputeIK_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPostureValues()).compareTo(other.isSetPostureValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostureValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postureValues, other.postureValues);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeIK_args(");
      boolean first = true;

      sb.append("postureValues:");
      if (this.postureValues == null) {
        sb.append("null");
      } else {
        sb.append(this.postureValues);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (postureValues != null) {
        postureValues.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeIK_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIK_argsStandardScheme getScheme() {
        return new ComputeIK_argsStandardScheme();
      }
    }

    private static class ComputeIK_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeIK_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeIK_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSTURE_VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.postureValues = new MMIStandard.MAvatarPostureValues();
                struct.postureValues.read(iprot);
                struct.setPostureValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                  struct.properties = new java.util.ArrayList<MIKProperty>(_list134.size);
                  @org.apache.thrift.annotation.Nullable MIKProperty _elem135;
                  for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                  {
                    _elem135 = new MIKProperty();
                    _elem135.read(iprot);
                    struct.properties.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeIK_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.postureValues != null) {
          oprot.writeFieldBegin(POSTURE_VALUES_FIELD_DESC);
          struct.postureValues.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
            for (MIKProperty _iter137 : struct.properties)
            {
              _iter137.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeIK_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIK_argsTupleScheme getScheme() {
        return new ComputeIK_argsTupleScheme();
      }
    }

    private static class ComputeIK_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeIK_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeIK_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPostureValues()) {
          optionals.set(0);
        }
        if (struct.isSetProperties()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPostureValues()) {
          struct.postureValues.write(oprot);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (MIKProperty _iter138 : struct.properties)
            {
              _iter138.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeIK_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.postureValues = new MMIStandard.MAvatarPostureValues();
          struct.postureValues.read(iprot);
          struct.setPostureValuesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.properties = new java.util.ArrayList<MIKProperty>(_list139.size);
            @org.apache.thrift.annotation.Nullable MIKProperty _elem140;
            for (int _i141 = 0; _i141 < _list139.size; ++_i141)
            {
              _elem140 = new MIKProperty();
              _elem140.read(iprot);
              struct.properties.add(_elem140);
            }
          }
          struct.setPropertiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ComputeIK_result implements org.apache.thrift.TBase<ComputeIK_result, ComputeIK_result._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeIK_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeIK_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeIK_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeIK_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPostureValues.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeIK_result.class, metaDataMap);
    }

    public ComputeIK_result() {
    }

    public ComputeIK_result(
      MMIStandard.MAvatarPostureValues success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeIK_result(ComputeIK_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MAvatarPostureValues(other.success);
      }
    }

    public ComputeIK_result deepCopy() {
      return new ComputeIK_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPostureValues getSuccess() {
      return this.success;
    }

    public ComputeIK_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MAvatarPostureValues)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeIK_result)
        return this.equals((ComputeIK_result)that);
      return false;
    }

    public boolean equals(ComputeIK_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputeIK_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeIK_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeIK_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIK_resultStandardScheme getScheme() {
        return new ComputeIK_resultStandardScheme();
      }
    }

    private static class ComputeIK_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeIK_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeIK_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MAvatarPostureValues();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeIK_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeIK_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeIK_resultTupleScheme getScheme() {
        return new ComputeIK_resultTupleScheme();
      }
    }

    private static class ComputeIK_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeIK_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeIK_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeIK_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MAvatarPostureValues();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
