/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MMUDescription implements org.apache.thrift.TBase<MMUDescription, MMUDescription._Fields>, java.io.Serializable, Cloneable, Comparable<MMUDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MMUDescription");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ASSEMBLY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("AssemblyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MOTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("MotionType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("Language", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("Author", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUPPORTED_PROPORTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("SupportedProportions", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Properties", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Dependencies", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Events", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LONG_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("LongDescription", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHORT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ShortDescription", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("Parameters", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MMUDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MMUDescriptionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String Name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String AssemblyName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String MotionType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Language; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Author; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Version; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> SupportedProportions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Dependencies; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Events; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String LongDescription; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ShortDescription; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MParameter> Parameters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "Name"),
    ID((short)2, "ID"),
    ASSEMBLY_NAME((short)3, "AssemblyName"),
    MOTION_TYPE((short)4, "MotionType"),
    LANGUAGE((short)5, "Language"),
    AUTHOR((short)6, "Author"),
    VERSION((short)7, "Version"),
    SUPPORTED_PROPORTIONS((short)8, "SupportedProportions"),
    PROPERTIES((short)9, "Properties"),
    DEPENDENCIES((short)10, "Dependencies"),
    EVENTS((short)11, "Events"),
    LONG_DESCRIPTION((short)12, "LongDescription"),
    SHORT_DESCRIPTION((short)13, "ShortDescription"),
    PARAMETERS((short)14, "Parameters");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ID
          return ID;
        case 3: // ASSEMBLY_NAME
          return ASSEMBLY_NAME;
        case 4: // MOTION_TYPE
          return MOTION_TYPE;
        case 5: // LANGUAGE
          return LANGUAGE;
        case 6: // AUTHOR
          return AUTHOR;
        case 7: // VERSION
          return VERSION;
        case 8: // SUPPORTED_PROPORTIONS
          return SUPPORTED_PROPORTIONS;
        case 9: // PROPERTIES
          return PROPERTIES;
        case 10: // DEPENDENCIES
          return DEPENDENCIES;
        case 11: // EVENTS
          return EVENTS;
        case 12: // LONG_DESCRIPTION
          return LONG_DESCRIPTION;
        case 13: // SHORT_DESCRIPTION
          return SHORT_DESCRIPTION;
        case 14: // PARAMETERS
          return PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUPPORTED_PROPORTIONS,_Fields.PROPERTIES,_Fields.DEPENDENCIES,_Fields.EVENTS,_Fields.LONG_DESCRIPTION,_Fields.SHORT_DESCRIPTION,_Fields.PARAMETERS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSEMBLY_NAME, new org.apache.thrift.meta_data.FieldMetaData("AssemblyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("MotionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("Language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("Author", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("Version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPPORTED_PROPORTIONS, new org.apache.thrift.meta_data.FieldMetaData("SupportedProportions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("Properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("Dependencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("Events", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LONG_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("LongDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("ShortDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("Parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MParameter.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MMUDescription.class, metaDataMap);
  }

  public MMUDescription() {
  }

  public MMUDescription(
    java.lang.String Name,
    java.lang.String ID,
    java.lang.String AssemblyName,
    java.lang.String MotionType,
    java.lang.String Language,
    java.lang.String Author,
    java.lang.String Version)
  {
    this();
    this.Name = Name;
    this.ID = ID;
    this.AssemblyName = AssemblyName;
    this.MotionType = MotionType;
    this.Language = Language;
    this.Author = Author;
    this.Version = Version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MMUDescription(MMUDescription other) {
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetID()) {
      this.ID = other.ID;
    }
    if (other.isSetAssemblyName()) {
      this.AssemblyName = other.AssemblyName;
    }
    if (other.isSetMotionType()) {
      this.MotionType = other.MotionType;
    }
    if (other.isSetLanguage()) {
      this.Language = other.Language;
    }
    if (other.isSetAuthor()) {
      this.Author = other.Author;
    }
    if (other.isSetVersion()) {
      this.Version = other.Version;
    }
    if (other.isSetSupportedProportions()) {
      java.util.Map<java.lang.String,java.lang.Double> __this__SupportedProportions = new java.util.HashMap<java.lang.String,java.lang.Double>(other.SupportedProportions);
      this.SupportedProportions = __this__SupportedProportions;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__Properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.Properties);
      this.Properties = __this__Properties;
    }
    if (other.isSetDependencies()) {
      java.util.List<java.lang.String> __this__Dependencies = new java.util.ArrayList<java.lang.String>(other.Dependencies);
      this.Dependencies = __this__Dependencies;
    }
    if (other.isSetEvents()) {
      java.util.List<java.lang.String> __this__Events = new java.util.ArrayList<java.lang.String>(other.Events);
      this.Events = __this__Events;
    }
    if (other.isSetLongDescription()) {
      this.LongDescription = other.LongDescription;
    }
    if (other.isSetShortDescription()) {
      this.ShortDescription = other.ShortDescription;
    }
    if (other.isSetParameters()) {
      java.util.List<MMIStandard.MParameter> __this__Parameters = new java.util.ArrayList<MMIStandard.MParameter>(other.Parameters.size());
      for (MMIStandard.MParameter other_element : other.Parameters) {
        __this__Parameters.add(new MMIStandard.MParameter(other_element));
      }
      this.Parameters = __this__Parameters;
    }
  }

  public MMUDescription deepCopy() {
    return new MMUDescription(this);
  }

  @Override
  public void clear() {
    this.Name = null;
    this.ID = null;
    this.AssemblyName = null;
    this.MotionType = null;
    this.Language = null;
    this.Author = null;
    this.Version = null;
    this.SupportedProportions = null;
    this.Properties = null;
    this.Dependencies = null;
    this.Events = null;
    this.LongDescription = null;
    this.ShortDescription = null;
    this.Parameters = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.Name;
  }

  public MMUDescription setName(@org.apache.thrift.annotation.Nullable java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getID() {
    return this.ID;
  }

  public MMUDescription setID(@org.apache.thrift.annotation.Nullable java.lang.String ID) {
    this.ID = ID;
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAssemblyName() {
    return this.AssemblyName;
  }

  public MMUDescription setAssemblyName(@org.apache.thrift.annotation.Nullable java.lang.String AssemblyName) {
    this.AssemblyName = AssemblyName;
    return this;
  }

  public void unsetAssemblyName() {
    this.AssemblyName = null;
  }

  /** Returns true if field AssemblyName is set (has been assigned a value) and false otherwise */
  public boolean isSetAssemblyName() {
    return this.AssemblyName != null;
  }

  public void setAssemblyNameIsSet(boolean value) {
    if (!value) {
      this.AssemblyName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMotionType() {
    return this.MotionType;
  }

  public MMUDescription setMotionType(@org.apache.thrift.annotation.Nullable java.lang.String MotionType) {
    this.MotionType = MotionType;
    return this;
  }

  public void unsetMotionType() {
    this.MotionType = null;
  }

  /** Returns true if field MotionType is set (has been assigned a value) and false otherwise */
  public boolean isSetMotionType() {
    return this.MotionType != null;
  }

  public void setMotionTypeIsSet(boolean value) {
    if (!value) {
      this.MotionType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLanguage() {
    return this.Language;
  }

  public MMUDescription setLanguage(@org.apache.thrift.annotation.Nullable java.lang.String Language) {
    this.Language = Language;
    return this;
  }

  public void unsetLanguage() {
    this.Language = null;
  }

  /** Returns true if field Language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.Language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.Language = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthor() {
    return this.Author;
  }

  public MMUDescription setAuthor(@org.apache.thrift.annotation.Nullable java.lang.String Author) {
    this.Author = Author;
    return this;
  }

  public void unsetAuthor() {
    this.Author = null;
  }

  /** Returns true if field Author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.Author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.Author = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.Version;
  }

  public MMUDescription setVersion(@org.apache.thrift.annotation.Nullable java.lang.String Version) {
    this.Version = Version;
    return this;
  }

  public void unsetVersion() {
    this.Version = null;
  }

  /** Returns true if field Version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.Version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.Version = null;
    }
  }

  public int getSupportedProportionsSize() {
    return (this.SupportedProportions == null) ? 0 : this.SupportedProportions.size();
  }

  public void putToSupportedProportions(java.lang.String key, double val) {
    if (this.SupportedProportions == null) {
      this.SupportedProportions = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this.SupportedProportions.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Double> getSupportedProportions() {
    return this.SupportedProportions;
  }

  public MMUDescription setSupportedProportions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> SupportedProportions) {
    this.SupportedProportions = SupportedProportions;
    return this;
  }

  public void unsetSupportedProportions() {
    this.SupportedProportions = null;
  }

  /** Returns true if field SupportedProportions is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportedProportions() {
    return this.SupportedProportions != null;
  }

  public void setSupportedProportionsIsSet(boolean value) {
    if (!value) {
      this.SupportedProportions = null;
    }
  }

  public int getPropertiesSize() {
    return (this.Properties == null) ? 0 : this.Properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.Properties == null) {
      this.Properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.Properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.Properties;
  }

  public MMUDescription setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties) {
    this.Properties = Properties;
    return this;
  }

  public void unsetProperties() {
    this.Properties = null;
  }

  /** Returns true if field Properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.Properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.Properties = null;
    }
  }

  public int getDependenciesSize() {
    return (this.Dependencies == null) ? 0 : this.Dependencies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDependenciesIterator() {
    return (this.Dependencies == null) ? null : this.Dependencies.iterator();
  }

  public void addToDependencies(java.lang.String elem) {
    if (this.Dependencies == null) {
      this.Dependencies = new java.util.ArrayList<java.lang.String>();
    }
    this.Dependencies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDependencies() {
    return this.Dependencies;
  }

  public MMUDescription setDependencies(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Dependencies) {
    this.Dependencies = Dependencies;
    return this;
  }

  public void unsetDependencies() {
    this.Dependencies = null;
  }

  /** Returns true if field Dependencies is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencies() {
    return this.Dependencies != null;
  }

  public void setDependenciesIsSet(boolean value) {
    if (!value) {
      this.Dependencies = null;
    }
  }

  public int getEventsSize() {
    return (this.Events == null) ? 0 : this.Events.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getEventsIterator() {
    return (this.Events == null) ? null : this.Events.iterator();
  }

  public void addToEvents(java.lang.String elem) {
    if (this.Events == null) {
      this.Events = new java.util.ArrayList<java.lang.String>();
    }
    this.Events.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getEvents() {
    return this.Events;
  }

  public MMUDescription setEvents(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Events) {
    this.Events = Events;
    return this;
  }

  public void unsetEvents() {
    this.Events = null;
  }

  /** Returns true if field Events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.Events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.Events = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLongDescription() {
    return this.LongDescription;
  }

  public MMUDescription setLongDescription(@org.apache.thrift.annotation.Nullable java.lang.String LongDescription) {
    this.LongDescription = LongDescription;
    return this;
  }

  public void unsetLongDescription() {
    this.LongDescription = null;
  }

  /** Returns true if field LongDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetLongDescription() {
    return this.LongDescription != null;
  }

  public void setLongDescriptionIsSet(boolean value) {
    if (!value) {
      this.LongDescription = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getShortDescription() {
    return this.ShortDescription;
  }

  public MMUDescription setShortDescription(@org.apache.thrift.annotation.Nullable java.lang.String ShortDescription) {
    this.ShortDescription = ShortDescription;
    return this;
  }

  public void unsetShortDescription() {
    this.ShortDescription = null;
  }

  /** Returns true if field ShortDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDescription() {
    return this.ShortDescription != null;
  }

  public void setShortDescriptionIsSet(boolean value) {
    if (!value) {
      this.ShortDescription = null;
    }
  }

  public int getParametersSize() {
    return (this.Parameters == null) ? 0 : this.Parameters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MMIStandard.MParameter> getParametersIterator() {
    return (this.Parameters == null) ? null : this.Parameters.iterator();
  }

  public void addToParameters(MMIStandard.MParameter elem) {
    if (this.Parameters == null) {
      this.Parameters = new java.util.ArrayList<MMIStandard.MParameter>();
    }
    this.Parameters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MMIStandard.MParameter> getParameters() {
    return this.Parameters;
  }

  public MMUDescription setParameters(@org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MParameter> Parameters) {
    this.Parameters = Parameters;
    return this;
  }

  public void unsetParameters() {
    this.Parameters = null;
  }

  /** Returns true if field Parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.Parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.Parameters = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.String)value);
      }
      break;

    case ASSEMBLY_NAME:
      if (value == null) {
        unsetAssemblyName();
      } else {
        setAssemblyName((java.lang.String)value);
      }
      break;

    case MOTION_TYPE:
      if (value == null) {
        unsetMotionType();
      } else {
        setMotionType((java.lang.String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case SUPPORTED_PROPORTIONS:
      if (value == null) {
        unsetSupportedProportions();
      } else {
        setSupportedProportions((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case DEPENDENCIES:
      if (value == null) {
        unsetDependencies();
      } else {
        setDependencies((java.util.List<java.lang.String>)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((java.util.List<java.lang.String>)value);
      }
      break;

    case LONG_DESCRIPTION:
      if (value == null) {
        unsetLongDescription();
      } else {
        setLongDescription((java.lang.String)value);
      }
      break;

    case SHORT_DESCRIPTION:
      if (value == null) {
        unsetShortDescription();
      } else {
        setShortDescription((java.lang.String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((java.util.List<MMIStandard.MParameter>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ID:
      return getID();

    case ASSEMBLY_NAME:
      return getAssemblyName();

    case MOTION_TYPE:
      return getMotionType();

    case LANGUAGE:
      return getLanguage();

    case AUTHOR:
      return getAuthor();

    case VERSION:
      return getVersion();

    case SUPPORTED_PROPORTIONS:
      return getSupportedProportions();

    case PROPERTIES:
      return getProperties();

    case DEPENDENCIES:
      return getDependencies();

    case EVENTS:
      return getEvents();

    case LONG_DESCRIPTION:
      return getLongDescription();

    case SHORT_DESCRIPTION:
      return getShortDescription();

    case PARAMETERS:
      return getParameters();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ID:
      return isSetID();
    case ASSEMBLY_NAME:
      return isSetAssemblyName();
    case MOTION_TYPE:
      return isSetMotionType();
    case LANGUAGE:
      return isSetLanguage();
    case AUTHOR:
      return isSetAuthor();
    case VERSION:
      return isSetVersion();
    case SUPPORTED_PROPORTIONS:
      return isSetSupportedProportions();
    case PROPERTIES:
      return isSetProperties();
    case DEPENDENCIES:
      return isSetDependencies();
    case EVENTS:
      return isSetEvents();
    case LONG_DESCRIPTION:
      return isSetLongDescription();
    case SHORT_DESCRIPTION:
      return isSetShortDescription();
    case PARAMETERS:
      return isSetParameters();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MMUDescription)
      return this.equals((MMUDescription)that);
    return false;
  }

  public boolean equals(MMUDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_AssemblyName = true && this.isSetAssemblyName();
    boolean that_present_AssemblyName = true && that.isSetAssemblyName();
    if (this_present_AssemblyName || that_present_AssemblyName) {
      if (!(this_present_AssemblyName && that_present_AssemblyName))
        return false;
      if (!this.AssemblyName.equals(that.AssemblyName))
        return false;
    }

    boolean this_present_MotionType = true && this.isSetMotionType();
    boolean that_present_MotionType = true && that.isSetMotionType();
    if (this_present_MotionType || that_present_MotionType) {
      if (!(this_present_MotionType && that_present_MotionType))
        return false;
      if (!this.MotionType.equals(that.MotionType))
        return false;
    }

    boolean this_present_Language = true && this.isSetLanguage();
    boolean that_present_Language = true && that.isSetLanguage();
    if (this_present_Language || that_present_Language) {
      if (!(this_present_Language && that_present_Language))
        return false;
      if (!this.Language.equals(that.Language))
        return false;
    }

    boolean this_present_Author = true && this.isSetAuthor();
    boolean that_present_Author = true && that.isSetAuthor();
    if (this_present_Author || that_present_Author) {
      if (!(this_present_Author && that_present_Author))
        return false;
      if (!this.Author.equals(that.Author))
        return false;
    }

    boolean this_present_Version = true && this.isSetVersion();
    boolean that_present_Version = true && that.isSetVersion();
    if (this_present_Version || that_present_Version) {
      if (!(this_present_Version && that_present_Version))
        return false;
      if (!this.Version.equals(that.Version))
        return false;
    }

    boolean this_present_SupportedProportions = true && this.isSetSupportedProportions();
    boolean that_present_SupportedProportions = true && that.isSetSupportedProportions();
    if (this_present_SupportedProportions || that_present_SupportedProportions) {
      if (!(this_present_SupportedProportions && that_present_SupportedProportions))
        return false;
      if (!this.SupportedProportions.equals(that.SupportedProportions))
        return false;
    }

    boolean this_present_Properties = true && this.isSetProperties();
    boolean that_present_Properties = true && that.isSetProperties();
    if (this_present_Properties || that_present_Properties) {
      if (!(this_present_Properties && that_present_Properties))
        return false;
      if (!this.Properties.equals(that.Properties))
        return false;
    }

    boolean this_present_Dependencies = true && this.isSetDependencies();
    boolean that_present_Dependencies = true && that.isSetDependencies();
    if (this_present_Dependencies || that_present_Dependencies) {
      if (!(this_present_Dependencies && that_present_Dependencies))
        return false;
      if (!this.Dependencies.equals(that.Dependencies))
        return false;
    }

    boolean this_present_Events = true && this.isSetEvents();
    boolean that_present_Events = true && that.isSetEvents();
    if (this_present_Events || that_present_Events) {
      if (!(this_present_Events && that_present_Events))
        return false;
      if (!this.Events.equals(that.Events))
        return false;
    }

    boolean this_present_LongDescription = true && this.isSetLongDescription();
    boolean that_present_LongDescription = true && that.isSetLongDescription();
    if (this_present_LongDescription || that_present_LongDescription) {
      if (!(this_present_LongDescription && that_present_LongDescription))
        return false;
      if (!this.LongDescription.equals(that.LongDescription))
        return false;
    }

    boolean this_present_ShortDescription = true && this.isSetShortDescription();
    boolean that_present_ShortDescription = true && that.isSetShortDescription();
    if (this_present_ShortDescription || that_present_ShortDescription) {
      if (!(this_present_ShortDescription && that_present_ShortDescription))
        return false;
      if (!this.ShortDescription.equals(that.ShortDescription))
        return false;
    }

    boolean this_present_Parameters = true && this.isSetParameters();
    boolean that_present_Parameters = true && that.isSetParameters();
    if (this_present_Parameters || that_present_Parameters) {
      if (!(this_present_Parameters && that_present_Parameters))
        return false;
      if (!this.Parameters.equals(that.Parameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssemblyName()) ? 131071 : 524287);
    if (isSetAssemblyName())
      hashCode = hashCode * 8191 + AssemblyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMotionType()) ? 131071 : 524287);
    if (isSetMotionType())
      hashCode = hashCode * 8191 + MotionType.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguage()) ? 131071 : 524287);
    if (isSetLanguage())
      hashCode = hashCode * 8191 + Language.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + Author.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + Version.hashCode();

    hashCode = hashCode * 8191 + ((isSetSupportedProportions()) ? 131071 : 524287);
    if (isSetSupportedProportions())
      hashCode = hashCode * 8191 + SupportedProportions.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + Properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependencies()) ? 131071 : 524287);
    if (isSetDependencies())
      hashCode = hashCode * 8191 + Dependencies.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvents()) ? 131071 : 524287);
    if (isSetEvents())
      hashCode = hashCode * 8191 + Events.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongDescription()) ? 131071 : 524287);
    if (isSetLongDescription())
      hashCode = hashCode * 8191 + LongDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortDescription()) ? 131071 : 524287);
    if (isSetShortDescription())
      hashCode = hashCode * 8191 + ShortDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetParameters()) ? 131071 : 524287);
    if (isSetParameters())
      hashCode = hashCode * 8191 + Parameters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MMUDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssemblyName()).compareTo(other.isSetAssemblyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssemblyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssemblyName, other.AssemblyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMotionType()).compareTo(other.isSetMotionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MotionType, other.MotionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Language, other.Language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Author, other.Author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Version, other.Version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSupportedProportions()).compareTo(other.isSetSupportedProportions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportedProportions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SupportedProportions, other.SupportedProportions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Properties, other.Properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependencies()).compareTo(other.isSetDependencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Dependencies, other.Dependencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvents()).compareTo(other.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Events, other.Events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongDescription()).compareTo(other.isSetLongDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LongDescription, other.LongDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortDescription()).compareTo(other.isSetShortDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ShortDescription, other.ShortDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Parameters, other.Parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MMUDescription(");
    boolean first = true;

    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      sb.append(this.ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssemblyName:");
    if (this.AssemblyName == null) {
      sb.append("null");
    } else {
      sb.append(this.AssemblyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MotionType:");
    if (this.MotionType == null) {
      sb.append("null");
    } else {
      sb.append(this.MotionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Language:");
    if (this.Language == null) {
      sb.append("null");
    } else {
      sb.append(this.Language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Author:");
    if (this.Author == null) {
      sb.append("null");
    } else {
      sb.append(this.Author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Version:");
    if (this.Version == null) {
      sb.append("null");
    } else {
      sb.append(this.Version);
    }
    first = false;
    if (isSetSupportedProportions()) {
      if (!first) sb.append(", ");
      sb.append("SupportedProportions:");
      if (this.SupportedProportions == null) {
        sb.append("null");
      } else {
        sb.append(this.SupportedProportions);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("Properties:");
      if (this.Properties == null) {
        sb.append("null");
      } else {
        sb.append(this.Properties);
      }
      first = false;
    }
    if (isSetDependencies()) {
      if (!first) sb.append(", ");
      sb.append("Dependencies:");
      if (this.Dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.Dependencies);
      }
      first = false;
    }
    if (isSetEvents()) {
      if (!first) sb.append(", ");
      sb.append("Events:");
      if (this.Events == null) {
        sb.append("null");
      } else {
        sb.append(this.Events);
      }
      first = false;
    }
    if (isSetLongDescription()) {
      if (!first) sb.append(", ");
      sb.append("LongDescription:");
      if (this.LongDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.LongDescription);
      }
      first = false;
    }
    if (isSetShortDescription()) {
      if (!first) sb.append(", ");
      sb.append("ShortDescription:");
      if (this.ShortDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.ShortDescription);
      }
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("Parameters:");
      if (this.Parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.Parameters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Name' was not present! Struct: " + toString());
    }
    if (ID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not present! Struct: " + toString());
    }
    if (AssemblyName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'AssemblyName' was not present! Struct: " + toString());
    }
    if (MotionType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'MotionType' was not present! Struct: " + toString());
    }
    if (Language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Language' was not present! Struct: " + toString());
    }
    if (Author == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Author' was not present! Struct: " + toString());
    }
    if (Version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MMUDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MMUDescriptionStandardScheme getScheme() {
      return new MMUDescriptionStandardScheme();
    }
  }

  private static class MMUDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<MMUDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MMUDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readString();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASSEMBLY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AssemblyName = iprot.readString();
              struct.setAssemblyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MotionType = iprot.readString();
              struct.setMotionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUPPORTED_PROPORTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.SupportedProportions = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map36.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key37;
                double _val38;
                for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                {
                  _key37 = iprot.readString();
                  _val38 = iprot.readDouble();
                  struct.SupportedProportions.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setSupportedProportionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map40.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key41;
                @org.apache.thrift.annotation.Nullable java.lang.String _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  struct.Properties.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEPENDENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.Dependencies = new java.util.ArrayList<java.lang.String>(_list44.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = iprot.readString();
                  struct.Dependencies.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setDependenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.Events = new java.util.ArrayList<java.lang.String>(_list47.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = iprot.readString();
                  struct.Events.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LONG_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LongDescription = iprot.readString();
              struct.setLongDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHORT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ShortDescription = iprot.readString();
              struct.setShortDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.Parameters = new java.util.ArrayList<MMIStandard.MParameter>(_list50.size);
                @org.apache.thrift.annotation.Nullable MMIStandard.MParameter _elem51;
                for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                {
                  _elem51 = new MMIStandard.MParameter();
                  _elem51.read(iprot);
                  struct.Parameters.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MMUDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.AssemblyName != null) {
        oprot.writeFieldBegin(ASSEMBLY_NAME_FIELD_DESC);
        oprot.writeString(struct.AssemblyName);
        oprot.writeFieldEnd();
      }
      if (struct.MotionType != null) {
        oprot.writeFieldBegin(MOTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.MotionType);
        oprot.writeFieldEnd();
      }
      if (struct.Language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.Language);
        oprot.writeFieldEnd();
      }
      if (struct.Author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.Author);
        oprot.writeFieldEnd();
      }
      if (struct.Version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.Version);
        oprot.writeFieldEnd();
      }
      if (struct.SupportedProportions != null) {
        if (struct.isSetSupportedProportions()) {
          oprot.writeFieldBegin(SUPPORTED_PROPORTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.SupportedProportions.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter53 : struct.SupportedProportions.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeDouble(_iter53.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter54 : struct.Properties.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Dependencies != null) {
        if (struct.isSetDependencies()) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.Dependencies.size()));
            for (java.lang.String _iter55 : struct.Dependencies)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Events != null) {
        if (struct.isSetEvents()) {
          oprot.writeFieldBegin(EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.Events.size()));
            for (java.lang.String _iter56 : struct.Events)
            {
              oprot.writeString(_iter56);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.LongDescription != null) {
        if (struct.isSetLongDescription()) {
          oprot.writeFieldBegin(LONG_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.LongDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ShortDescription != null) {
        if (struct.isSetShortDescription()) {
          oprot.writeFieldBegin(SHORT_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.ShortDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Parameters.size()));
            for (MMIStandard.MParameter _iter57 : struct.Parameters)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MMUDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MMUDescriptionTupleScheme getScheme() {
      return new MMUDescriptionTupleScheme();
    }
  }

  private static class MMUDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<MMUDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MMUDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.Name);
      oprot.writeString(struct.ID);
      oprot.writeString(struct.AssemblyName);
      oprot.writeString(struct.MotionType);
      oprot.writeString(struct.Language);
      oprot.writeString(struct.Author);
      oprot.writeString(struct.Version);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSupportedProportions()) {
        optionals.set(0);
      }
      if (struct.isSetProperties()) {
        optionals.set(1);
      }
      if (struct.isSetDependencies()) {
        optionals.set(2);
      }
      if (struct.isSetEvents()) {
        optionals.set(3);
      }
      if (struct.isSetLongDescription()) {
        optionals.set(4);
      }
      if (struct.isSetShortDescription()) {
        optionals.set(5);
      }
      if (struct.isSetParameters()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSupportedProportions()) {
        {
          oprot.writeI32(struct.SupportedProportions.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter58 : struct.SupportedProportions.entrySet())
          {
            oprot.writeString(_iter58.getKey());
            oprot.writeDouble(_iter58.getValue());
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.Properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter59 : struct.Properties.entrySet())
          {
            oprot.writeString(_iter59.getKey());
            oprot.writeString(_iter59.getValue());
          }
        }
      }
      if (struct.isSetDependencies()) {
        {
          oprot.writeI32(struct.Dependencies.size());
          for (java.lang.String _iter60 : struct.Dependencies)
          {
            oprot.writeString(_iter60);
          }
        }
      }
      if (struct.isSetEvents()) {
        {
          oprot.writeI32(struct.Events.size());
          for (java.lang.String _iter61 : struct.Events)
          {
            oprot.writeString(_iter61);
          }
        }
      }
      if (struct.isSetLongDescription()) {
        oprot.writeString(struct.LongDescription);
      }
      if (struct.isSetShortDescription()) {
        oprot.writeString(struct.ShortDescription);
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.Parameters.size());
          for (MMIStandard.MParameter _iter62 : struct.Parameters)
          {
            _iter62.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MMUDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Name = iprot.readString();
      struct.setNameIsSet(true);
      struct.ID = iprot.readString();
      struct.setIDIsSet(true);
      struct.AssemblyName = iprot.readString();
      struct.setAssemblyNameIsSet(true);
      struct.MotionType = iprot.readString();
      struct.setMotionTypeIsSet(true);
      struct.Language = iprot.readString();
      struct.setLanguageIsSet(true);
      struct.Author = iprot.readString();
      struct.setAuthorIsSet(true);
      struct.Version = iprot.readString();
      struct.setVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map63 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.SupportedProportions = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map63.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key64;
          double _val65;
          for (int _i66 = 0; _i66 < _map63.size; ++_i66)
          {
            _key64 = iprot.readString();
            _val65 = iprot.readDouble();
            struct.SupportedProportions.put(_key64, _val65);
          }
        }
        struct.setSupportedProportionsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map67.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key68;
          @org.apache.thrift.annotation.Nullable java.lang.String _val69;
          for (int _i70 = 0; _i70 < _map67.size; ++_i70)
          {
            _key68 = iprot.readString();
            _val69 = iprot.readString();
            struct.Properties.put(_key68, _val69);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Dependencies = new java.util.ArrayList<java.lang.String>(_list71.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.Dependencies.add(_elem72);
          }
        }
        struct.setDependenciesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Events = new java.util.ArrayList<java.lang.String>(_list74.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.Events.add(_elem75);
          }
        }
        struct.setEventsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.LongDescription = iprot.readString();
        struct.setLongDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ShortDescription = iprot.readString();
        struct.setShortDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Parameters = new java.util.ArrayList<MMIStandard.MParameter>(_list77.size);
          @org.apache.thrift.annotation.Nullable MMIStandard.MParameter _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new MMIStandard.MParameter();
            _elem78.read(iprot);
            struct.Parameters.add(_elem78);
          }
        }
        struct.setParametersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

