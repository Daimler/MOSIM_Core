/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MPositionConstraint implements org.apache.thrift.TBase<MPositionConstraint, MPositionConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MPositionConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MPositionConstraint");

  private static final org.apache.thrift.protocol.TField CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("Channels", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("Values", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Parent", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MPositionConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MPositionConstraintTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MChannel> Channels; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Values; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Parent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNELS((short)1, "Channels"),
    VALUES((short)2, "Values"),
    PARENT((short)3, "Parent");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNELS
          return CHANNELS;
        case 2: // VALUES
          return VALUES;
        case 3: // PARENT
          return PARENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PARENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("Channels", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MChannel.class))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("Values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("Parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MPositionConstraint.class, metaDataMap);
  }

  public MPositionConstraint() {
  }

  public MPositionConstraint(
    java.util.List<MMIStandard.MChannel> Channels,
    java.util.List<java.lang.Double> Values)
  {
    this();
    this.Channels = Channels;
    this.Values = Values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MPositionConstraint(MPositionConstraint other) {
    if (other.isSetChannels()) {
      java.util.List<MMIStandard.MChannel> __this__Channels = new java.util.ArrayList<MMIStandard.MChannel>(other.Channels.size());
      for (MMIStandard.MChannel other_element : other.Channels) {
        __this__Channels.add(other_element);
      }
      this.Channels = __this__Channels;
    }
    if (other.isSetValues()) {
      java.util.List<java.lang.Double> __this__Values = new java.util.ArrayList<java.lang.Double>(other.Values);
      this.Values = __this__Values;
    }
    if (other.isSetParent()) {
      this.Parent = other.Parent;
    }
  }

  public MPositionConstraint deepCopy() {
    return new MPositionConstraint(this);
  }

  @Override
  public void clear() {
    this.Channels = null;
    this.Values = null;
    this.Parent = null;
  }

  public int getChannelsSize() {
    return (this.Channels == null) ? 0 : this.Channels.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MMIStandard.MChannel> getChannelsIterator() {
    return (this.Channels == null) ? null : this.Channels.iterator();
  }

  public void addToChannels(MMIStandard.MChannel elem) {
    if (this.Channels == null) {
      this.Channels = new java.util.ArrayList<MMIStandard.MChannel>();
    }
    this.Channels.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MMIStandard.MChannel> getChannels() {
    return this.Channels;
  }

  public MPositionConstraint setChannels(@org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MChannel> Channels) {
    this.Channels = Channels;
    return this;
  }

  public void unsetChannels() {
    this.Channels = null;
  }

  /** Returns true if field Channels is set (has been assigned a value) and false otherwise */
  public boolean isSetChannels() {
    return this.Channels != null;
  }

  public void setChannelsIsSet(boolean value) {
    if (!value) {
      this.Channels = null;
    }
  }

  public int getValuesSize() {
    return (this.Values == null) ? 0 : this.Values.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getValuesIterator() {
    return (this.Values == null) ? null : this.Values.iterator();
  }

  public void addToValues(double elem) {
    if (this.Values == null) {
      this.Values = new java.util.ArrayList<java.lang.Double>();
    }
    this.Values.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getValues() {
    return this.Values;
  }

  public MPositionConstraint setValues(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Values) {
    this.Values = Values;
    return this;
  }

  public void unsetValues() {
    this.Values = null;
  }

  /** Returns true if field Values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.Values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.Values = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParent() {
    return this.Parent;
  }

  public MPositionConstraint setParent(@org.apache.thrift.annotation.Nullable java.lang.String Parent) {
    this.Parent = Parent;
    return this;
  }

  public void unsetParent() {
    this.Parent = null;
  }

  /** Returns true if field Parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return this.Parent != null;
  }

  public void setParentIsSet(boolean value) {
    if (!value) {
      this.Parent = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHANNELS:
      if (value == null) {
        unsetChannels();
      } else {
        setChannels((java.util.List<MMIStandard.MChannel>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((java.util.List<java.lang.Double>)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNELS:
      return getChannels();

    case VALUES:
      return getValues();

    case PARENT:
      return getParent();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNELS:
      return isSetChannels();
    case VALUES:
      return isSetValues();
    case PARENT:
      return isSetParent();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MPositionConstraint)
      return this.equals((MPositionConstraint)that);
    return false;
  }

  public boolean equals(MPositionConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Channels = true && this.isSetChannels();
    boolean that_present_Channels = true && that.isSetChannels();
    if (this_present_Channels || that_present_Channels) {
      if (!(this_present_Channels && that_present_Channels))
        return false;
      if (!this.Channels.equals(that.Channels))
        return false;
    }

    boolean this_present_Values = true && this.isSetValues();
    boolean that_present_Values = true && that.isSetValues();
    if (this_present_Values || that_present_Values) {
      if (!(this_present_Values && that_present_Values))
        return false;
      if (!this.Values.equals(that.Values))
        return false;
    }

    boolean this_present_Parent = true && this.isSetParent();
    boolean that_present_Parent = true && that.isSetParent();
    if (this_present_Parent || that_present_Parent) {
      if (!(this_present_Parent && that_present_Parent))
        return false;
      if (!this.Parent.equals(that.Parent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChannels()) ? 131071 : 524287);
    if (isSetChannels())
      hashCode = hashCode * 8191 + Channels.hashCode();

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + Values.hashCode();

    hashCode = hashCode * 8191 + ((isSetParent()) ? 131071 : 524287);
    if (isSetParent())
      hashCode = hashCode * 8191 + Parent.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MPositionConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChannels()).compareTo(other.isSetChannels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Channels, other.Channels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Values, other.Values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Parent, other.Parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MPositionConstraint(");
    boolean first = true;

    sb.append("Channels:");
    if (this.Channels == null) {
      sb.append("null");
    } else {
      sb.append(this.Channels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Values:");
    if (this.Values == null) {
      sb.append("null");
    } else {
      sb.append(this.Values);
    }
    first = false;
    if (isSetParent()) {
      if (!first) sb.append(", ");
      sb.append("Parent:");
      if (this.Parent == null) {
        sb.append("null");
      } else {
        sb.append(this.Parent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Channels == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Channels' was not present! Struct: " + toString());
    }
    if (Values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Values' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MPositionConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPositionConstraintStandardScheme getScheme() {
      return new MPositionConstraintStandardScheme();
    }
  }

  private static class MPositionConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MPositionConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MPositionConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.Channels = new java.util.ArrayList<MMIStandard.MChannel>(_list80.size);
                @org.apache.thrift.annotation.Nullable MMIStandard.MChannel _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = MMIStandard.MChannel.findByValue(iprot.readI32());
                  if (_elem81 != null)
                  {
                    struct.Channels.add(_elem81);
                  }
                }
                iprot.readListEnd();
              }
              struct.setChannelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.Values = new java.util.ArrayList<java.lang.Double>(_list83.size);
                double _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = iprot.readDouble();
                  struct.Values.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Parent = iprot.readString();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MPositionConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Channels != null) {
        oprot.writeFieldBegin(CHANNELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.Channels.size()));
          for (MMIStandard.MChannel _iter86 : struct.Channels)
          {
            oprot.writeI32(_iter86.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Values.size()));
          for (double _iter87 : struct.Values)
          {
            oprot.writeDouble(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Parent != null) {
        if (struct.isSetParent()) {
          oprot.writeFieldBegin(PARENT_FIELD_DESC);
          oprot.writeString(struct.Parent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MPositionConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPositionConstraintTupleScheme getScheme() {
      return new MPositionConstraintTupleScheme();
    }
  }

  private static class MPositionConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MPositionConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MPositionConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.Channels.size());
        for (MMIStandard.MChannel _iter88 : struct.Channels)
        {
          oprot.writeI32(_iter88.getValue());
        }
      }
      {
        oprot.writeI32(struct.Values.size());
        for (double _iter89 : struct.Values)
        {
          oprot.writeDouble(_iter89);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParent()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParent()) {
        oprot.writeString(struct.Parent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MPositionConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.Channels = new java.util.ArrayList<MMIStandard.MChannel>(_list90.size);
        @org.apache.thrift.annotation.Nullable MMIStandard.MChannel _elem91;
        for (int _i92 = 0; _i92 < _list90.size; ++_i92)
        {
          _elem91 = MMIStandard.MChannel.findByValue(iprot.readI32());
          if (_elem91 != null)
          {
            struct.Channels.add(_elem91);
          }
        }
      }
      struct.setChannelsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.Values = new java.util.ArrayList<java.lang.Double>(_list93.size);
        double _elem94;
        for (int _i95 = 0; _i95 < _list93.size; ++_i95)
        {
          _elem94 = iprot.readDouble();
          struct.Values.add(_elem94);
        }
      }
      struct.setValuesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.Parent = iprot.readString();
        struct.setParentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

