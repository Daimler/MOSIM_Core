/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MGraspPoseService {

  public interface Iface extends MMIServiceBase.Iface {

    public MHandPose ComputeGraspPose(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void ComputeGraspPose(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand, org.apache.thrift.async.AsyncMethodCallback<MHandPose> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MHandPose ComputeGraspPose(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand) throws org.apache.thrift.TException
    {
      send_ComputeGraspPose(posture, handType, sceneObject, repositionHand);
      return recv_ComputeGraspPose();
    }

    public void send_ComputeGraspPose(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand) throws org.apache.thrift.TException
    {
      ComputeGraspPose_args args = new ComputeGraspPose_args();
      args.setPosture(posture);
      args.setHandType(handType);
      args.setSceneObject(sceneObject);
      args.setRepositionHand(repositionHand);
      sendBase("ComputeGraspPose", args);
    }

    public MHandPose recv_ComputeGraspPose() throws org.apache.thrift.TException
    {
      ComputeGraspPose_result result = new ComputeGraspPose_result();
      receiveBase(result, "ComputeGraspPose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ComputeGraspPose failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ComputeGraspPose(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand, org.apache.thrift.async.AsyncMethodCallback<MHandPose> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ComputeGraspPose_call method_call = new ComputeGraspPose_call(posture, handType, sceneObject, repositionHand, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ComputeGraspPose_call extends org.apache.thrift.async.TAsyncMethodCall<MHandPose> {
      private MMIStandard.MAvatarPosture posture;
      private MMIStandard.MJointType handType;
      private MMIStandard.MSceneObject sceneObject;
      private boolean repositionHand;
      public ComputeGraspPose_call(MMIStandard.MAvatarPosture posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, boolean repositionHand, org.apache.thrift.async.AsyncMethodCallback<MHandPose> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.posture = posture;
        this.handType = handType;
        this.sceneObject = sceneObject;
        this.repositionHand = repositionHand;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ComputeGraspPose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ComputeGraspPose_args args = new ComputeGraspPose_args();
        args.setPosture(posture);
        args.setHandType(handType);
        args.setSceneObject(sceneObject);
        args.setRepositionHand(repositionHand);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MHandPose getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ComputeGraspPose();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ComputeGraspPose", new ComputeGraspPose());
      return processMap;
    }

    public static class ComputeGraspPose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ComputeGraspPose_args> {
      public ComputeGraspPose() {
        super("ComputeGraspPose");
      }

      public ComputeGraspPose_args getEmptyArgsInstance() {
        return new ComputeGraspPose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ComputeGraspPose_result getResult(I iface, ComputeGraspPose_args args) throws org.apache.thrift.TException {
        ComputeGraspPose_result result = new ComputeGraspPose_result();
        result.success = iface.ComputeGraspPose(args.posture, args.handType, args.sceneObject, args.repositionHand);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ComputeGraspPose", new ComputeGraspPose());
      return processMap;
    }

    public static class ComputeGraspPose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ComputeGraspPose_args, MHandPose> {
      public ComputeGraspPose() {
        super("ComputeGraspPose");
      }

      public ComputeGraspPose_args getEmptyArgsInstance() {
        return new ComputeGraspPose_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MHandPose> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MHandPose>() { 
          public void onComplete(MHandPose o) {
            ComputeGraspPose_result result = new ComputeGraspPose_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ComputeGraspPose_result result = new ComputeGraspPose_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ComputeGraspPose_args args, org.apache.thrift.async.AsyncMethodCallback<MHandPose> resultHandler) throws org.apache.thrift.TException {
        iface.ComputeGraspPose(args.posture, args.handType, args.sceneObject, args.repositionHand,resultHandler);
      }
    }

  }

  public static class ComputeGraspPose_args implements org.apache.thrift.TBase<ComputeGraspPose_args, ComputeGraspPose_args._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeGraspPose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeGraspPose_args");

    private static final org.apache.thrift.protocol.TField POSTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("posture", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HAND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("handType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCENE_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneObject", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REPOSITION_HAND_FIELD_DESC = new org.apache.thrift.protocol.TField("repositionHand", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeGraspPose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeGraspPose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture posture; // required
    /**
     * 
     * @see MMIStandard.MJointType
     */
    public @org.apache.thrift.annotation.Nullable MMIStandard.MJointType handType; // required
    public @org.apache.thrift.annotation.Nullable MMIStandard.MSceneObject sceneObject; // required
    public boolean repositionHand; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSTURE((short)1, "posture"),
      /**
       * 
       * @see MMIStandard.MJointType
       */
      HAND_TYPE((short)2, "handType"),
      SCENE_OBJECT((short)3, "sceneObject"),
      REPOSITION_HAND((short)4, "repositionHand");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSTURE
            return POSTURE;
          case 2: // HAND_TYPE
            return HAND_TYPE;
          case 3: // SCENE_OBJECT
            return SCENE_OBJECT;
          case 4: // REPOSITION_HAND
            return REPOSITION_HAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPOSITIONHAND_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSTURE, new org.apache.thrift.meta_data.FieldMetaData("posture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPosture.class)));
      tmpMap.put(_Fields.HAND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("handType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MJointType.class)));
      tmpMap.put(_Fields.SCENE_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("sceneObject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MSceneObject.class)));
      tmpMap.put(_Fields.REPOSITION_HAND, new org.apache.thrift.meta_data.FieldMetaData("repositionHand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeGraspPose_args.class, metaDataMap);
    }

    public ComputeGraspPose_args() {
    }

    public ComputeGraspPose_args(
      MMIStandard.MAvatarPosture posture,
      MMIStandard.MJointType handType,
      MMIStandard.MSceneObject sceneObject,
      boolean repositionHand)
    {
      this();
      this.posture = posture;
      this.handType = handType;
      this.sceneObject = sceneObject;
      this.repositionHand = repositionHand;
      setRepositionHandIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeGraspPose_args(ComputeGraspPose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPosture()) {
        this.posture = new MMIStandard.MAvatarPosture(other.posture);
      }
      if (other.isSetHandType()) {
        this.handType = other.handType;
      }
      if (other.isSetSceneObject()) {
        this.sceneObject = new MMIStandard.MSceneObject(other.sceneObject);
      }
      this.repositionHand = other.repositionHand;
    }

    public ComputeGraspPose_args deepCopy() {
      return new ComputeGraspPose_args(this);
    }

    @Override
    public void clear() {
      this.posture = null;
      this.handType = null;
      this.sceneObject = null;
      setRepositionHandIsSet(false);
      this.repositionHand = false;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPosture getPosture() {
      return this.posture;
    }

    public ComputeGraspPose_args setPosture(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture posture) {
      this.posture = posture;
      return this;
    }

    public void unsetPosture() {
      this.posture = null;
    }

    /** Returns true if field posture is set (has been assigned a value) and false otherwise */
    public boolean isSetPosture() {
      return this.posture != null;
    }

    public void setPostureIsSet(boolean value) {
      if (!value) {
        this.posture = null;
      }
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MJointType getHandType() {
      return this.handType;
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    public ComputeGraspPose_args setHandType(@org.apache.thrift.annotation.Nullable MMIStandard.MJointType handType) {
      this.handType = handType;
      return this;
    }

    public void unsetHandType() {
      this.handType = null;
    }

    /** Returns true if field handType is set (has been assigned a value) and false otherwise */
    public boolean isSetHandType() {
      return this.handType != null;
    }

    public void setHandTypeIsSet(boolean value) {
      if (!value) {
        this.handType = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MSceneObject getSceneObject() {
      return this.sceneObject;
    }

    public ComputeGraspPose_args setSceneObject(@org.apache.thrift.annotation.Nullable MMIStandard.MSceneObject sceneObject) {
      this.sceneObject = sceneObject;
      return this;
    }

    public void unsetSceneObject() {
      this.sceneObject = null;
    }

    /** Returns true if field sceneObject is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneObject() {
      return this.sceneObject != null;
    }

    public void setSceneObjectIsSet(boolean value) {
      if (!value) {
        this.sceneObject = null;
      }
    }

    public boolean isRepositionHand() {
      return this.repositionHand;
    }

    public ComputeGraspPose_args setRepositionHand(boolean repositionHand) {
      this.repositionHand = repositionHand;
      setRepositionHandIsSet(true);
      return this;
    }

    public void unsetRepositionHand() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPOSITIONHAND_ISSET_ID);
    }

    /** Returns true if field repositionHand is set (has been assigned a value) and false otherwise */
    public boolean isSetRepositionHand() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPOSITIONHAND_ISSET_ID);
    }

    public void setRepositionHandIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPOSITIONHAND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case POSTURE:
        if (value == null) {
          unsetPosture();
        } else {
          setPosture((MMIStandard.MAvatarPosture)value);
        }
        break;

      case HAND_TYPE:
        if (value == null) {
          unsetHandType();
        } else {
          setHandType((MMIStandard.MJointType)value);
        }
        break;

      case SCENE_OBJECT:
        if (value == null) {
          unsetSceneObject();
        } else {
          setSceneObject((MMIStandard.MSceneObject)value);
        }
        break;

      case REPOSITION_HAND:
        if (value == null) {
          unsetRepositionHand();
        } else {
          setRepositionHand((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POSTURE:
        return getPosture();

      case HAND_TYPE:
        return getHandType();

      case SCENE_OBJECT:
        return getSceneObject();

      case REPOSITION_HAND:
        return isRepositionHand();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POSTURE:
        return isSetPosture();
      case HAND_TYPE:
        return isSetHandType();
      case SCENE_OBJECT:
        return isSetSceneObject();
      case REPOSITION_HAND:
        return isSetRepositionHand();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeGraspPose_args)
        return this.equals((ComputeGraspPose_args)that);
      return false;
    }

    public boolean equals(ComputeGraspPose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_posture = true && this.isSetPosture();
      boolean that_present_posture = true && that.isSetPosture();
      if (this_present_posture || that_present_posture) {
        if (!(this_present_posture && that_present_posture))
          return false;
        if (!this.posture.equals(that.posture))
          return false;
      }

      boolean this_present_handType = true && this.isSetHandType();
      boolean that_present_handType = true && that.isSetHandType();
      if (this_present_handType || that_present_handType) {
        if (!(this_present_handType && that_present_handType))
          return false;
        if (!this.handType.equals(that.handType))
          return false;
      }

      boolean this_present_sceneObject = true && this.isSetSceneObject();
      boolean that_present_sceneObject = true && that.isSetSceneObject();
      if (this_present_sceneObject || that_present_sceneObject) {
        if (!(this_present_sceneObject && that_present_sceneObject))
          return false;
        if (!this.sceneObject.equals(that.sceneObject))
          return false;
      }

      boolean this_present_repositionHand = true;
      boolean that_present_repositionHand = true;
      if (this_present_repositionHand || that_present_repositionHand) {
        if (!(this_present_repositionHand && that_present_repositionHand))
          return false;
        if (this.repositionHand != that.repositionHand)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPosture()) ? 131071 : 524287);
      if (isSetPosture())
        hashCode = hashCode * 8191 + posture.hashCode();

      hashCode = hashCode * 8191 + ((isSetHandType()) ? 131071 : 524287);
      if (isSetHandType())
        hashCode = hashCode * 8191 + handType.getValue();

      hashCode = hashCode * 8191 + ((isSetSceneObject()) ? 131071 : 524287);
      if (isSetSceneObject())
        hashCode = hashCode * 8191 + sceneObject.hashCode();

      hashCode = hashCode * 8191 + ((repositionHand) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ComputeGraspPose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPosture()).compareTo(other.isSetPosture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posture, other.posture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHandType()).compareTo(other.isSetHandType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handType, other.handType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSceneObject()).compareTo(other.isSetSceneObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneObject, other.sceneObject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRepositionHand()).compareTo(other.isSetRepositionHand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepositionHand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repositionHand, other.repositionHand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeGraspPose_args(");
      boolean first = true;

      sb.append("posture:");
      if (this.posture == null) {
        sb.append("null");
      } else {
        sb.append(this.posture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handType:");
      if (this.handType == null) {
        sb.append("null");
      } else {
        sb.append(this.handType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sceneObject:");
      if (this.sceneObject == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneObject);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repositionHand:");
      sb.append(this.repositionHand);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (posture != null) {
        posture.validate();
      }
      if (sceneObject != null) {
        sceneObject.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeGraspPose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeGraspPose_argsStandardScheme getScheme() {
        return new ComputeGraspPose_argsStandardScheme();
      }
    }

    private static class ComputeGraspPose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeGraspPose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeGraspPose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.posture = new MMIStandard.MAvatarPosture();
                struct.posture.read(iprot);
                struct.setPostureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HAND_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handType = MMIStandard.MJointType.findByValue(iprot.readI32());
                struct.setHandTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCENE_OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sceneObject = new MMIStandard.MSceneObject();
                struct.sceneObject.read(iprot);
                struct.setSceneObjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REPOSITION_HAND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.repositionHand = iprot.readBool();
                struct.setRepositionHandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeGraspPose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.posture != null) {
          oprot.writeFieldBegin(POSTURE_FIELD_DESC);
          struct.posture.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handType != null) {
          oprot.writeFieldBegin(HAND_TYPE_FIELD_DESC);
          oprot.writeI32(struct.handType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.sceneObject != null) {
          oprot.writeFieldBegin(SCENE_OBJECT_FIELD_DESC);
          struct.sceneObject.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPOSITION_HAND_FIELD_DESC);
        oprot.writeBool(struct.repositionHand);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeGraspPose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeGraspPose_argsTupleScheme getScheme() {
        return new ComputeGraspPose_argsTupleScheme();
      }
    }

    private static class ComputeGraspPose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeGraspPose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeGraspPose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPosture()) {
          optionals.set(0);
        }
        if (struct.isSetHandType()) {
          optionals.set(1);
        }
        if (struct.isSetSceneObject()) {
          optionals.set(2);
        }
        if (struct.isSetRepositionHand()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPosture()) {
          struct.posture.write(oprot);
        }
        if (struct.isSetHandType()) {
          oprot.writeI32(struct.handType.getValue());
        }
        if (struct.isSetSceneObject()) {
          struct.sceneObject.write(oprot);
        }
        if (struct.isSetRepositionHand()) {
          oprot.writeBool(struct.repositionHand);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeGraspPose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.posture = new MMIStandard.MAvatarPosture();
          struct.posture.read(iprot);
          struct.setPostureIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handType = MMIStandard.MJointType.findByValue(iprot.readI32());
          struct.setHandTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sceneObject = new MMIStandard.MSceneObject();
          struct.sceneObject.read(iprot);
          struct.setSceneObjectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.repositionHand = iprot.readBool();
          struct.setRepositionHandIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ComputeGraspPose_result implements org.apache.thrift.TBase<ComputeGraspPose_result, ComputeGraspPose_result._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeGraspPose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeGraspPose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeGraspPose_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeGraspPose_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MHandPose success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MHandPose")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeGraspPose_result.class, metaDataMap);
    }

    public ComputeGraspPose_result() {
    }

    public ComputeGraspPose_result(
      MHandPose success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputeGraspPose_result(ComputeGraspPose_result other) {
      if (other.isSetSuccess()) {
        this.success = new MHandPose(other.success);
      }
    }

    public ComputeGraspPose_result deepCopy() {
      return new ComputeGraspPose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MHandPose getSuccess() {
      return this.success;
    }

    public ComputeGraspPose_result setSuccess(@org.apache.thrift.annotation.Nullable MHandPose success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MHandPose)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputeGraspPose_result)
        return this.equals((ComputeGraspPose_result)that);
      return false;
    }

    public boolean equals(ComputeGraspPose_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputeGraspPose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeGraspPose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputeGraspPose_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeGraspPose_resultStandardScheme getScheme() {
        return new ComputeGraspPose_resultStandardScheme();
      }
    }

    private static class ComputeGraspPose_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeGraspPose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeGraspPose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MHandPose();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeGraspPose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputeGraspPose_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputeGraspPose_resultTupleScheme getScheme() {
        return new ComputeGraspPose_resultTupleScheme();
      }
    }

    private static class ComputeGraspPose_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeGraspPose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputeGraspPose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputeGraspPose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MHandPose();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
