/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MTrajectoryConstraint implements org.apache.thrift.TBase<MTrajectoryConstraint, MTrajectoryConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MTrajectoryConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MTrajectoryConstraint");

  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Reference", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Positions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ROTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Rotations", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("Times", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MTrajectoryConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MTrajectoryConstraintTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String Reference; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<MPositionConstraint> Positions; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<MRotationConstraint> Rotations; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Times; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REFERENCE((short)1, "Reference"),
    POSITIONS((short)2, "Positions"),
    ROTATIONS((short)3, "Rotations"),
    TIMES((short)4, "Times");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REFERENCE
          return REFERENCE;
        case 2: // POSITIONS
          return POSITIONS;
        case 3: // ROTATIONS
          return ROTATIONS;
        case 4: // TIMES
          return TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TIMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("Reference", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("Positions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPositionConstraint.class))));
    tmpMap.put(_Fields.ROTATIONS, new org.apache.thrift.meta_data.FieldMetaData("Rotations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MRotationConstraint.class))));
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("Times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MTrajectoryConstraint.class, metaDataMap);
  }

  public MTrajectoryConstraint() {
  }

  public MTrajectoryConstraint(
    java.lang.String Reference,
    java.util.List<MPositionConstraint> Positions,
    java.util.List<MRotationConstraint> Rotations)
  {
    this();
    this.Reference = Reference;
    this.Positions = Positions;
    this.Rotations = Rotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MTrajectoryConstraint(MTrajectoryConstraint other) {
    if (other.isSetReference()) {
      this.Reference = other.Reference;
    }
    if (other.isSetPositions()) {
      java.util.List<MPositionConstraint> __this__Positions = new java.util.ArrayList<MPositionConstraint>(other.Positions.size());
      for (MPositionConstraint other_element : other.Positions) {
        __this__Positions.add(new MPositionConstraint(other_element));
      }
      this.Positions = __this__Positions;
    }
    if (other.isSetRotations()) {
      java.util.List<MRotationConstraint> __this__Rotations = new java.util.ArrayList<MRotationConstraint>(other.Rotations.size());
      for (MRotationConstraint other_element : other.Rotations) {
        __this__Rotations.add(new MRotationConstraint(other_element));
      }
      this.Rotations = __this__Rotations;
    }
    if (other.isSetTimes()) {
      java.util.List<java.lang.Double> __this__Times = new java.util.ArrayList<java.lang.Double>(other.Times);
      this.Times = __this__Times;
    }
  }

  public MTrajectoryConstraint deepCopy() {
    return new MTrajectoryConstraint(this);
  }

  @Override
  public void clear() {
    this.Reference = null;
    this.Positions = null;
    this.Rotations = null;
    this.Times = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReference() {
    return this.Reference;
  }

  public MTrajectoryConstraint setReference(@org.apache.thrift.annotation.Nullable java.lang.String Reference) {
    this.Reference = Reference;
    return this;
  }

  public void unsetReference() {
    this.Reference = null;
  }

  /** Returns true if field Reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.Reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.Reference = null;
    }
  }

  public int getPositionsSize() {
    return (this.Positions == null) ? 0 : this.Positions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MPositionConstraint> getPositionsIterator() {
    return (this.Positions == null) ? null : this.Positions.iterator();
  }

  public void addToPositions(MPositionConstraint elem) {
    if (this.Positions == null) {
      this.Positions = new java.util.ArrayList<MPositionConstraint>();
    }
    this.Positions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MPositionConstraint> getPositions() {
    return this.Positions;
  }

  public MTrajectoryConstraint setPositions(@org.apache.thrift.annotation.Nullable java.util.List<MPositionConstraint> Positions) {
    this.Positions = Positions;
    return this;
  }

  public void unsetPositions() {
    this.Positions = null;
  }

  /** Returns true if field Positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.Positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.Positions = null;
    }
  }

  public int getRotationsSize() {
    return (this.Rotations == null) ? 0 : this.Rotations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MRotationConstraint> getRotationsIterator() {
    return (this.Rotations == null) ? null : this.Rotations.iterator();
  }

  public void addToRotations(MRotationConstraint elem) {
    if (this.Rotations == null) {
      this.Rotations = new java.util.ArrayList<MRotationConstraint>();
    }
    this.Rotations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MRotationConstraint> getRotations() {
    return this.Rotations;
  }

  public MTrajectoryConstraint setRotations(@org.apache.thrift.annotation.Nullable java.util.List<MRotationConstraint> Rotations) {
    this.Rotations = Rotations;
    return this;
  }

  public void unsetRotations() {
    this.Rotations = null;
  }

  /** Returns true if field Rotations is set (has been assigned a value) and false otherwise */
  public boolean isSetRotations() {
    return this.Rotations != null;
  }

  public void setRotationsIsSet(boolean value) {
    if (!value) {
      this.Rotations = null;
    }
  }

  public int getTimesSize() {
    return (this.Times == null) ? 0 : this.Times.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getTimesIterator() {
    return (this.Times == null) ? null : this.Times.iterator();
  }

  public void addToTimes(double elem) {
    if (this.Times == null) {
      this.Times = new java.util.ArrayList<java.lang.Double>();
    }
    this.Times.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getTimes() {
    return this.Times;
  }

  public MTrajectoryConstraint setTimes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Times) {
    this.Times = Times;
    return this;
  }

  public void unsetTimes() {
    this.Times = null;
  }

  /** Returns true if field Times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return this.Times != null;
  }

  public void setTimesIsSet(boolean value) {
    if (!value) {
      this.Times = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((java.lang.String)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((java.util.List<MPositionConstraint>)value);
      }
      break;

    case ROTATIONS:
      if (value == null) {
        unsetRotations();
      } else {
        setRotations((java.util.List<MRotationConstraint>)value);
      }
      break;

    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REFERENCE:
      return getReference();

    case POSITIONS:
      return getPositions();

    case ROTATIONS:
      return getRotations();

    case TIMES:
      return getTimes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REFERENCE:
      return isSetReference();
    case POSITIONS:
      return isSetPositions();
    case ROTATIONS:
      return isSetRotations();
    case TIMES:
      return isSetTimes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MTrajectoryConstraint)
      return this.equals((MTrajectoryConstraint)that);
    return false;
  }

  public boolean equals(MTrajectoryConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Reference = true && this.isSetReference();
    boolean that_present_Reference = true && that.isSetReference();
    if (this_present_Reference || that_present_Reference) {
      if (!(this_present_Reference && that_present_Reference))
        return false;
      if (!this.Reference.equals(that.Reference))
        return false;
    }

    boolean this_present_Positions = true && this.isSetPositions();
    boolean that_present_Positions = true && that.isSetPositions();
    if (this_present_Positions || that_present_Positions) {
      if (!(this_present_Positions && that_present_Positions))
        return false;
      if (!this.Positions.equals(that.Positions))
        return false;
    }

    boolean this_present_Rotations = true && this.isSetRotations();
    boolean that_present_Rotations = true && that.isSetRotations();
    if (this_present_Rotations || that_present_Rotations) {
      if (!(this_present_Rotations && that_present_Rotations))
        return false;
      if (!this.Rotations.equals(that.Rotations))
        return false;
    }

    boolean this_present_Times = true && this.isSetTimes();
    boolean that_present_Times = true && that.isSetTimes();
    if (this_present_Times || that_present_Times) {
      if (!(this_present_Times && that_present_Times))
        return false;
      if (!this.Times.equals(that.Times))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReference()) ? 131071 : 524287);
    if (isSetReference())
      hashCode = hashCode * 8191 + Reference.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositions()) ? 131071 : 524287);
    if (isSetPositions())
      hashCode = hashCode * 8191 + Positions.hashCode();

    hashCode = hashCode * 8191 + ((isSetRotations()) ? 131071 : 524287);
    if (isSetRotations())
      hashCode = hashCode * 8191 + Rotations.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimes()) ? 131071 : 524287);
    if (isSetTimes())
      hashCode = hashCode * 8191 + Times.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MTrajectoryConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Reference, other.Reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Positions, other.Positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRotations()).compareTo(other.isSetRotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Rotations, other.Rotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Times, other.Times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MTrajectoryConstraint(");
    boolean first = true;

    sb.append("Reference:");
    if (this.Reference == null) {
      sb.append("null");
    } else {
      sb.append(this.Reference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Positions:");
    if (this.Positions == null) {
      sb.append("null");
    } else {
      sb.append(this.Positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Rotations:");
    if (this.Rotations == null) {
      sb.append("null");
    } else {
      sb.append(this.Rotations);
    }
    first = false;
    if (isSetTimes()) {
      if (!first) sb.append(", ");
      sb.append("Times:");
      if (this.Times == null) {
        sb.append("null");
      } else {
        sb.append(this.Times);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Reference == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Reference' was not present! Struct: " + toString());
    }
    if (Positions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Positions' was not present! Struct: " + toString());
    }
    if (Rotations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Rotations' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MTrajectoryConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MTrajectoryConstraintStandardScheme getScheme() {
      return new MTrajectoryConstraintStandardScheme();
    }
  }

  private static class MTrajectoryConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MTrajectoryConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MTrajectoryConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Reference = iprot.readString();
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.Positions = new java.util.ArrayList<MPositionConstraint>(_list142.size);
                @org.apache.thrift.annotation.Nullable MPositionConstraint _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = new MPositionConstraint();
                  _elem143.read(iprot);
                  struct.Positions.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list145 = iprot.readListBegin();
                struct.Rotations = new java.util.ArrayList<MRotationConstraint>(_list145.size);
                @org.apache.thrift.annotation.Nullable MRotationConstraint _elem146;
                for (int _i147 = 0; _i147 < _list145.size; ++_i147)
                {
                  _elem146 = new MRotationConstraint();
                  _elem146.read(iprot);
                  struct.Rotations.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setRotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                struct.Times = new java.util.ArrayList<java.lang.Double>(_list148.size);
                double _elem149;
                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                {
                  _elem149 = iprot.readDouble();
                  struct.Times.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MTrajectoryConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(struct.Reference);
        oprot.writeFieldEnd();
      }
      if (struct.Positions != null) {
        oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Positions.size()));
          for (MPositionConstraint _iter151 : struct.Positions)
          {
            _iter151.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Rotations != null) {
        oprot.writeFieldBegin(ROTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Rotations.size()));
          for (MRotationConstraint _iter152 : struct.Rotations)
          {
            _iter152.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Times != null) {
        if (struct.isSetTimes()) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Times.size()));
            for (double _iter153 : struct.Times)
            {
              oprot.writeDouble(_iter153);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MTrajectoryConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MTrajectoryConstraintTupleScheme getScheme() {
      return new MTrajectoryConstraintTupleScheme();
    }
  }

  private static class MTrajectoryConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MTrajectoryConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MTrajectoryConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.Reference);
      {
        oprot.writeI32(struct.Positions.size());
        for (MPositionConstraint _iter154 : struct.Positions)
        {
          _iter154.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.Rotations.size());
        for (MRotationConstraint _iter155 : struct.Rotations)
        {
          _iter155.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTimes()) {
        {
          oprot.writeI32(struct.Times.size());
          for (double _iter156 : struct.Times)
          {
            oprot.writeDouble(_iter156);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MTrajectoryConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Reference = iprot.readString();
      struct.setReferenceIsSet(true);
      {
        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.Positions = new java.util.ArrayList<MPositionConstraint>(_list157.size);
        @org.apache.thrift.annotation.Nullable MPositionConstraint _elem158;
        for (int _i159 = 0; _i159 < _list157.size; ++_i159)
        {
          _elem158 = new MPositionConstraint();
          _elem158.read(iprot);
          struct.Positions.add(_elem158);
        }
      }
      struct.setPositionsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list160 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.Rotations = new java.util.ArrayList<MRotationConstraint>(_list160.size);
        @org.apache.thrift.annotation.Nullable MRotationConstraint _elem161;
        for (int _i162 = 0; _i162 < _list160.size; ++_i162)
        {
          _elem161 = new MRotationConstraint();
          _elem161.read(iprot);
          struct.Rotations.add(_elem161);
        }
      }
      struct.setRotationsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.Times = new java.util.ArrayList<java.lang.Double>(_list163.size);
          double _elem164;
          for (int _i165 = 0; _i165 < _list163.size; ++_i165)
          {
            _elem164 = iprot.readDouble();
            struct.Times.add(_elem164);
          }
        }
        struct.setTimesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

