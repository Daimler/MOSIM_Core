/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MSkeletonAccess {

  public interface Iface {

    public void InitializeAnthropometry(MMIStandard.MAvatarDescription description) throws org.apache.thrift.TException;

    public MMIStandard.MAvatarDescription GetAvatarDescription(java.lang.String avatarID) throws org.apache.thrift.TException;

    public void SetAnimatedJoints(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints) throws org.apache.thrift.TException;

    public void SetChannelData(MMIStandard.MAvatarPostureValues values) throws org.apache.thrift.TException;

    public MMIStandard.MAvatarPosture GetCurrentPosture(java.lang.String avatarID) throws org.apache.thrift.TException;

    public MMIStandard.MAvatarPostureValues GetCurrentPostureValues(java.lang.String avatarID) throws org.apache.thrift.TException;

    public java.util.List<MMIStandard.MVector3> GetCurrentJointPositions(java.lang.String avatarID) throws org.apache.thrift.TException;

    public MMIStandard.MVector3 GetRootPosition(java.lang.String avatarID) throws org.apache.thrift.TException;

    public MMIStandard.MQuaternion GetRootRotation(java.lang.String avatarID) throws org.apache.thrift.TException;

    public MMIStandard.MVector3 GetGlobalJointPosition(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException;

    public MMIStandard.MQuaternion GetGlobalJointRotation(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void InitializeAnthropometry(MMIStandard.MAvatarDescription description, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void GetAvatarDescription(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription> resultHandler) throws org.apache.thrift.TException;

    public void SetAnimatedJoints(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void SetChannelData(MMIStandard.MAvatarPostureValues values, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void GetCurrentPosture(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException;

    public void GetCurrentPostureValues(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException;

    public void GetCurrentJointPositions(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>> resultHandler) throws org.apache.thrift.TException;

    public void GetRootPosition(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void GetRootRotation(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException;

    public void GetGlobalJointPosition(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void GetGlobalJointRotation(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void InitializeAnthropometry(MMIStandard.MAvatarDescription description) throws org.apache.thrift.TException
    {
      send_InitializeAnthropometry(description);
      recv_InitializeAnthropometry();
    }

    public void send_InitializeAnthropometry(MMIStandard.MAvatarDescription description) throws org.apache.thrift.TException
    {
      InitializeAnthropometry_args args = new InitializeAnthropometry_args();
      args.setDescription(description);
      sendBase("InitializeAnthropometry", args);
    }

    public void recv_InitializeAnthropometry() throws org.apache.thrift.TException
    {
      InitializeAnthropometry_result result = new InitializeAnthropometry_result();
      receiveBase(result, "InitializeAnthropometry");
      return;
    }

    public MMIStandard.MAvatarDescription GetAvatarDescription(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetAvatarDescription(avatarID);
      return recv_GetAvatarDescription();
    }

    public void send_GetAvatarDescription(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetAvatarDescription_args args = new GetAvatarDescription_args();
      args.setAvatarID(avatarID);
      sendBase("GetAvatarDescription", args);
    }

    public MMIStandard.MAvatarDescription recv_GetAvatarDescription() throws org.apache.thrift.TException
    {
      GetAvatarDescription_result result = new GetAvatarDescription_result();
      receiveBase(result, "GetAvatarDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAvatarDescription failed: unknown result");
    }

    public void SetAnimatedJoints(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints) throws org.apache.thrift.TException
    {
      send_SetAnimatedJoints(avatarID, joints);
      recv_SetAnimatedJoints();
    }

    public void send_SetAnimatedJoints(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints) throws org.apache.thrift.TException
    {
      SetAnimatedJoints_args args = new SetAnimatedJoints_args();
      args.setAvatarID(avatarID);
      args.setJoints(joints);
      sendBase("SetAnimatedJoints", args);
    }

    public void recv_SetAnimatedJoints() throws org.apache.thrift.TException
    {
      SetAnimatedJoints_result result = new SetAnimatedJoints_result();
      receiveBase(result, "SetAnimatedJoints");
      return;
    }

    public void SetChannelData(MMIStandard.MAvatarPostureValues values) throws org.apache.thrift.TException
    {
      send_SetChannelData(values);
      recv_SetChannelData();
    }

    public void send_SetChannelData(MMIStandard.MAvatarPostureValues values) throws org.apache.thrift.TException
    {
      SetChannelData_args args = new SetChannelData_args();
      args.setValues(values);
      sendBase("SetChannelData", args);
    }

    public void recv_SetChannelData() throws org.apache.thrift.TException
    {
      SetChannelData_result result = new SetChannelData_result();
      receiveBase(result, "SetChannelData");
      return;
    }

    public MMIStandard.MAvatarPosture GetCurrentPosture(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetCurrentPosture(avatarID);
      return recv_GetCurrentPosture();
    }

    public void send_GetCurrentPosture(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetCurrentPosture_args args = new GetCurrentPosture_args();
      args.setAvatarID(avatarID);
      sendBase("GetCurrentPosture", args);
    }

    public MMIStandard.MAvatarPosture recv_GetCurrentPosture() throws org.apache.thrift.TException
    {
      GetCurrentPosture_result result = new GetCurrentPosture_result();
      receiveBase(result, "GetCurrentPosture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetCurrentPosture failed: unknown result");
    }

    public MMIStandard.MAvatarPostureValues GetCurrentPostureValues(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetCurrentPostureValues(avatarID);
      return recv_GetCurrentPostureValues();
    }

    public void send_GetCurrentPostureValues(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetCurrentPostureValues_args args = new GetCurrentPostureValues_args();
      args.setAvatarID(avatarID);
      sendBase("GetCurrentPostureValues", args);
    }

    public MMIStandard.MAvatarPostureValues recv_GetCurrentPostureValues() throws org.apache.thrift.TException
    {
      GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
      receiveBase(result, "GetCurrentPostureValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetCurrentPostureValues failed: unknown result");
    }

    public java.util.List<MMIStandard.MVector3> GetCurrentJointPositions(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetCurrentJointPositions(avatarID);
      return recv_GetCurrentJointPositions();
    }

    public void send_GetCurrentJointPositions(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetCurrentJointPositions_args args = new GetCurrentJointPositions_args();
      args.setAvatarID(avatarID);
      sendBase("GetCurrentJointPositions", args);
    }

    public java.util.List<MMIStandard.MVector3> recv_GetCurrentJointPositions() throws org.apache.thrift.TException
    {
      GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
      receiveBase(result, "GetCurrentJointPositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetCurrentJointPositions failed: unknown result");
    }

    public MMIStandard.MVector3 GetRootPosition(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetRootPosition(avatarID);
      return recv_GetRootPosition();
    }

    public void send_GetRootPosition(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetRootPosition_args args = new GetRootPosition_args();
      args.setAvatarID(avatarID);
      sendBase("GetRootPosition", args);
    }

    public MMIStandard.MVector3 recv_GetRootPosition() throws org.apache.thrift.TException
    {
      GetRootPosition_result result = new GetRootPosition_result();
      receiveBase(result, "GetRootPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetRootPosition failed: unknown result");
    }

    public MMIStandard.MQuaternion GetRootRotation(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_GetRootRotation(avatarID);
      return recv_GetRootRotation();
    }

    public void send_GetRootRotation(java.lang.String avatarID) throws org.apache.thrift.TException
    {
      GetRootRotation_args args = new GetRootRotation_args();
      args.setAvatarID(avatarID);
      sendBase("GetRootRotation", args);
    }

    public MMIStandard.MQuaternion recv_GetRootRotation() throws org.apache.thrift.TException
    {
      GetRootRotation_result result = new GetRootRotation_result();
      receiveBase(result, "GetRootRotation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetRootRotation failed: unknown result");
    }

    public MMIStandard.MVector3 GetGlobalJointPosition(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException
    {
      send_GetGlobalJointPosition(avatarId, boneType);
      return recv_GetGlobalJointPosition();
    }

    public void send_GetGlobalJointPosition(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException
    {
      GetGlobalJointPosition_args args = new GetGlobalJointPosition_args();
      args.setAvatarId(avatarId);
      args.setBoneType(boneType);
      sendBase("GetGlobalJointPosition", args);
    }

    public MMIStandard.MVector3 recv_GetGlobalJointPosition() throws org.apache.thrift.TException
    {
      GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
      receiveBase(result, "GetGlobalJointPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetGlobalJointPosition failed: unknown result");
    }

    public MMIStandard.MQuaternion GetGlobalJointRotation(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException
    {
      send_GetGlobalJointRotation(avatarId, boneType);
      return recv_GetGlobalJointRotation();
    }

    public void send_GetGlobalJointRotation(java.lang.String avatarId, MMIStandard.MJointType boneType) throws org.apache.thrift.TException
    {
      GetGlobalJointRotation_args args = new GetGlobalJointRotation_args();
      args.setAvatarId(avatarId);
      args.setBoneType(boneType);
      sendBase("GetGlobalJointRotation", args);
    }

    public MMIStandard.MQuaternion recv_GetGlobalJointRotation() throws org.apache.thrift.TException
    {
      GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
      receiveBase(result, "GetGlobalJointRotation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetGlobalJointRotation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void InitializeAnthropometry(MMIStandard.MAvatarDescription description, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      InitializeAnthropometry_call method_call = new InitializeAnthropometry_call(description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class InitializeAnthropometry_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private MMIStandard.MAvatarDescription description;
      public InitializeAnthropometry_call(MMIStandard.MAvatarDescription description, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InitializeAnthropometry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        InitializeAnthropometry_args args = new InitializeAnthropometry_args();
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void GetAvatarDescription(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAvatarDescription_call method_call = new GetAvatarDescription_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAvatarDescription_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MAvatarDescription> {
      private java.lang.String avatarID;
      public GetAvatarDescription_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAvatarDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAvatarDescription_args args = new GetAvatarDescription_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MAvatarDescription getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAvatarDescription();
      }
    }

    public void SetAnimatedJoints(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetAnimatedJoints_call method_call = new SetAnimatedJoints_call(avatarID, joints, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetAnimatedJoints_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String avatarID;
      private java.util.List<MMIStandard.MJointType> joints;
      public SetAnimatedJoints_call(java.lang.String avatarID, java.util.List<MMIStandard.MJointType> joints, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
        this.joints = joints;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetAnimatedJoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetAnimatedJoints_args args = new SetAnimatedJoints_args();
        args.setAvatarID(avatarID);
        args.setJoints(joints);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void SetChannelData(MMIStandard.MAvatarPostureValues values, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetChannelData_call method_call = new SetChannelData_call(values, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetChannelData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private MMIStandard.MAvatarPostureValues values;
      public SetChannelData_call(MMIStandard.MAvatarPostureValues values, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.values = values;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetChannelData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetChannelData_args args = new SetChannelData_args();
        args.setValues(values);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void GetCurrentPosture(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetCurrentPosture_call method_call = new GetCurrentPosture_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetCurrentPosture_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MAvatarPosture> {
      private java.lang.String avatarID;
      public GetCurrentPosture_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCurrentPosture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetCurrentPosture_args args = new GetCurrentPosture_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MAvatarPosture getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetCurrentPosture();
      }
    }

    public void GetCurrentPostureValues(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetCurrentPostureValues_call method_call = new GetCurrentPostureValues_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetCurrentPostureValues_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MAvatarPostureValues> {
      private java.lang.String avatarID;
      public GetCurrentPostureValues_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCurrentPostureValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetCurrentPostureValues_args args = new GetCurrentPostureValues_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MAvatarPostureValues getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetCurrentPostureValues();
      }
    }

    public void GetCurrentJointPositions(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetCurrentJointPositions_call method_call = new GetCurrentJointPositions_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetCurrentJointPositions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MMIStandard.MVector3>> {
      private java.lang.String avatarID;
      public GetCurrentJointPositions_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCurrentJointPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetCurrentJointPositions_args args = new GetCurrentJointPositions_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MMIStandard.MVector3> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetCurrentJointPositions();
      }
    }

    public void GetRootPosition(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetRootPosition_call method_call = new GetRootPosition_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetRootPosition_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MVector3> {
      private java.lang.String avatarID;
      public GetRootPosition_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetRootPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetRootPosition_args args = new GetRootPosition_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetRootPosition();
      }
    }

    public void GetRootRotation(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetRootRotation_call method_call = new GetRootRotation_call(avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetRootRotation_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MQuaternion> {
      private java.lang.String avatarID;
      public GetRootRotation_call(java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetRootRotation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetRootRotation_args args = new GetRootRotation_args();
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetRootRotation();
      }
    }

    public void GetGlobalJointPosition(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetGlobalJointPosition_call method_call = new GetGlobalJointPosition_call(avatarId, boneType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetGlobalJointPosition_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MVector3> {
      private java.lang.String avatarId;
      private MMIStandard.MJointType boneType;
      public GetGlobalJointPosition_call(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarId = avatarId;
        this.boneType = boneType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetGlobalJointPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetGlobalJointPosition_args args = new GetGlobalJointPosition_args();
        args.setAvatarId(avatarId);
        args.setBoneType(boneType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetGlobalJointPosition();
      }
    }

    public void GetGlobalJointRotation(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetGlobalJointRotation_call method_call = new GetGlobalJointRotation_call(avatarId, boneType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetGlobalJointRotation_call extends org.apache.thrift.async.TAsyncMethodCall<MMIStandard.MQuaternion> {
      private java.lang.String avatarId;
      private MMIStandard.MJointType boneType;
      public GetGlobalJointRotation_call(java.lang.String avatarId, MMIStandard.MJointType boneType, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarId = avatarId;
        this.boneType = boneType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetGlobalJointRotation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetGlobalJointRotation_args args = new GetGlobalJointRotation_args();
        args.setAvatarId(avatarId);
        args.setBoneType(boneType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MMIStandard.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetGlobalJointRotation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("InitializeAnthropometry", new InitializeAnthropometry());
      processMap.put("GetAvatarDescription", new GetAvatarDescription());
      processMap.put("SetAnimatedJoints", new SetAnimatedJoints());
      processMap.put("SetChannelData", new SetChannelData());
      processMap.put("GetCurrentPosture", new GetCurrentPosture());
      processMap.put("GetCurrentPostureValues", new GetCurrentPostureValues());
      processMap.put("GetCurrentJointPositions", new GetCurrentJointPositions());
      processMap.put("GetRootPosition", new GetRootPosition());
      processMap.put("GetRootRotation", new GetRootRotation());
      processMap.put("GetGlobalJointPosition", new GetGlobalJointPosition());
      processMap.put("GetGlobalJointRotation", new GetGlobalJointRotation());
      return processMap;
    }

    public static class InitializeAnthropometry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InitializeAnthropometry_args> {
      public InitializeAnthropometry() {
        super("InitializeAnthropometry");
      }

      public InitializeAnthropometry_args getEmptyArgsInstance() {
        return new InitializeAnthropometry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public InitializeAnthropometry_result getResult(I iface, InitializeAnthropometry_args args) throws org.apache.thrift.TException {
        InitializeAnthropometry_result result = new InitializeAnthropometry_result();
        iface.InitializeAnthropometry(args.description);
        return result;
      }
    }

    public static class GetAvatarDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAvatarDescription_args> {
      public GetAvatarDescription() {
        super("GetAvatarDescription");
      }

      public GetAvatarDescription_args getEmptyArgsInstance() {
        return new GetAvatarDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetAvatarDescription_result getResult(I iface, GetAvatarDescription_args args) throws org.apache.thrift.TException {
        GetAvatarDescription_result result = new GetAvatarDescription_result();
        result.success = iface.GetAvatarDescription(args.avatarID);
        return result;
      }
    }

    public static class SetAnimatedJoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetAnimatedJoints_args> {
      public SetAnimatedJoints() {
        super("SetAnimatedJoints");
      }

      public SetAnimatedJoints_args getEmptyArgsInstance() {
        return new SetAnimatedJoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public SetAnimatedJoints_result getResult(I iface, SetAnimatedJoints_args args) throws org.apache.thrift.TException {
        SetAnimatedJoints_result result = new SetAnimatedJoints_result();
        iface.SetAnimatedJoints(args.avatarID, args.joints);
        return result;
      }
    }

    public static class SetChannelData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetChannelData_args> {
      public SetChannelData() {
        super("SetChannelData");
      }

      public SetChannelData_args getEmptyArgsInstance() {
        return new SetChannelData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public SetChannelData_result getResult(I iface, SetChannelData_args args) throws org.apache.thrift.TException {
        SetChannelData_result result = new SetChannelData_result();
        iface.SetChannelData(args.values);
        return result;
      }
    }

    public static class GetCurrentPosture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetCurrentPosture_args> {
      public GetCurrentPosture() {
        super("GetCurrentPosture");
      }

      public GetCurrentPosture_args getEmptyArgsInstance() {
        return new GetCurrentPosture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetCurrentPosture_result getResult(I iface, GetCurrentPosture_args args) throws org.apache.thrift.TException {
        GetCurrentPosture_result result = new GetCurrentPosture_result();
        result.success = iface.GetCurrentPosture(args.avatarID);
        return result;
      }
    }

    public static class GetCurrentPostureValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetCurrentPostureValues_args> {
      public GetCurrentPostureValues() {
        super("GetCurrentPostureValues");
      }

      public GetCurrentPostureValues_args getEmptyArgsInstance() {
        return new GetCurrentPostureValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetCurrentPostureValues_result getResult(I iface, GetCurrentPostureValues_args args) throws org.apache.thrift.TException {
        GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
        result.success = iface.GetCurrentPostureValues(args.avatarID);
        return result;
      }
    }

    public static class GetCurrentJointPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetCurrentJointPositions_args> {
      public GetCurrentJointPositions() {
        super("GetCurrentJointPositions");
      }

      public GetCurrentJointPositions_args getEmptyArgsInstance() {
        return new GetCurrentJointPositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetCurrentJointPositions_result getResult(I iface, GetCurrentJointPositions_args args) throws org.apache.thrift.TException {
        GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
        result.success = iface.GetCurrentJointPositions(args.avatarID);
        return result;
      }
    }

    public static class GetRootPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetRootPosition_args> {
      public GetRootPosition() {
        super("GetRootPosition");
      }

      public GetRootPosition_args getEmptyArgsInstance() {
        return new GetRootPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetRootPosition_result getResult(I iface, GetRootPosition_args args) throws org.apache.thrift.TException {
        GetRootPosition_result result = new GetRootPosition_result();
        result.success = iface.GetRootPosition(args.avatarID);
        return result;
      }
    }

    public static class GetRootRotation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetRootRotation_args> {
      public GetRootRotation() {
        super("GetRootRotation");
      }

      public GetRootRotation_args getEmptyArgsInstance() {
        return new GetRootRotation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetRootRotation_result getResult(I iface, GetRootRotation_args args) throws org.apache.thrift.TException {
        GetRootRotation_result result = new GetRootRotation_result();
        result.success = iface.GetRootRotation(args.avatarID);
        return result;
      }
    }

    public static class GetGlobalJointPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetGlobalJointPosition_args> {
      public GetGlobalJointPosition() {
        super("GetGlobalJointPosition");
      }

      public GetGlobalJointPosition_args getEmptyArgsInstance() {
        return new GetGlobalJointPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetGlobalJointPosition_result getResult(I iface, GetGlobalJointPosition_args args) throws org.apache.thrift.TException {
        GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
        result.success = iface.GetGlobalJointPosition(args.avatarId, args.boneType);
        return result;
      }
    }

    public static class GetGlobalJointRotation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetGlobalJointRotation_args> {
      public GetGlobalJointRotation() {
        super("GetGlobalJointRotation");
      }

      public GetGlobalJointRotation_args getEmptyArgsInstance() {
        return new GetGlobalJointRotation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetGlobalJointRotation_result getResult(I iface, GetGlobalJointRotation_args args) throws org.apache.thrift.TException {
        GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
        result.success = iface.GetGlobalJointRotation(args.avatarId, args.boneType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("InitializeAnthropometry", new InitializeAnthropometry());
      processMap.put("GetAvatarDescription", new GetAvatarDescription());
      processMap.put("SetAnimatedJoints", new SetAnimatedJoints());
      processMap.put("SetChannelData", new SetChannelData());
      processMap.put("GetCurrentPosture", new GetCurrentPosture());
      processMap.put("GetCurrentPostureValues", new GetCurrentPostureValues());
      processMap.put("GetCurrentJointPositions", new GetCurrentJointPositions());
      processMap.put("GetRootPosition", new GetRootPosition());
      processMap.put("GetRootRotation", new GetRootRotation());
      processMap.put("GetGlobalJointPosition", new GetGlobalJointPosition());
      processMap.put("GetGlobalJointRotation", new GetGlobalJointRotation());
      return processMap;
    }

    public static class InitializeAnthropometry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, InitializeAnthropometry_args, Void> {
      public InitializeAnthropometry() {
        super("InitializeAnthropometry");
      }

      public InitializeAnthropometry_args getEmptyArgsInstance() {
        return new InitializeAnthropometry_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            InitializeAnthropometry_result result = new InitializeAnthropometry_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            InitializeAnthropometry_result result = new InitializeAnthropometry_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, InitializeAnthropometry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.InitializeAnthropometry(args.description,resultHandler);
      }
    }

    public static class GetAvatarDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAvatarDescription_args, MMIStandard.MAvatarDescription> {
      public GetAvatarDescription() {
        super("GetAvatarDescription");
      }

      public GetAvatarDescription_args getEmptyArgsInstance() {
        return new GetAvatarDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription>() { 
          public void onComplete(MMIStandard.MAvatarDescription o) {
            GetAvatarDescription_result result = new GetAvatarDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetAvatarDescription_result result = new GetAvatarDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAvatarDescription_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarDescription> resultHandler) throws org.apache.thrift.TException {
        iface.GetAvatarDescription(args.avatarID,resultHandler);
      }
    }

    public static class SetAnimatedJoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetAnimatedJoints_args, Void> {
      public SetAnimatedJoints() {
        super("SetAnimatedJoints");
      }

      public SetAnimatedJoints_args getEmptyArgsInstance() {
        return new SetAnimatedJoints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetAnimatedJoints_result result = new SetAnimatedJoints_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SetAnimatedJoints_result result = new SetAnimatedJoints_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetAnimatedJoints_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.SetAnimatedJoints(args.avatarID, args.joints,resultHandler);
      }
    }

    public static class SetChannelData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetChannelData_args, Void> {
      public SetChannelData() {
        super("SetChannelData");
      }

      public SetChannelData_args getEmptyArgsInstance() {
        return new SetChannelData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetChannelData_result result = new SetChannelData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SetChannelData_result result = new SetChannelData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetChannelData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.SetChannelData(args.values,resultHandler);
      }
    }

    public static class GetCurrentPosture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetCurrentPosture_args, MMIStandard.MAvatarPosture> {
      public GetCurrentPosture() {
        super("GetCurrentPosture");
      }

      public GetCurrentPosture_args getEmptyArgsInstance() {
        return new GetCurrentPosture_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture>() { 
          public void onComplete(MMIStandard.MAvatarPosture o) {
            GetCurrentPosture_result result = new GetCurrentPosture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetCurrentPosture_result result = new GetCurrentPosture_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetCurrentPosture_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPosture> resultHandler) throws org.apache.thrift.TException {
        iface.GetCurrentPosture(args.avatarID,resultHandler);
      }
    }

    public static class GetCurrentPostureValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetCurrentPostureValues_args, MMIStandard.MAvatarPostureValues> {
      public GetCurrentPostureValues() {
        super("GetCurrentPostureValues");
      }

      public GetCurrentPostureValues_args getEmptyArgsInstance() {
        return new GetCurrentPostureValues_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues>() { 
          public void onComplete(MMIStandard.MAvatarPostureValues o) {
            GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetCurrentPostureValues_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
        iface.GetCurrentPostureValues(args.avatarID,resultHandler);
      }
    }

    public static class GetCurrentJointPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetCurrentJointPositions_args, java.util.List<MMIStandard.MVector3>> {
      public GetCurrentJointPositions() {
        super("GetCurrentJointPositions");
      }

      public GetCurrentJointPositions_args getEmptyArgsInstance() {
        return new GetCurrentJointPositions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>>() { 
          public void onComplete(java.util.List<MMIStandard.MVector3> o) {
            GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetCurrentJointPositions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MMIStandard.MVector3>> resultHandler) throws org.apache.thrift.TException {
        iface.GetCurrentJointPositions(args.avatarID,resultHandler);
      }
    }

    public static class GetRootPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetRootPosition_args, MMIStandard.MVector3> {
      public GetRootPosition() {
        super("GetRootPosition");
      }

      public GetRootPosition_args getEmptyArgsInstance() {
        return new GetRootPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3>() { 
          public void onComplete(MMIStandard.MVector3 o) {
            GetRootPosition_result result = new GetRootPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetRootPosition_result result = new GetRootPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetRootPosition_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.GetRootPosition(args.avatarID,resultHandler);
      }
    }

    public static class GetRootRotation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetRootRotation_args, MMIStandard.MQuaternion> {
      public GetRootRotation() {
        super("GetRootRotation");
      }

      public GetRootRotation_args getEmptyArgsInstance() {
        return new GetRootRotation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion>() { 
          public void onComplete(MMIStandard.MQuaternion o) {
            GetRootRotation_result result = new GetRootRotation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetRootRotation_result result = new GetRootRotation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetRootRotation_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.GetRootRotation(args.avatarID,resultHandler);
      }
    }

    public static class GetGlobalJointPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetGlobalJointPosition_args, MMIStandard.MVector3> {
      public GetGlobalJointPosition() {
        super("GetGlobalJointPosition");
      }

      public GetGlobalJointPosition_args getEmptyArgsInstance() {
        return new GetGlobalJointPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3>() { 
          public void onComplete(MMIStandard.MVector3 o) {
            GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetGlobalJointPosition_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.GetGlobalJointPosition(args.avatarId, args.boneType,resultHandler);
      }
    }

    public static class GetGlobalJointRotation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetGlobalJointRotation_args, MMIStandard.MQuaternion> {
      public GetGlobalJointRotation() {
        super("GetGlobalJointRotation");
      }

      public GetGlobalJointRotation_args getEmptyArgsInstance() {
        return new GetGlobalJointRotation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion>() { 
          public void onComplete(MMIStandard.MQuaternion o) {
            GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetGlobalJointRotation_args args, org.apache.thrift.async.AsyncMethodCallback<MMIStandard.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.GetGlobalJointRotation(args.avatarId, args.boneType,resultHandler);
      }
    }

  }

  public static class InitializeAnthropometry_args implements org.apache.thrift.TBase<InitializeAnthropometry_args, InitializeAnthropometry_args._Fields>, java.io.Serializable, Cloneable, Comparable<InitializeAnthropometry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitializeAnthropometry_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InitializeAnthropometry_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InitializeAnthropometry_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarDescription description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarDescription.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitializeAnthropometry_args.class, metaDataMap);
    }

    public InitializeAnthropometry_args() {
    }

    public InitializeAnthropometry_args(
      MMIStandard.MAvatarDescription description)
    {
      this();
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InitializeAnthropometry_args(InitializeAnthropometry_args other) {
      if (other.isSetDescription()) {
        this.description = new MMIStandard.MAvatarDescription(other.description);
      }
    }

    public InitializeAnthropometry_args deepCopy() {
      return new InitializeAnthropometry_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarDescription getDescription() {
      return this.description;
    }

    public InitializeAnthropometry_args setDescription(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarDescription description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((MMIStandard.MAvatarDescription)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof InitializeAnthropometry_args)
        return this.equals((InitializeAnthropometry_args)that);
      return false;
    }

    public boolean equals(InitializeAnthropometry_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(InitializeAnthropometry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("InitializeAnthropometry_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (description != null) {
        description.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InitializeAnthropometry_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public InitializeAnthropometry_argsStandardScheme getScheme() {
        return new InitializeAnthropometry_argsStandardScheme();
      }
    }

    private static class InitializeAnthropometry_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<InitializeAnthropometry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InitializeAnthropometry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.description = new MMIStandard.MAvatarDescription();
                struct.description.read(iprot);
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InitializeAnthropometry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          struct.description.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InitializeAnthropometry_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public InitializeAnthropometry_argsTupleScheme getScheme() {
        return new InitializeAnthropometry_argsTupleScheme();
      }
    }

    private static class InitializeAnthropometry_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<InitializeAnthropometry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InitializeAnthropometry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDescription()) {
          struct.description.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InitializeAnthropometry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.description = new MMIStandard.MAvatarDescription();
          struct.description.read(iprot);
          struct.setDescriptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class InitializeAnthropometry_result implements org.apache.thrift.TBase<InitializeAnthropometry_result, InitializeAnthropometry_result._Fields>, java.io.Serializable, Cloneable, Comparable<InitializeAnthropometry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitializeAnthropometry_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InitializeAnthropometry_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InitializeAnthropometry_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitializeAnthropometry_result.class, metaDataMap);
    }

    public InitializeAnthropometry_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InitializeAnthropometry_result(InitializeAnthropometry_result other) {
    }

    public InitializeAnthropometry_result deepCopy() {
      return new InitializeAnthropometry_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof InitializeAnthropometry_result)
        return this.equals((InitializeAnthropometry_result)that);
      return false;
    }

    public boolean equals(InitializeAnthropometry_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(InitializeAnthropometry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("InitializeAnthropometry_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InitializeAnthropometry_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public InitializeAnthropometry_resultStandardScheme getScheme() {
        return new InitializeAnthropometry_resultStandardScheme();
      }
    }

    private static class InitializeAnthropometry_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<InitializeAnthropometry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InitializeAnthropometry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InitializeAnthropometry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InitializeAnthropometry_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public InitializeAnthropometry_resultTupleScheme getScheme() {
        return new InitializeAnthropometry_resultTupleScheme();
      }
    }

    private static class InitializeAnthropometry_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<InitializeAnthropometry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InitializeAnthropometry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InitializeAnthropometry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAvatarDescription_args implements org.apache.thrift.TBase<GetAvatarDescription_args, GetAvatarDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAvatarDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAvatarDescription_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAvatarDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAvatarDescription_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAvatarDescription_args.class, metaDataMap);
    }

    public GetAvatarDescription_args() {
    }

    public GetAvatarDescription_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAvatarDescription_args(GetAvatarDescription_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetAvatarDescription_args deepCopy() {
      return new GetAvatarDescription_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetAvatarDescription_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAvatarDescription_args)
        return this.equals((GetAvatarDescription_args)that);
      return false;
    }

    public boolean equals(GetAvatarDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetAvatarDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAvatarDescription_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAvatarDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAvatarDescription_argsStandardScheme getScheme() {
        return new GetAvatarDescription_argsStandardScheme();
      }
    }

    private static class GetAvatarDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAvatarDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAvatarDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAvatarDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAvatarDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAvatarDescription_argsTupleScheme getScheme() {
        return new GetAvatarDescription_argsTupleScheme();
      }
    }

    private static class GetAvatarDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAvatarDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAvatarDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAvatarDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAvatarDescription_result implements org.apache.thrift.TBase<GetAvatarDescription_result, GetAvatarDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAvatarDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAvatarDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAvatarDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAvatarDescription_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarDescription success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarDescription.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAvatarDescription_result.class, metaDataMap);
    }

    public GetAvatarDescription_result() {
    }

    public GetAvatarDescription_result(
      MMIStandard.MAvatarDescription success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAvatarDescription_result(GetAvatarDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MAvatarDescription(other.success);
      }
    }

    public GetAvatarDescription_result deepCopy() {
      return new GetAvatarDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarDescription getSuccess() {
      return this.success;
    }

    public GetAvatarDescription_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MAvatarDescription)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAvatarDescription_result)
        return this.equals((GetAvatarDescription_result)that);
      return false;
    }

    public boolean equals(GetAvatarDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetAvatarDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAvatarDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAvatarDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAvatarDescription_resultStandardScheme getScheme() {
        return new GetAvatarDescription_resultStandardScheme();
      }
    }

    private static class GetAvatarDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAvatarDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAvatarDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MAvatarDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAvatarDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAvatarDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAvatarDescription_resultTupleScheme getScheme() {
        return new GetAvatarDescription_resultTupleScheme();
      }
    }

    private static class GetAvatarDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAvatarDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAvatarDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAvatarDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MAvatarDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SetAnimatedJoints_args implements org.apache.thrift.TBase<SetAnimatedJoints_args, SetAnimatedJoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetAnimatedJoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetAnimatedJoints_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("joints", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetAnimatedJoints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetAnimatedJoints_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MJointType> joints; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID"),
      JOINTS((short)2, "joints");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          case 2: // JOINTS
            return JOINTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOINTS, new org.apache.thrift.meta_data.FieldMetaData("joints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MJointType.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetAnimatedJoints_args.class, metaDataMap);
    }

    public SetAnimatedJoints_args() {
    }

    public SetAnimatedJoints_args(
      java.lang.String avatarID,
      java.util.List<MMIStandard.MJointType> joints)
    {
      this();
      this.avatarID = avatarID;
      this.joints = joints;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetAnimatedJoints_args(SetAnimatedJoints_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
      if (other.isSetJoints()) {
        java.util.List<MMIStandard.MJointType> __this__joints = new java.util.ArrayList<MMIStandard.MJointType>(other.joints.size());
        for (MMIStandard.MJointType other_element : other.joints) {
          __this__joints.add(other_element);
        }
        this.joints = __this__joints;
      }
    }

    public SetAnimatedJoints_args deepCopy() {
      return new SetAnimatedJoints_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
      this.joints = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public SetAnimatedJoints_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public int getJointsSize() {
      return (this.joints == null) ? 0 : this.joints.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MMIStandard.MJointType> getJointsIterator() {
      return (this.joints == null) ? null : this.joints.iterator();
    }

    public void addToJoints(MMIStandard.MJointType elem) {
      if (this.joints == null) {
        this.joints = new java.util.ArrayList<MMIStandard.MJointType>();
      }
      this.joints.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MMIStandard.MJointType> getJoints() {
      return this.joints;
    }

    public SetAnimatedJoints_args setJoints(@org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MJointType> joints) {
      this.joints = joints;
      return this;
    }

    public void unsetJoints() {
      this.joints = null;
    }

    /** Returns true if field joints is set (has been assigned a value) and false otherwise */
    public boolean isSetJoints() {
      return this.joints != null;
    }

    public void setJointsIsSet(boolean value) {
      if (!value) {
        this.joints = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      case JOINTS:
        if (value == null) {
          unsetJoints();
        } else {
          setJoints((java.util.List<MMIStandard.MJointType>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      case JOINTS:
        return getJoints();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      case JOINTS:
        return isSetJoints();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetAnimatedJoints_args)
        return this.equals((SetAnimatedJoints_args)that);
      return false;
    }

    public boolean equals(SetAnimatedJoints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      boolean this_present_joints = true && this.isSetJoints();
      boolean that_present_joints = true && that.isSetJoints();
      if (this_present_joints || that_present_joints) {
        if (!(this_present_joints && that_present_joints))
          return false;
        if (!this.joints.equals(that.joints))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      hashCode = hashCode * 8191 + ((isSetJoints()) ? 131071 : 524287);
      if (isSetJoints())
        hashCode = hashCode * 8191 + joints.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SetAnimatedJoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJoints()).compareTo(other.isSetJoints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJoints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joints, other.joints);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetAnimatedJoints_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("joints:");
      if (this.joints == null) {
        sb.append("null");
      } else {
        sb.append(this.joints);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetAnimatedJoints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetAnimatedJoints_argsStandardScheme getScheme() {
        return new SetAnimatedJoints_argsStandardScheme();
      }
    }

    private static class SetAnimatedJoints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetAnimatedJoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetAnimatedJoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.joints = new java.util.ArrayList<MMIStandard.MJointType>(_list178.size);
                  @org.apache.thrift.annotation.Nullable MMIStandard.MJointType _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    _elem179 = MMIStandard.MJointType.findByValue(iprot.readI32());
                    if (_elem179 != null)
                    {
                      struct.joints.add(_elem179);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setJointsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetAnimatedJoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        if (struct.joints != null) {
          oprot.writeFieldBegin(JOINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.joints.size()));
            for (MMIStandard.MJointType _iter181 : struct.joints)
            {
              oprot.writeI32(_iter181.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetAnimatedJoints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetAnimatedJoints_argsTupleScheme getScheme() {
        return new SetAnimatedJoints_argsTupleScheme();
      }
    }

    private static class SetAnimatedJoints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetAnimatedJoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetAnimatedJoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        if (struct.isSetJoints()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
        if (struct.isSetJoints()) {
          {
            oprot.writeI32(struct.joints.size());
            for (MMIStandard.MJointType _iter182 : struct.joints)
            {
              oprot.writeI32(_iter182.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetAnimatedJoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.joints = new java.util.ArrayList<MMIStandard.MJointType>(_list183.size);
            @org.apache.thrift.annotation.Nullable MMIStandard.MJointType _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = MMIStandard.MJointType.findByValue(iprot.readI32());
              if (_elem184 != null)
              {
                struct.joints.add(_elem184);
              }
            }
          }
          struct.setJointsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SetAnimatedJoints_result implements org.apache.thrift.TBase<SetAnimatedJoints_result, SetAnimatedJoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetAnimatedJoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetAnimatedJoints_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetAnimatedJoints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetAnimatedJoints_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetAnimatedJoints_result.class, metaDataMap);
    }

    public SetAnimatedJoints_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetAnimatedJoints_result(SetAnimatedJoints_result other) {
    }

    public SetAnimatedJoints_result deepCopy() {
      return new SetAnimatedJoints_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetAnimatedJoints_result)
        return this.equals((SetAnimatedJoints_result)that);
      return false;
    }

    public boolean equals(SetAnimatedJoints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(SetAnimatedJoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetAnimatedJoints_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetAnimatedJoints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetAnimatedJoints_resultStandardScheme getScheme() {
        return new SetAnimatedJoints_resultStandardScheme();
      }
    }

    private static class SetAnimatedJoints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetAnimatedJoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetAnimatedJoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetAnimatedJoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetAnimatedJoints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetAnimatedJoints_resultTupleScheme getScheme() {
        return new SetAnimatedJoints_resultTupleScheme();
      }
    }

    private static class SetAnimatedJoints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetAnimatedJoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetAnimatedJoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetAnimatedJoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SetChannelData_args implements org.apache.thrift.TBase<SetChannelData_args, SetChannelData_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetChannelData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetChannelData_args");

    private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetChannelData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetChannelData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues values; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALUES((short)1, "values");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALUES
            return VALUES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPostureValues.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChannelData_args.class, metaDataMap);
    }

    public SetChannelData_args() {
    }

    public SetChannelData_args(
      MMIStandard.MAvatarPostureValues values)
    {
      this();
      this.values = values;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetChannelData_args(SetChannelData_args other) {
      if (other.isSetValues()) {
        this.values = new MMIStandard.MAvatarPostureValues(other.values);
      }
    }

    public SetChannelData_args deepCopy() {
      return new SetChannelData_args(this);
    }

    @Override
    public void clear() {
      this.values = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPostureValues getValues() {
      return this.values;
    }

    public SetChannelData_args setValues(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues values) {
      this.values = values;
      return this;
    }

    public void unsetValues() {
      this.values = null;
    }

    /** Returns true if field values is set (has been assigned a value) and false otherwise */
    public boolean isSetValues() {
      return this.values != null;
    }

    public void setValuesIsSet(boolean value) {
      if (!value) {
        this.values = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VALUES:
        if (value == null) {
          unsetValues();
        } else {
          setValues((MMIStandard.MAvatarPostureValues)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VALUES:
        return getValues();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VALUES:
        return isSetValues();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetChannelData_args)
        return this.equals((SetChannelData_args)that);
      return false;
    }

    public boolean equals(SetChannelData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_values = true && this.isSetValues();
      boolean that_present_values = true && that.isSetValues();
      if (this_present_values || that_present_values) {
        if (!(this_present_values && that_present_values))
          return false;
        if (!this.values.equals(that.values))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
      if (isSetValues())
        hashCode = hashCode * 8191 + values.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SetChannelData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetChannelData_args(");
      boolean first = true;

      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (values != null) {
        values.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetChannelData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetChannelData_argsStandardScheme getScheme() {
        return new SetChannelData_argsStandardScheme();
      }
    }

    private static class SetChannelData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetChannelData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetChannelData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.values = new MMIStandard.MAvatarPostureValues();
                struct.values.read(iprot);
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetChannelData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.values != null) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          struct.values.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetChannelData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetChannelData_argsTupleScheme getScheme() {
        return new SetChannelData_argsTupleScheme();
      }
    }

    private static class SetChannelData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetChannelData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetChannelData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetValues()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValues()) {
          struct.values.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetChannelData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.values = new MMIStandard.MAvatarPostureValues();
          struct.values.read(iprot);
          struct.setValuesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SetChannelData_result implements org.apache.thrift.TBase<SetChannelData_result, SetChannelData_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetChannelData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetChannelData_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetChannelData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetChannelData_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChannelData_result.class, metaDataMap);
    }

    public SetChannelData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetChannelData_result(SetChannelData_result other) {
    }

    public SetChannelData_result deepCopy() {
      return new SetChannelData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetChannelData_result)
        return this.equals((SetChannelData_result)that);
      return false;
    }

    public boolean equals(SetChannelData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(SetChannelData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetChannelData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetChannelData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetChannelData_resultStandardScheme getScheme() {
        return new SetChannelData_resultStandardScheme();
      }
    }

    private static class SetChannelData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetChannelData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetChannelData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetChannelData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetChannelData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetChannelData_resultTupleScheme getScheme() {
        return new SetChannelData_resultTupleScheme();
      }
    }

    private static class SetChannelData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetChannelData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetChannelData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetChannelData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentPosture_args implements org.apache.thrift.TBase<GetCurrentPosture_args, GetCurrentPosture_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentPosture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentPosture_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentPosture_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentPosture_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentPosture_args.class, metaDataMap);
    }

    public GetCurrentPosture_args() {
    }

    public GetCurrentPosture_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentPosture_args(GetCurrentPosture_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetCurrentPosture_args deepCopy() {
      return new GetCurrentPosture_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetCurrentPosture_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentPosture_args)
        return this.equals((GetCurrentPosture_args)that);
      return false;
    }

    public boolean equals(GetCurrentPosture_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentPosture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentPosture_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentPosture_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPosture_argsStandardScheme getScheme() {
        return new GetCurrentPosture_argsStandardScheme();
      }
    }

    private static class GetCurrentPosture_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentPosture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentPosture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentPosture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentPosture_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPosture_argsTupleScheme getScheme() {
        return new GetCurrentPosture_argsTupleScheme();
      }
    }

    private static class GetCurrentPosture_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentPosture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentPosture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentPosture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentPosture_result implements org.apache.thrift.TBase<GetCurrentPosture_result, GetCurrentPosture_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentPosture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentPosture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentPosture_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentPosture_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPosture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentPosture_result.class, metaDataMap);
    }

    public GetCurrentPosture_result() {
    }

    public GetCurrentPosture_result(
      MMIStandard.MAvatarPosture success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentPosture_result(GetCurrentPosture_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MAvatarPosture(other.success);
      }
    }

    public GetCurrentPosture_result deepCopy() {
      return new GetCurrentPosture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPosture getSuccess() {
      return this.success;
    }

    public GetCurrentPosture_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPosture success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MAvatarPosture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentPosture_result)
        return this.equals((GetCurrentPosture_result)that);
      return false;
    }

    public boolean equals(GetCurrentPosture_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentPosture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentPosture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentPosture_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPosture_resultStandardScheme getScheme() {
        return new GetCurrentPosture_resultStandardScheme();
      }
    }

    private static class GetCurrentPosture_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentPosture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentPosture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MAvatarPosture();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentPosture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentPosture_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPosture_resultTupleScheme getScheme() {
        return new GetCurrentPosture_resultTupleScheme();
      }
    }

    private static class GetCurrentPosture_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentPosture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentPosture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentPosture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MAvatarPosture();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentPostureValues_args implements org.apache.thrift.TBase<GetCurrentPostureValues_args, GetCurrentPostureValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentPostureValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentPostureValues_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentPostureValues_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentPostureValues_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentPostureValues_args.class, metaDataMap);
    }

    public GetCurrentPostureValues_args() {
    }

    public GetCurrentPostureValues_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentPostureValues_args(GetCurrentPostureValues_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetCurrentPostureValues_args deepCopy() {
      return new GetCurrentPostureValues_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetCurrentPostureValues_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentPostureValues_args)
        return this.equals((GetCurrentPostureValues_args)that);
      return false;
    }

    public boolean equals(GetCurrentPostureValues_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentPostureValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentPostureValues_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentPostureValues_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPostureValues_argsStandardScheme getScheme() {
        return new GetCurrentPostureValues_argsStandardScheme();
      }
    }

    private static class GetCurrentPostureValues_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentPostureValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentPostureValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentPostureValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentPostureValues_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPostureValues_argsTupleScheme getScheme() {
        return new GetCurrentPostureValues_argsTupleScheme();
      }
    }

    private static class GetCurrentPostureValues_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentPostureValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentPostureValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentPostureValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentPostureValues_result implements org.apache.thrift.TBase<GetCurrentPostureValues_result, GetCurrentPostureValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentPostureValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentPostureValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentPostureValues_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentPostureValues_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MAvatarPostureValues.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentPostureValues_result.class, metaDataMap);
    }

    public GetCurrentPostureValues_result() {
    }

    public GetCurrentPostureValues_result(
      MMIStandard.MAvatarPostureValues success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentPostureValues_result(GetCurrentPostureValues_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MAvatarPostureValues(other.success);
      }
    }

    public GetCurrentPostureValues_result deepCopy() {
      return new GetCurrentPostureValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MAvatarPostureValues getSuccess() {
      return this.success;
    }

    public GetCurrentPostureValues_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MAvatarPostureValues success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MAvatarPostureValues)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentPostureValues_result)
        return this.equals((GetCurrentPostureValues_result)that);
      return false;
    }

    public boolean equals(GetCurrentPostureValues_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentPostureValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentPostureValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentPostureValues_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPostureValues_resultStandardScheme getScheme() {
        return new GetCurrentPostureValues_resultStandardScheme();
      }
    }

    private static class GetCurrentPostureValues_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentPostureValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentPostureValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MAvatarPostureValues();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentPostureValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentPostureValues_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentPostureValues_resultTupleScheme getScheme() {
        return new GetCurrentPostureValues_resultTupleScheme();
      }
    }

    private static class GetCurrentPostureValues_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentPostureValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentPostureValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentPostureValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MAvatarPostureValues();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentJointPositions_args implements org.apache.thrift.TBase<GetCurrentJointPositions_args, GetCurrentJointPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentJointPositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentJointPositions_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentJointPositions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentJointPositions_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentJointPositions_args.class, metaDataMap);
    }

    public GetCurrentJointPositions_args() {
    }

    public GetCurrentJointPositions_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentJointPositions_args(GetCurrentJointPositions_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetCurrentJointPositions_args deepCopy() {
      return new GetCurrentJointPositions_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetCurrentJointPositions_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentJointPositions_args)
        return this.equals((GetCurrentJointPositions_args)that);
      return false;
    }

    public boolean equals(GetCurrentJointPositions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentJointPositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentJointPositions_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentJointPositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentJointPositions_argsStandardScheme getScheme() {
        return new GetCurrentJointPositions_argsStandardScheme();
      }
    }

    private static class GetCurrentJointPositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentJointPositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentJointPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentJointPositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentJointPositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentJointPositions_argsTupleScheme getScheme() {
        return new GetCurrentJointPositions_argsTupleScheme();
      }
    }

    private static class GetCurrentJointPositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentJointPositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentJointPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentJointPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetCurrentJointPositions_result implements org.apache.thrift.TBase<GetCurrentJointPositions_result, GetCurrentJointPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentJointPositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentJointPositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetCurrentJointPositions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetCurrentJointPositions_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MVector3> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MVector3.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentJointPositions_result.class, metaDataMap);
    }

    public GetCurrentJointPositions_result() {
    }

    public GetCurrentJointPositions_result(
      java.util.List<MMIStandard.MVector3> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCurrentJointPositions_result(GetCurrentJointPositions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MMIStandard.MVector3> __this__success = new java.util.ArrayList<MMIStandard.MVector3>(other.success.size());
        for (MMIStandard.MVector3 other_element : other.success) {
          __this__success.add(new MMIStandard.MVector3(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetCurrentJointPositions_result deepCopy() {
      return new GetCurrentJointPositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MMIStandard.MVector3> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MMIStandard.MVector3 elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MMIStandard.MVector3>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MMIStandard.MVector3> getSuccess() {
      return this.success;
    }

    public GetCurrentJointPositions_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MVector3> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MMIStandard.MVector3>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCurrentJointPositions_result)
        return this.equals((GetCurrentJointPositions_result)that);
      return false;
    }

    public boolean equals(GetCurrentJointPositions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetCurrentJointPositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetCurrentJointPositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCurrentJointPositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentJointPositions_resultStandardScheme getScheme() {
        return new GetCurrentJointPositions_resultStandardScheme();
      }
    }

    private static class GetCurrentJointPositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetCurrentJointPositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentJointPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MMIStandard.MVector3>(_list186.size);
                  @org.apache.thrift.annotation.Nullable MMIStandard.MVector3 _elem187;
                  for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                  {
                    _elem187 = new MMIStandard.MVector3();
                    _elem187.read(iprot);
                    struct.success.add(_elem187);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentJointPositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MMIStandard.MVector3 _iter189 : struct.success)
            {
              _iter189.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCurrentJointPositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetCurrentJointPositions_resultTupleScheme getScheme() {
        return new GetCurrentJointPositions_resultTupleScheme();
      }
    }

    private static class GetCurrentJointPositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetCurrentJointPositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentJointPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MMIStandard.MVector3 _iter190 : struct.success)
            {
              _iter190.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentJointPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MMIStandard.MVector3>(_list191.size);
            @org.apache.thrift.annotation.Nullable MMIStandard.MVector3 _elem192;
            for (int _i193 = 0; _i193 < _list191.size; ++_i193)
            {
              _elem192 = new MMIStandard.MVector3();
              _elem192.read(iprot);
              struct.success.add(_elem192);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetRootPosition_args implements org.apache.thrift.TBase<GetRootPosition_args, GetRootPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetRootPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRootPosition_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetRootPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetRootPosition_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRootPosition_args.class, metaDataMap);
    }

    public GetRootPosition_args() {
    }

    public GetRootPosition_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRootPosition_args(GetRootPosition_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetRootPosition_args deepCopy() {
      return new GetRootPosition_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetRootPosition_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRootPosition_args)
        return this.equals((GetRootPosition_args)that);
      return false;
    }

    public boolean equals(GetRootPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetRootPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetRootPosition_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRootPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootPosition_argsStandardScheme getScheme() {
        return new GetRootPosition_argsStandardScheme();
      }
    }

    private static class GetRootPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetRootPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRootPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRootPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRootPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootPosition_argsTupleScheme getScheme() {
        return new GetRootPosition_argsTupleScheme();
      }
    }

    private static class GetRootPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetRootPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRootPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRootPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetRootPosition_result implements org.apache.thrift.TBase<GetRootPosition_result, GetRootPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetRootPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRootPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetRootPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetRootPosition_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRootPosition_result.class, metaDataMap);
    }

    public GetRootPosition_result() {
    }

    public GetRootPosition_result(
      MMIStandard.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRootPosition_result(GetRootPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MVector3(other.success);
      }
    }

    public GetRootPosition_result deepCopy() {
      return new GetRootPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MVector3 getSuccess() {
      return this.success;
    }

    public GetRootPosition_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRootPosition_result)
        return this.equals((GetRootPosition_result)that);
      return false;
    }

    public boolean equals(GetRootPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetRootPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetRootPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRootPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootPosition_resultStandardScheme getScheme() {
        return new GetRootPosition_resultStandardScheme();
      }
    }

    private static class GetRootPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetRootPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRootPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRootPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRootPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootPosition_resultTupleScheme getScheme() {
        return new GetRootPosition_resultTupleScheme();
      }
    }

    private static class GetRootPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetRootPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRootPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRootPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetRootRotation_args implements org.apache.thrift.TBase<GetRootRotation_args, GetRootRotation_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetRootRotation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRootRotation_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetRootRotation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetRootRotation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRootRotation_args.class, metaDataMap);
    }

    public GetRootRotation_args() {
    }

    public GetRootRotation_args(
      java.lang.String avatarID)
    {
      this();
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRootRotation_args(GetRootRotation_args other) {
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public GetRootRotation_args deepCopy() {
      return new GetRootRotation_args(this);
    }

    @Override
    public void clear() {
      this.avatarID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public GetRootRotation_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRootRotation_args)
        return this.equals((GetRootRotation_args)that);
      return false;
    }

    public boolean equals(GetRootRotation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetRootRotation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetRootRotation_args(");
      boolean first = true;

      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRootRotation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootRotation_argsStandardScheme getScheme() {
        return new GetRootRotation_argsStandardScheme();
      }
    }

    private static class GetRootRotation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetRootRotation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRootRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRootRotation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRootRotation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootRotation_argsTupleScheme getScheme() {
        return new GetRootRotation_argsTupleScheme();
      }
    }

    private static class GetRootRotation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetRootRotation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRootRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRootRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetRootRotation_result implements org.apache.thrift.TBase<GetRootRotation_result, GetRootRotation_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetRootRotation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRootRotation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetRootRotation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetRootRotation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRootRotation_result.class, metaDataMap);
    }

    public GetRootRotation_result() {
    }

    public GetRootRotation_result(
      MMIStandard.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRootRotation_result(GetRootRotation_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MQuaternion(other.success);
      }
    }

    public GetRootRotation_result deepCopy() {
      return new GetRootRotation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MQuaternion getSuccess() {
      return this.success;
    }

    public GetRootRotation_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRootRotation_result)
        return this.equals((GetRootRotation_result)that);
      return false;
    }

    public boolean equals(GetRootRotation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetRootRotation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetRootRotation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRootRotation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootRotation_resultStandardScheme getScheme() {
        return new GetRootRotation_resultStandardScheme();
      }
    }

    private static class GetRootRotation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetRootRotation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRootRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRootRotation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRootRotation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetRootRotation_resultTupleScheme getScheme() {
        return new GetRootRotation_resultTupleScheme();
      }
    }

    private static class GetRootRotation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetRootRotation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRootRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRootRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetGlobalJointPosition_args implements org.apache.thrift.TBase<GetGlobalJointPosition_args, GetGlobalJointPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetGlobalJointPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGlobalJointPosition_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BONE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boneType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetGlobalJointPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetGlobalJointPosition_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarId; // required
    /**
     * 
     * @see MMIStandard.MJointType
     */
    public @org.apache.thrift.annotation.Nullable MMIStandard.MJointType boneType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarId"),
      /**
       * 
       * @see MMIStandard.MJointType
       */
      BONE_TYPE((short)2, "boneType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          case 2: // BONE_TYPE
            return BONE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BONE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boneType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MJointType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGlobalJointPosition_args.class, metaDataMap);
    }

    public GetGlobalJointPosition_args() {
    }

    public GetGlobalJointPosition_args(
      java.lang.String avatarId,
      MMIStandard.MJointType boneType)
    {
      this();
      this.avatarId = avatarId;
      this.boneType = boneType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGlobalJointPosition_args(GetGlobalJointPosition_args other) {
      if (other.isSetAvatarId()) {
        this.avatarId = other.avatarId;
      }
      if (other.isSetBoneType()) {
        this.boneType = other.boneType;
      }
    }

    public GetGlobalJointPosition_args deepCopy() {
      return new GetGlobalJointPosition_args(this);
    }

    @Override
    public void clear() {
      this.avatarId = null;
      this.boneType = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarId() {
      return this.avatarId;
    }

    public GetGlobalJointPosition_args setAvatarId(@org.apache.thrift.annotation.Nullable java.lang.String avatarId) {
      this.avatarId = avatarId;
      return this;
    }

    public void unsetAvatarId() {
      this.avatarId = null;
    }

    /** Returns true if field avatarId is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarId() {
      return this.avatarId != null;
    }

    public void setAvatarIdIsSet(boolean value) {
      if (!value) {
        this.avatarId = null;
      }
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MJointType getBoneType() {
      return this.boneType;
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    public GetGlobalJointPosition_args setBoneType(@org.apache.thrift.annotation.Nullable MMIStandard.MJointType boneType) {
      this.boneType = boneType;
      return this;
    }

    public void unsetBoneType() {
      this.boneType = null;
    }

    /** Returns true if field boneType is set (has been assigned a value) and false otherwise */
    public boolean isSetBoneType() {
      return this.boneType != null;
    }

    public void setBoneTypeIsSet(boolean value) {
      if (!value) {
        this.boneType = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarId();
        } else {
          setAvatarId((java.lang.String)value);
        }
        break;

      case BONE_TYPE:
        if (value == null) {
          unsetBoneType();
        } else {
          setBoneType((MMIStandard.MJointType)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarId();

      case BONE_TYPE:
        return getBoneType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarId();
      case BONE_TYPE:
        return isSetBoneType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGlobalJointPosition_args)
        return this.equals((GetGlobalJointPosition_args)that);
      return false;
    }

    public boolean equals(GetGlobalJointPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarId = true && this.isSetAvatarId();
      boolean that_present_avatarId = true && that.isSetAvatarId();
      if (this_present_avatarId || that_present_avatarId) {
        if (!(this_present_avatarId && that_present_avatarId))
          return false;
        if (!this.avatarId.equals(that.avatarId))
          return false;
      }

      boolean this_present_boneType = true && this.isSetBoneType();
      boolean that_present_boneType = true && that.isSetBoneType();
      if (this_present_boneType || that_present_boneType) {
        if (!(this_present_boneType && that_present_boneType))
          return false;
        if (!this.boneType.equals(that.boneType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarId()) ? 131071 : 524287);
      if (isSetAvatarId())
        hashCode = hashCode * 8191 + avatarId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBoneType()) ? 131071 : 524287);
      if (isSetBoneType())
        hashCode = hashCode * 8191 + boneType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(GetGlobalJointPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarId()).compareTo(other.isSetAvatarId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarId, other.avatarId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBoneType()).compareTo(other.isSetBoneType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoneType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boneType, other.boneType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetGlobalJointPosition_args(");
      boolean first = true;

      sb.append("avatarId:");
      if (this.avatarId == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("boneType:");
      if (this.boneType == null) {
        sb.append("null");
      } else {
        sb.append(this.boneType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGlobalJointPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointPosition_argsStandardScheme getScheme() {
        return new GetGlobalJointPosition_argsStandardScheme();
      }
    }

    private static class GetGlobalJointPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetGlobalJointPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGlobalJointPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarId = iprot.readString();
                struct.setAvatarIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BONE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.boneType = MMIStandard.MJointType.findByValue(iprot.readI32());
                struct.setBoneTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGlobalJointPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarId != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarId);
          oprot.writeFieldEnd();
        }
        if (struct.boneType != null) {
          oprot.writeFieldBegin(BONE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.boneType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGlobalJointPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointPosition_argsTupleScheme getScheme() {
        return new GetGlobalJointPosition_argsTupleScheme();
      }
    }

    private static class GetGlobalJointPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetGlobalJointPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarId()) {
          optionals.set(0);
        }
        if (struct.isSetBoneType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAvatarId()) {
          oprot.writeString(struct.avatarId);
        }
        if (struct.isSetBoneType()) {
          oprot.writeI32(struct.boneType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.avatarId = iprot.readString();
          struct.setAvatarIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.boneType = MMIStandard.MJointType.findByValue(iprot.readI32());
          struct.setBoneTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetGlobalJointPosition_result implements org.apache.thrift.TBase<GetGlobalJointPosition_result, GetGlobalJointPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetGlobalJointPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGlobalJointPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetGlobalJointPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetGlobalJointPosition_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGlobalJointPosition_result.class, metaDataMap);
    }

    public GetGlobalJointPosition_result() {
    }

    public GetGlobalJointPosition_result(
      MMIStandard.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGlobalJointPosition_result(GetGlobalJointPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MVector3(other.success);
      }
    }

    public GetGlobalJointPosition_result deepCopy() {
      return new GetGlobalJointPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MVector3 getSuccess() {
      return this.success;
    }

    public GetGlobalJointPosition_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGlobalJointPosition_result)
        return this.equals((GetGlobalJointPosition_result)that);
      return false;
    }

    public boolean equals(GetGlobalJointPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetGlobalJointPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetGlobalJointPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGlobalJointPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointPosition_resultStandardScheme getScheme() {
        return new GetGlobalJointPosition_resultStandardScheme();
      }
    }

    private static class GetGlobalJointPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetGlobalJointPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGlobalJointPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGlobalJointPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGlobalJointPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointPosition_resultTupleScheme getScheme() {
        return new GetGlobalJointPosition_resultTupleScheme();
      }
    }

    private static class GetGlobalJointPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetGlobalJointPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetGlobalJointRotation_args implements org.apache.thrift.TBase<GetGlobalJointRotation_args, GetGlobalJointRotation_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetGlobalJointRotation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGlobalJointRotation_args");

    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BONE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boneType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetGlobalJointRotation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetGlobalJointRotation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String avatarId; // required
    /**
     * 
     * @see MMIStandard.MJointType
     */
    public @org.apache.thrift.annotation.Nullable MMIStandard.MJointType boneType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_ID((short)1, "avatarId"),
      /**
       * 
       * @see MMIStandard.MJointType
       */
      BONE_TYPE((short)2, "boneType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_ID
            return AVATAR_ID;
          case 2: // BONE_TYPE
            return BONE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BONE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boneType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MJointType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGlobalJointRotation_args.class, metaDataMap);
    }

    public GetGlobalJointRotation_args() {
    }

    public GetGlobalJointRotation_args(
      java.lang.String avatarId,
      MMIStandard.MJointType boneType)
    {
      this();
      this.avatarId = avatarId;
      this.boneType = boneType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGlobalJointRotation_args(GetGlobalJointRotation_args other) {
      if (other.isSetAvatarId()) {
        this.avatarId = other.avatarId;
      }
      if (other.isSetBoneType()) {
        this.boneType = other.boneType;
      }
    }

    public GetGlobalJointRotation_args deepCopy() {
      return new GetGlobalJointRotation_args(this);
    }

    @Override
    public void clear() {
      this.avatarId = null;
      this.boneType = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarId() {
      return this.avatarId;
    }

    public GetGlobalJointRotation_args setAvatarId(@org.apache.thrift.annotation.Nullable java.lang.String avatarId) {
      this.avatarId = avatarId;
      return this;
    }

    public void unsetAvatarId() {
      this.avatarId = null;
    }

    /** Returns true if field avatarId is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarId() {
      return this.avatarId != null;
    }

    public void setAvatarIdIsSet(boolean value) {
      if (!value) {
        this.avatarId = null;
      }
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MJointType getBoneType() {
      return this.boneType;
    }

    /**
     * 
     * @see MMIStandard.MJointType
     */
    public GetGlobalJointRotation_args setBoneType(@org.apache.thrift.annotation.Nullable MMIStandard.MJointType boneType) {
      this.boneType = boneType;
      return this;
    }

    public void unsetBoneType() {
      this.boneType = null;
    }

    /** Returns true if field boneType is set (has been assigned a value) and false otherwise */
    public boolean isSetBoneType() {
      return this.boneType != null;
    }

    public void setBoneTypeIsSet(boolean value) {
      if (!value) {
        this.boneType = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_ID:
        if (value == null) {
          unsetAvatarId();
        } else {
          setAvatarId((java.lang.String)value);
        }
        break;

      case BONE_TYPE:
        if (value == null) {
          unsetBoneType();
        } else {
          setBoneType((MMIStandard.MJointType)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_ID:
        return getAvatarId();

      case BONE_TYPE:
        return getBoneType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_ID:
        return isSetAvatarId();
      case BONE_TYPE:
        return isSetBoneType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGlobalJointRotation_args)
        return this.equals((GetGlobalJointRotation_args)that);
      return false;
    }

    public boolean equals(GetGlobalJointRotation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarId = true && this.isSetAvatarId();
      boolean that_present_avatarId = true && that.isSetAvatarId();
      if (this_present_avatarId || that_present_avatarId) {
        if (!(this_present_avatarId && that_present_avatarId))
          return false;
        if (!this.avatarId.equals(that.avatarId))
          return false;
      }

      boolean this_present_boneType = true && this.isSetBoneType();
      boolean that_present_boneType = true && that.isSetBoneType();
      if (this_present_boneType || that_present_boneType) {
        if (!(this_present_boneType && that_present_boneType))
          return false;
        if (!this.boneType.equals(that.boneType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarId()) ? 131071 : 524287);
      if (isSetAvatarId())
        hashCode = hashCode * 8191 + avatarId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBoneType()) ? 131071 : 524287);
      if (isSetBoneType())
        hashCode = hashCode * 8191 + boneType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(GetGlobalJointRotation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarId()).compareTo(other.isSetAvatarId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarId, other.avatarId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBoneType()).compareTo(other.isSetBoneType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoneType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boneType, other.boneType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetGlobalJointRotation_args(");
      boolean first = true;

      sb.append("avatarId:");
      if (this.avatarId == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("boneType:");
      if (this.boneType == null) {
        sb.append("null");
      } else {
        sb.append(this.boneType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGlobalJointRotation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointRotation_argsStandardScheme getScheme() {
        return new GetGlobalJointRotation_argsStandardScheme();
      }
    }

    private static class GetGlobalJointRotation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetGlobalJointRotation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGlobalJointRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarId = iprot.readString();
                struct.setAvatarIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BONE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.boneType = MMIStandard.MJointType.findByValue(iprot.readI32());
                struct.setBoneTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGlobalJointRotation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarId != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarId);
          oprot.writeFieldEnd();
        }
        if (struct.boneType != null) {
          oprot.writeFieldBegin(BONE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.boneType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGlobalJointRotation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointRotation_argsTupleScheme getScheme() {
        return new GetGlobalJointRotation_argsTupleScheme();
      }
    }

    private static class GetGlobalJointRotation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetGlobalJointRotation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarId()) {
          optionals.set(0);
        }
        if (struct.isSetBoneType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAvatarId()) {
          oprot.writeString(struct.avatarId);
        }
        if (struct.isSetBoneType()) {
          oprot.writeI32(struct.boneType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointRotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.avatarId = iprot.readString();
          struct.setAvatarIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.boneType = MMIStandard.MJointType.findByValue(iprot.readI32());
          struct.setBoneTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetGlobalJointRotation_result implements org.apache.thrift.TBase<GetGlobalJointRotation_result, GetGlobalJointRotation_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetGlobalJointRotation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGlobalJointRotation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetGlobalJointRotation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetGlobalJointRotation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MMIStandard.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGlobalJointRotation_result.class, metaDataMap);
    }

    public GetGlobalJointRotation_result() {
    }

    public GetGlobalJointRotation_result(
      MMIStandard.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGlobalJointRotation_result(GetGlobalJointRotation_result other) {
      if (other.isSetSuccess()) {
        this.success = new MMIStandard.MQuaternion(other.success);
      }
    }

    public GetGlobalJointRotation_result deepCopy() {
      return new GetGlobalJointRotation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MMIStandard.MQuaternion getSuccess() {
      return this.success;
    }

    public GetGlobalJointRotation_result setSuccess(@org.apache.thrift.annotation.Nullable MMIStandard.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MMIStandard.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGlobalJointRotation_result)
        return this.equals((GetGlobalJointRotation_result)that);
      return false;
    }

    public boolean equals(GetGlobalJointRotation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetGlobalJointRotation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetGlobalJointRotation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGlobalJointRotation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointRotation_resultStandardScheme getScheme() {
        return new GetGlobalJointRotation_resultStandardScheme();
      }
    }

    private static class GetGlobalJointRotation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetGlobalJointRotation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGlobalJointRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MMIStandard.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGlobalJointRotation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGlobalJointRotation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetGlobalJointRotation_resultTupleScheme getScheme() {
        return new GetGlobalJointRotation_resultTupleScheme();
      }
    }

    private static class GetGlobalJointRotation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetGlobalJointRotation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGlobalJointRotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MMIStandard.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
