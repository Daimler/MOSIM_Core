/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MPhysicsProperties implements org.apache.thrift.TBase<MPhysicsProperties, MPhysicsProperties._Fields>, java.io.Serializable, Cloneable, Comparable<MPhysicsProperties> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MPhysicsProperties");

  private static final org.apache.thrift.protocol.TField MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("Mass", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField CENTER_OF_MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("CenterOfMass", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INERTIA_FIELD_DESC = new org.apache.thrift.protocol.TField("Inertia", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Velocity", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ANGULAR_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("AngularVelocity", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MPhysicsPropertiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MPhysicsPropertiesTupleSchemeFactory();

  public double Mass; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> CenterOfMass; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Inertia; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Velocity; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> AngularVelocity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MASS((short)1, "Mass"),
    CENTER_OF_MASS((short)2, "CenterOfMass"),
    INERTIA((short)3, "Inertia"),
    VELOCITY((short)4, "Velocity"),
    ANGULAR_VELOCITY((short)5, "AngularVelocity");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MASS
          return MASS;
        case 2: // CENTER_OF_MASS
          return CENTER_OF_MASS;
        case 3: // INERTIA
          return INERTIA;
        case 4: // VELOCITY
          return VELOCITY;
        case 5: // ANGULAR_VELOCITY
          return ANGULAR_VELOCITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MASS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VELOCITY,_Fields.ANGULAR_VELOCITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MASS, new org.apache.thrift.meta_data.FieldMetaData("Mass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CENTER_OF_MASS, new org.apache.thrift.meta_data.FieldMetaData("CenterOfMass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.INERTIA, new org.apache.thrift.meta_data.FieldMetaData("Inertia", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("Velocity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ANGULAR_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("AngularVelocity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MPhysicsProperties.class, metaDataMap);
  }

  public MPhysicsProperties() {
  }

  public MPhysicsProperties(
    double Mass,
    java.util.List<java.lang.Double> CenterOfMass,
    java.util.List<java.lang.Double> Inertia)
  {
    this();
    this.Mass = Mass;
    setMassIsSet(true);
    this.CenterOfMass = CenterOfMass;
    this.Inertia = Inertia;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MPhysicsProperties(MPhysicsProperties other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Mass = other.Mass;
    if (other.isSetCenterOfMass()) {
      java.util.List<java.lang.Double> __this__CenterOfMass = new java.util.ArrayList<java.lang.Double>(other.CenterOfMass);
      this.CenterOfMass = __this__CenterOfMass;
    }
    if (other.isSetInertia()) {
      java.util.List<java.lang.Double> __this__Inertia = new java.util.ArrayList<java.lang.Double>(other.Inertia);
      this.Inertia = __this__Inertia;
    }
    if (other.isSetVelocity()) {
      java.util.List<java.lang.Double> __this__Velocity = new java.util.ArrayList<java.lang.Double>(other.Velocity);
      this.Velocity = __this__Velocity;
    }
    if (other.isSetAngularVelocity()) {
      java.util.List<java.lang.Double> __this__AngularVelocity = new java.util.ArrayList<java.lang.Double>(other.AngularVelocity);
      this.AngularVelocity = __this__AngularVelocity;
    }
  }

  public MPhysicsProperties deepCopy() {
    return new MPhysicsProperties(this);
  }

  @Override
  public void clear() {
    setMassIsSet(false);
    this.Mass = 0.0;
    this.CenterOfMass = null;
    this.Inertia = null;
    this.Velocity = null;
    this.AngularVelocity = null;
  }

  public double getMass() {
    return this.Mass;
  }

  public MPhysicsProperties setMass(double Mass) {
    this.Mass = Mass;
    setMassIsSet(true);
    return this;
  }

  public void unsetMass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  /** Returns true if field Mass is set (has been assigned a value) and false otherwise */
  public boolean isSetMass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  public void setMassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MASS_ISSET_ID, value);
  }

  public int getCenterOfMassSize() {
    return (this.CenterOfMass == null) ? 0 : this.CenterOfMass.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCenterOfMassIterator() {
    return (this.CenterOfMass == null) ? null : this.CenterOfMass.iterator();
  }

  public void addToCenterOfMass(double elem) {
    if (this.CenterOfMass == null) {
      this.CenterOfMass = new java.util.ArrayList<java.lang.Double>();
    }
    this.CenterOfMass.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCenterOfMass() {
    return this.CenterOfMass;
  }

  public MPhysicsProperties setCenterOfMass(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> CenterOfMass) {
    this.CenterOfMass = CenterOfMass;
    return this;
  }

  public void unsetCenterOfMass() {
    this.CenterOfMass = null;
  }

  /** Returns true if field CenterOfMass is set (has been assigned a value) and false otherwise */
  public boolean isSetCenterOfMass() {
    return this.CenterOfMass != null;
  }

  public void setCenterOfMassIsSet(boolean value) {
    if (!value) {
      this.CenterOfMass = null;
    }
  }

  public int getInertiaSize() {
    return (this.Inertia == null) ? 0 : this.Inertia.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getInertiaIterator() {
    return (this.Inertia == null) ? null : this.Inertia.iterator();
  }

  public void addToInertia(double elem) {
    if (this.Inertia == null) {
      this.Inertia = new java.util.ArrayList<java.lang.Double>();
    }
    this.Inertia.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getInertia() {
    return this.Inertia;
  }

  public MPhysicsProperties setInertia(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Inertia) {
    this.Inertia = Inertia;
    return this;
  }

  public void unsetInertia() {
    this.Inertia = null;
  }

  /** Returns true if field Inertia is set (has been assigned a value) and false otherwise */
  public boolean isSetInertia() {
    return this.Inertia != null;
  }

  public void setInertiaIsSet(boolean value) {
    if (!value) {
      this.Inertia = null;
    }
  }

  public int getVelocitySize() {
    return (this.Velocity == null) ? 0 : this.Velocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getVelocityIterator() {
    return (this.Velocity == null) ? null : this.Velocity.iterator();
  }

  public void addToVelocity(double elem) {
    if (this.Velocity == null) {
      this.Velocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.Velocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getVelocity() {
    return this.Velocity;
  }

  public MPhysicsProperties setVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Velocity) {
    this.Velocity = Velocity;
    return this;
  }

  public void unsetVelocity() {
    this.Velocity = null;
  }

  /** Returns true if field Velocity is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocity() {
    return this.Velocity != null;
  }

  public void setVelocityIsSet(boolean value) {
    if (!value) {
      this.Velocity = null;
    }
  }

  public int getAngularVelocitySize() {
    return (this.AngularVelocity == null) ? 0 : this.AngularVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAngularVelocityIterator() {
    return (this.AngularVelocity == null) ? null : this.AngularVelocity.iterator();
  }

  public void addToAngularVelocity(double elem) {
    if (this.AngularVelocity == null) {
      this.AngularVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.AngularVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAngularVelocity() {
    return this.AngularVelocity;
  }

  public MPhysicsProperties setAngularVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> AngularVelocity) {
    this.AngularVelocity = AngularVelocity;
    return this;
  }

  public void unsetAngularVelocity() {
    this.AngularVelocity = null;
  }

  /** Returns true if field AngularVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetAngularVelocity() {
    return this.AngularVelocity != null;
  }

  public void setAngularVelocityIsSet(boolean value) {
    if (!value) {
      this.AngularVelocity = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MASS:
      if (value == null) {
        unsetMass();
      } else {
        setMass((java.lang.Double)value);
      }
      break;

    case CENTER_OF_MASS:
      if (value == null) {
        unsetCenterOfMass();
      } else {
        setCenterOfMass((java.util.List<java.lang.Double>)value);
      }
      break;

    case INERTIA:
      if (value == null) {
        unsetInertia();
      } else {
        setInertia((java.util.List<java.lang.Double>)value);
      }
      break;

    case VELOCITY:
      if (value == null) {
        unsetVelocity();
      } else {
        setVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case ANGULAR_VELOCITY:
      if (value == null) {
        unsetAngularVelocity();
      } else {
        setAngularVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MASS:
      return getMass();

    case CENTER_OF_MASS:
      return getCenterOfMass();

    case INERTIA:
      return getInertia();

    case VELOCITY:
      return getVelocity();

    case ANGULAR_VELOCITY:
      return getAngularVelocity();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MASS:
      return isSetMass();
    case CENTER_OF_MASS:
      return isSetCenterOfMass();
    case INERTIA:
      return isSetInertia();
    case VELOCITY:
      return isSetVelocity();
    case ANGULAR_VELOCITY:
      return isSetAngularVelocity();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MPhysicsProperties)
      return this.equals((MPhysicsProperties)that);
    return false;
  }

  public boolean equals(MPhysicsProperties that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Mass = true;
    boolean that_present_Mass = true;
    if (this_present_Mass || that_present_Mass) {
      if (!(this_present_Mass && that_present_Mass))
        return false;
      if (this.Mass != that.Mass)
        return false;
    }

    boolean this_present_CenterOfMass = true && this.isSetCenterOfMass();
    boolean that_present_CenterOfMass = true && that.isSetCenterOfMass();
    if (this_present_CenterOfMass || that_present_CenterOfMass) {
      if (!(this_present_CenterOfMass && that_present_CenterOfMass))
        return false;
      if (!this.CenterOfMass.equals(that.CenterOfMass))
        return false;
    }

    boolean this_present_Inertia = true && this.isSetInertia();
    boolean that_present_Inertia = true && that.isSetInertia();
    if (this_present_Inertia || that_present_Inertia) {
      if (!(this_present_Inertia && that_present_Inertia))
        return false;
      if (!this.Inertia.equals(that.Inertia))
        return false;
    }

    boolean this_present_Velocity = true && this.isSetVelocity();
    boolean that_present_Velocity = true && that.isSetVelocity();
    if (this_present_Velocity || that_present_Velocity) {
      if (!(this_present_Velocity && that_present_Velocity))
        return false;
      if (!this.Velocity.equals(that.Velocity))
        return false;
    }

    boolean this_present_AngularVelocity = true && this.isSetAngularVelocity();
    boolean that_present_AngularVelocity = true && that.isSetAngularVelocity();
    if (this_present_AngularVelocity || that_present_AngularVelocity) {
      if (!(this_present_AngularVelocity && that_present_AngularVelocity))
        return false;
      if (!this.AngularVelocity.equals(that.AngularVelocity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Mass);

    hashCode = hashCode * 8191 + ((isSetCenterOfMass()) ? 131071 : 524287);
    if (isSetCenterOfMass())
      hashCode = hashCode * 8191 + CenterOfMass.hashCode();

    hashCode = hashCode * 8191 + ((isSetInertia()) ? 131071 : 524287);
    if (isSetInertia())
      hashCode = hashCode * 8191 + Inertia.hashCode();

    hashCode = hashCode * 8191 + ((isSetVelocity()) ? 131071 : 524287);
    if (isSetVelocity())
      hashCode = hashCode * 8191 + Velocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetAngularVelocity()) ? 131071 : 524287);
    if (isSetAngularVelocity())
      hashCode = hashCode * 8191 + AngularVelocity.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MPhysicsProperties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMass()).compareTo(other.isSetMass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mass, other.Mass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCenterOfMass()).compareTo(other.isSetCenterOfMass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenterOfMass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CenterOfMass, other.CenterOfMass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInertia()).compareTo(other.isSetInertia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInertia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Inertia, other.Inertia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVelocity()).compareTo(other.isSetVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Velocity, other.Velocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAngularVelocity()).compareTo(other.isSetAngularVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngularVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AngularVelocity, other.AngularVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MPhysicsProperties(");
    boolean first = true;

    sb.append("Mass:");
    sb.append(this.Mass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CenterOfMass:");
    if (this.CenterOfMass == null) {
      sb.append("null");
    } else {
      sb.append(this.CenterOfMass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Inertia:");
    if (this.Inertia == null) {
      sb.append("null");
    } else {
      sb.append(this.Inertia);
    }
    first = false;
    if (isSetVelocity()) {
      if (!first) sb.append(", ");
      sb.append("Velocity:");
      if (this.Velocity == null) {
        sb.append("null");
      } else {
        sb.append(this.Velocity);
      }
      first = false;
    }
    if (isSetAngularVelocity()) {
      if (!first) sb.append(", ");
      sb.append("AngularVelocity:");
      if (this.AngularVelocity == null) {
        sb.append("null");
      } else {
        sb.append(this.AngularVelocity);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'Mass' because it's a primitive and you chose the non-beans generator.
    if (CenterOfMass == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'CenterOfMass' was not present! Struct: " + toString());
    }
    if (Inertia == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Inertia' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MPhysicsPropertiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPhysicsPropertiesStandardScheme getScheme() {
      return new MPhysicsPropertiesStandardScheme();
    }
  }

  private static class MPhysicsPropertiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<MPhysicsProperties> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mass = iprot.readDouble();
              struct.setMassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CENTER_OF_MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.CenterOfMass = new java.util.ArrayList<java.lang.Double>(_list24.size);
                double _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readDouble();
                  struct.CenterOfMass.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setCenterOfMassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INERTIA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.Inertia = new java.util.ArrayList<java.lang.Double>(_list27.size);
                double _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readDouble();
                  struct.Inertia.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setInertiaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.Velocity = new java.util.ArrayList<java.lang.Double>(_list30.size);
                double _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readDouble();
                  struct.Velocity.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANGULAR_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.AngularVelocity = new java.util.ArrayList<java.lang.Double>(_list33.size);
                double _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readDouble();
                  struct.AngularVelocity.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setAngularVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'Mass' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MASS_FIELD_DESC);
      oprot.writeDouble(struct.Mass);
      oprot.writeFieldEnd();
      if (struct.CenterOfMass != null) {
        oprot.writeFieldBegin(CENTER_OF_MASS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.CenterOfMass.size()));
          for (double _iter36 : struct.CenterOfMass)
          {
            oprot.writeDouble(_iter36);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Inertia != null) {
        oprot.writeFieldBegin(INERTIA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Inertia.size()));
          for (double _iter37 : struct.Inertia)
          {
            oprot.writeDouble(_iter37);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Velocity != null) {
        if (struct.isSetVelocity()) {
          oprot.writeFieldBegin(VELOCITY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Velocity.size()));
            for (double _iter38 : struct.Velocity)
            {
              oprot.writeDouble(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.AngularVelocity != null) {
        if (struct.isSetAngularVelocity()) {
          oprot.writeFieldBegin(ANGULAR_VELOCITY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.AngularVelocity.size()));
            for (double _iter39 : struct.AngularVelocity)
            {
              oprot.writeDouble(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MPhysicsPropertiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPhysicsPropertiesTupleScheme getScheme() {
      return new MPhysicsPropertiesTupleScheme();
    }
  }

  private static class MPhysicsPropertiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<MPhysicsProperties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.Mass);
      {
        oprot.writeI32(struct.CenterOfMass.size());
        for (double _iter40 : struct.CenterOfMass)
        {
          oprot.writeDouble(_iter40);
        }
      }
      {
        oprot.writeI32(struct.Inertia.size());
        for (double _iter41 : struct.Inertia)
        {
          oprot.writeDouble(_iter41);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVelocity()) {
        optionals.set(0);
      }
      if (struct.isSetAngularVelocity()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVelocity()) {
        {
          oprot.writeI32(struct.Velocity.size());
          for (double _iter42 : struct.Velocity)
          {
            oprot.writeDouble(_iter42);
          }
        }
      }
      if (struct.isSetAngularVelocity()) {
        {
          oprot.writeI32(struct.AngularVelocity.size());
          for (double _iter43 : struct.AngularVelocity)
          {
            oprot.writeDouble(_iter43);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Mass = iprot.readDouble();
      struct.setMassIsSet(true);
      {
        org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.CenterOfMass = new java.util.ArrayList<java.lang.Double>(_list44.size);
        double _elem45;
        for (int _i46 = 0; _i46 < _list44.size; ++_i46)
        {
          _elem45 = iprot.readDouble();
          struct.CenterOfMass.add(_elem45);
        }
      }
      struct.setCenterOfMassIsSet(true);
      {
        org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.Inertia = new java.util.ArrayList<java.lang.Double>(_list47.size);
        double _elem48;
        for (int _i49 = 0; _i49 < _list47.size; ++_i49)
        {
          _elem48 = iprot.readDouble();
          struct.Inertia.add(_elem48);
        }
      }
      struct.setInertiaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.Velocity = new java.util.ArrayList<java.lang.Double>(_list50.size);
          double _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = iprot.readDouble();
            struct.Velocity.add(_elem51);
          }
        }
        struct.setVelocityIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.AngularVelocity = new java.util.ArrayList<java.lang.Double>(_list53.size);
          double _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readDouble();
            struct.AngularVelocity.add(_elem54);
          }
        }
        struct.setAngularVelocityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

