/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MHandPose implements org.apache.thrift.TBase<MHandPose, MHandPose._Fields>, java.io.Serializable, Cloneable, Comparable<MHandPose> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MHandPose");

  private static final org.apache.thrift.protocol.TField BONES_FIELD_DESC = new org.apache.thrift.protocol.TField("Bones", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MHandPoseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MHandPoseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MJoint> Bones; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BONES((short)1, "Bones");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BONES
          return BONES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BONES, new org.apache.thrift.meta_data.FieldMetaData("Bones", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMIStandard.MJoint.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MHandPose.class, metaDataMap);
  }

  public MHandPose() {
  }

  public MHandPose(
    java.util.List<MMIStandard.MJoint> Bones)
  {
    this();
    this.Bones = Bones;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MHandPose(MHandPose other) {
    if (other.isSetBones()) {
      java.util.List<MMIStandard.MJoint> __this__Bones = new java.util.ArrayList<MMIStandard.MJoint>(other.Bones.size());
      for (MMIStandard.MJoint other_element : other.Bones) {
        __this__Bones.add(new MMIStandard.MJoint(other_element));
      }
      this.Bones = __this__Bones;
    }
  }

  public MHandPose deepCopy() {
    return new MHandPose(this);
  }

  @Override
  public void clear() {
    this.Bones = null;
  }

  public int getBonesSize() {
    return (this.Bones == null) ? 0 : this.Bones.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MMIStandard.MJoint> getBonesIterator() {
    return (this.Bones == null) ? null : this.Bones.iterator();
  }

  public void addToBones(MMIStandard.MJoint elem) {
    if (this.Bones == null) {
      this.Bones = new java.util.ArrayList<MMIStandard.MJoint>();
    }
    this.Bones.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MMIStandard.MJoint> getBones() {
    return this.Bones;
  }

  public MHandPose setBones(@org.apache.thrift.annotation.Nullable java.util.List<MMIStandard.MJoint> Bones) {
    this.Bones = Bones;
    return this;
  }

  public void unsetBones() {
    this.Bones = null;
  }

  /** Returns true if field Bones is set (has been assigned a value) and false otherwise */
  public boolean isSetBones() {
    return this.Bones != null;
  }

  public void setBonesIsSet(boolean value) {
    if (!value) {
      this.Bones = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BONES:
      if (value == null) {
        unsetBones();
      } else {
        setBones((java.util.List<MMIStandard.MJoint>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BONES:
      return getBones();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BONES:
      return isSetBones();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MHandPose)
      return this.equals((MHandPose)that);
    return false;
  }

  public boolean equals(MHandPose that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Bones = true && this.isSetBones();
    boolean that_present_Bones = true && that.isSetBones();
    if (this_present_Bones || that_present_Bones) {
      if (!(this_present_Bones && that_present_Bones))
        return false;
      if (!this.Bones.equals(that.Bones))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBones()) ? 131071 : 524287);
    if (isSetBones())
      hashCode = hashCode * 8191 + Bones.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MHandPose other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBones()).compareTo(other.isSetBones());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBones()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Bones, other.Bones);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MHandPose(");
    boolean first = true;

    sb.append("Bones:");
    if (this.Bones == null) {
      sb.append("null");
    } else {
      sb.append(this.Bones);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Bones == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Bones' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MHandPoseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MHandPoseStandardScheme getScheme() {
      return new MHandPoseStandardScheme();
    }
  }

  private static class MHandPoseStandardScheme extends org.apache.thrift.scheme.StandardScheme<MHandPose> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MHandPose struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BONES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.Bones = new java.util.ArrayList<MMIStandard.MJoint>(_list8.size);
                @org.apache.thrift.annotation.Nullable MMIStandard.MJoint _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new MMIStandard.MJoint();
                  _elem9.read(iprot);
                  struct.Bones.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setBonesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MHandPose struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Bones != null) {
        oprot.writeFieldBegin(BONES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Bones.size()));
          for (MMIStandard.MJoint _iter11 : struct.Bones)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MHandPoseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MHandPoseTupleScheme getScheme() {
      return new MHandPoseTupleScheme();
    }
  }

  private static class MHandPoseTupleScheme extends org.apache.thrift.scheme.TupleScheme<MHandPose> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MHandPose struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.Bones.size());
        for (MMIStandard.MJoint _iter12 : struct.Bones)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MHandPose struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.Bones = new java.util.ArrayList<MMIStandard.MJoint>(_list13.size);
        @org.apache.thrift.annotation.Nullable MMIStandard.MJoint _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new MMIStandard.MJoint();
          _elem14.read(iprot);
          struct.Bones.add(_elem14);
        }
      }
      struct.setBonesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

