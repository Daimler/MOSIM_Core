/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MMIStandard;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-02")
public class MEndeffectorConstraint implements org.apache.thrift.TBase<MEndeffectorConstraint, MEndeffectorConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MEndeffectorConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MEndeffectorConstraint");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("PositionConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ROTATION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("RotationConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MEndeffectorConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MEndeffectorConstraintTupleSchemeFactory();

  /**
   * 
   * @see MMIStandard.MEndeffectorType
   */
  public @org.apache.thrift.annotation.Nullable MMIStandard.MEndeffectorType Type; // required
  public @org.apache.thrift.annotation.Nullable MPositionConstraint PositionConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MRotationConstraint RotationConstraint; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MMIStandard.MEndeffectorType
     */
    TYPE((short)1, "Type"),
    POSITION_CONSTRAINT((short)2, "PositionConstraint"),
    ROTATION_CONSTRAINT((short)3, "RotationConstraint");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // POSITION_CONSTRAINT
          return POSITION_CONSTRAINT;
        case 3: // ROTATION_CONSTRAINT
          return ROTATION_CONSTRAINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.POSITION_CONSTRAINT,_Fields.ROTATION_CONSTRAINT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MMIStandard.MEndeffectorType.class)));
    tmpMap.put(_Fields.POSITION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("PositionConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPositionConstraint.class)));
    tmpMap.put(_Fields.ROTATION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("RotationConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MRotationConstraint.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MEndeffectorConstraint.class, metaDataMap);
  }

  public MEndeffectorConstraint() {
  }

  public MEndeffectorConstraint(
    MMIStandard.MEndeffectorType Type)
  {
    this();
    this.Type = Type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MEndeffectorConstraint(MEndeffectorConstraint other) {
    if (other.isSetType()) {
      this.Type = other.Type;
    }
    if (other.isSetPositionConstraint()) {
      this.PositionConstraint = new MPositionConstraint(other.PositionConstraint);
    }
    if (other.isSetRotationConstraint()) {
      this.RotationConstraint = new MRotationConstraint(other.RotationConstraint);
    }
  }

  public MEndeffectorConstraint deepCopy() {
    return new MEndeffectorConstraint(this);
  }

  @Override
  public void clear() {
    this.Type = null;
    this.PositionConstraint = null;
    this.RotationConstraint = null;
  }

  /**
   * 
   * @see MMIStandard.MEndeffectorType
   */
  @org.apache.thrift.annotation.Nullable
  public MMIStandard.MEndeffectorType getType() {
    return this.Type;
  }

  /**
   * 
   * @see MMIStandard.MEndeffectorType
   */
  public MEndeffectorConstraint setType(@org.apache.thrift.annotation.Nullable MMIStandard.MEndeffectorType Type) {
    this.Type = Type;
    return this;
  }

  public void unsetType() {
    this.Type = null;
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.Type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.Type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MPositionConstraint getPositionConstraint() {
    return this.PositionConstraint;
  }

  public MEndeffectorConstraint setPositionConstraint(@org.apache.thrift.annotation.Nullable MPositionConstraint PositionConstraint) {
    this.PositionConstraint = PositionConstraint;
    return this;
  }

  public void unsetPositionConstraint() {
    this.PositionConstraint = null;
  }

  /** Returns true if field PositionConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionConstraint() {
    return this.PositionConstraint != null;
  }

  public void setPositionConstraintIsSet(boolean value) {
    if (!value) {
      this.PositionConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MRotationConstraint getRotationConstraint() {
    return this.RotationConstraint;
  }

  public MEndeffectorConstraint setRotationConstraint(@org.apache.thrift.annotation.Nullable MRotationConstraint RotationConstraint) {
    this.RotationConstraint = RotationConstraint;
    return this;
  }

  public void unsetRotationConstraint() {
    this.RotationConstraint = null;
  }

  /** Returns true if field RotationConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetRotationConstraint() {
    return this.RotationConstraint != null;
  }

  public void setRotationConstraintIsSet(boolean value) {
    if (!value) {
      this.RotationConstraint = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MMIStandard.MEndeffectorType)value);
      }
      break;

    case POSITION_CONSTRAINT:
      if (value == null) {
        unsetPositionConstraint();
      } else {
        setPositionConstraint((MPositionConstraint)value);
      }
      break;

    case ROTATION_CONSTRAINT:
      if (value == null) {
        unsetRotationConstraint();
      } else {
        setRotationConstraint((MRotationConstraint)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case POSITION_CONSTRAINT:
      return getPositionConstraint();

    case ROTATION_CONSTRAINT:
      return getRotationConstraint();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case POSITION_CONSTRAINT:
      return isSetPositionConstraint();
    case ROTATION_CONSTRAINT:
      return isSetRotationConstraint();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MEndeffectorConstraint)
      return this.equals((MEndeffectorConstraint)that);
    return false;
  }

  public boolean equals(MEndeffectorConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Type = true && this.isSetType();
    boolean that_present_Type = true && that.isSetType();
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (!this.Type.equals(that.Type))
        return false;
    }

    boolean this_present_PositionConstraint = true && this.isSetPositionConstraint();
    boolean that_present_PositionConstraint = true && that.isSetPositionConstraint();
    if (this_present_PositionConstraint || that_present_PositionConstraint) {
      if (!(this_present_PositionConstraint && that_present_PositionConstraint))
        return false;
      if (!this.PositionConstraint.equals(that.PositionConstraint))
        return false;
    }

    boolean this_present_RotationConstraint = true && this.isSetRotationConstraint();
    boolean that_present_RotationConstraint = true && that.isSetRotationConstraint();
    if (this_present_RotationConstraint || that_present_RotationConstraint) {
      if (!(this_present_RotationConstraint && that_present_RotationConstraint))
        return false;
      if (!this.RotationConstraint.equals(that.RotationConstraint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + Type.getValue();

    hashCode = hashCode * 8191 + ((isSetPositionConstraint()) ? 131071 : 524287);
    if (isSetPositionConstraint())
      hashCode = hashCode * 8191 + PositionConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetRotationConstraint()) ? 131071 : 524287);
    if (isSetRotationConstraint())
      hashCode = hashCode * 8191 + RotationConstraint.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MEndeffectorConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionConstraint()).compareTo(other.isSetPositionConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PositionConstraint, other.PositionConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRotationConstraint()).compareTo(other.isSetRotationConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRotationConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RotationConstraint, other.RotationConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MEndeffectorConstraint(");
    boolean first = true;

    sb.append("Type:");
    if (this.Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Type);
    }
    first = false;
    if (isSetPositionConstraint()) {
      if (!first) sb.append(", ");
      sb.append("PositionConstraint:");
      if (this.PositionConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.PositionConstraint);
      }
      first = false;
    }
    if (isSetRotationConstraint()) {
      if (!first) sb.append(", ");
      sb.append("RotationConstraint:");
      if (this.RotationConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.RotationConstraint);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (PositionConstraint != null) {
      PositionConstraint.validate();
    }
    if (RotationConstraint != null) {
      RotationConstraint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MEndeffectorConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MEndeffectorConstraintStandardScheme getScheme() {
      return new MEndeffectorConstraintStandardScheme();
    }
  }

  private static class MEndeffectorConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MEndeffectorConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MEndeffectorConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Type = MMIStandard.MEndeffectorType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PositionConstraint = new MPositionConstraint();
              struct.PositionConstraint.read(iprot);
              struct.setPositionConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROTATION_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.RotationConstraint = new MRotationConstraint();
              struct.RotationConstraint.read(iprot);
              struct.setRotationConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MEndeffectorConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.Type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.PositionConstraint != null) {
        if (struct.isSetPositionConstraint()) {
          oprot.writeFieldBegin(POSITION_CONSTRAINT_FIELD_DESC);
          struct.PositionConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.RotationConstraint != null) {
        if (struct.isSetRotationConstraint()) {
          oprot.writeFieldBegin(ROTATION_CONSTRAINT_FIELD_DESC);
          struct.RotationConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MEndeffectorConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MEndeffectorConstraintTupleScheme getScheme() {
      return new MEndeffectorConstraintTupleScheme();
    }
  }

  private static class MEndeffectorConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MEndeffectorConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MEndeffectorConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.Type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPositionConstraint()) {
        optionals.set(0);
      }
      if (struct.isSetRotationConstraint()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPositionConstraint()) {
        struct.PositionConstraint.write(oprot);
      }
      if (struct.isSetRotationConstraint()) {
        struct.RotationConstraint.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MEndeffectorConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Type = MMIStandard.MEndeffectorType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.PositionConstraint = new MPositionConstraint();
        struct.PositionConstraint.read(iprot);
        struct.setPositionConstraintIsSet(true);
      }
      if (incoming.get(1)) {
        struct.RotationConstraint = new MRotationConstraint();
        struct.RotationConstraint.read(iprot);
        struct.setRotationConstraintIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

