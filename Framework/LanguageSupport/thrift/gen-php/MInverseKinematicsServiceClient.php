<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MInverseKinematicsServiceClient extends \MMIServiceBaseClient implements \MInverseKinematicsServiceIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }


    public function ComputeIK(\MAvatarPostureValues $postureValues, array $properties)
    {
        $this->send_ComputeIK($postureValues, $properties);
        return $this->recv_ComputeIK();
    }

    public function send_ComputeIK(\MAvatarPostureValues $postureValues, array $properties)
    {
        $args = new \MInverseKinematicsService_ComputeIK_args();
        $args->postureValues = $postureValues;
        $args->properties = $properties;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComputeIK',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComputeIK', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComputeIK()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MInverseKinematicsService_ComputeIK_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MInverseKinematicsService_ComputeIK_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComputeIK failed: unknown result");
    }

    public function CalculateIKPosture(\MAvatarPostureValues $postureValues, array $constraints, array $properties)
    {
        $this->send_CalculateIKPosture($postureValues, $constraints, $properties);
        return $this->recv_CalculateIKPosture();
    }

    public function send_CalculateIKPosture(\MAvatarPostureValues $postureValues, array $constraints, array $properties)
    {
        $args = new \MInverseKinematicsService_CalculateIKPosture_args();
        $args->postureValues = $postureValues;
        $args->constraints = $constraints;
        $args->properties = $properties;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CalculateIKPosture',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CalculateIKPosture', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CalculateIKPosture()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MInverseKinematicsService_CalculateIKPosture_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MInverseKinematicsService_CalculateIKPosture_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CalculateIKPosture failed: unknown result");
    }
}
