<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MSimulationState
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Initial',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        2 => array(
            'var' => 'Current',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        3 => array(
            'var' => 'Constraints',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MConstraint',
                ),
        ),
        4 => array(
            'var' => 'SceneManipulations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneManipulation',
                ),
        ),
        5 => array(
            'var' => 'Events',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSimulationEvent',
                ),
        ),
    );

    /**
     * @var \MAvatarPostureValues
     */
    public $Initial = null;
    /**
     * @var \MAvatarPostureValues
     */
    public $Current = null;
    /**
     * @var \MConstraint[]
     */
    public $Constraints = null;
    /**
     * @var \MSceneManipulation[]
     */
    public $SceneManipulations = null;
    /**
     * @var \MSimulationEvent[]
     */
    public $Events = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Initial'])) {
                $this->Initial = $vals['Initial'];
            }
            if (isset($vals['Current'])) {
                $this->Current = $vals['Current'];
            }
            if (isset($vals['Constraints'])) {
                $this->Constraints = $vals['Constraints'];
            }
            if (isset($vals['SceneManipulations'])) {
                $this->SceneManipulations = $vals['SceneManipulations'];
            }
            if (isset($vals['Events'])) {
                $this->Events = $vals['Events'];
            }
        }
    }

    public function getName()
    {
        return 'MSimulationState';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->Initial = new \MAvatarPostureValues();
                        $xfer += $this->Initial->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->Current = new \MAvatarPostureValues();
                        $xfer += $this->Current->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Constraints = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \MConstraint();
                            $xfer += $elem5->read($input);
                            $this->Constraints []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->SceneManipulations = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $elem11 = new \MSceneManipulation();
                            $xfer += $elem11->read($input);
                            $this->SceneManipulations []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->Events = array();
                        $_size12 = 0;
                        $_etype15 = 0;
                        $xfer += $input->readListBegin($_etype15, $_size12);
                        for ($_i16 = 0; $_i16 < $_size12; ++$_i16) {
                            $elem17 = null;
                            $elem17 = new \MSimulationEvent();
                            $xfer += $elem17->read($input);
                            $this->Events []= $elem17;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MSimulationState');
        if ($this->Initial !== null) {
            if (!is_object($this->Initial)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Initial', TType::STRUCT, 1);
            $xfer += $this->Initial->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Current !== null) {
            if (!is_object($this->Current)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Current', TType::STRUCT, 2);
            $xfer += $this->Current->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Constraints !== null) {
            if (!is_array($this->Constraints)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Constraints', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->Constraints));
            foreach ($this->Constraints as $iter18) {
                $xfer += $iter18->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SceneManipulations !== null) {
            if (!is_array($this->SceneManipulations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SceneManipulations', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->SceneManipulations));
            foreach ($this->SceneManipulations as $iter19) {
                $xfer += $iter19->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Events !== null) {
            if (!is_array($this->Events)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Events', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->Events));
            foreach ($this->Events as $iter20) {
                $xfer += $iter20->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
