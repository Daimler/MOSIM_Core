<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MJoint
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'Type',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'Position',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MVector3',
        ),
        4 => array(
            'var' => 'Rotation',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MQuaternion',
        ),
        5 => array(
            'var' => 'Channels',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        6 => array(
            'var' => 'Parent',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $ID = null;
    /**
     * @var int
     */
    public $Type = null;
    /**
     * @var \MVector3
     */
    public $Position = null;
    /**
     * @var \MQuaternion
     */
    public $Rotation = null;
    /**
     * @var int[]
     */
    public $Channels = null;
    /**
     * @var string
     */
    public $Parent = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['Type'])) {
                $this->Type = $vals['Type'];
            }
            if (isset($vals['Position'])) {
                $this->Position = $vals['Position'];
            }
            if (isset($vals['Rotation'])) {
                $this->Rotation = $vals['Rotation'];
            }
            if (isset($vals['Channels'])) {
                $this->Channels = $vals['Channels'];
            }
            if (isset($vals['Parent'])) {
                $this->Parent = $vals['Parent'];
            }
        }
    }

    public function getName()
    {
        return 'MJoint';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->Type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->Position = new \MVector3();
                        $xfer += $this->Position->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->Rotation = new \MQuaternion();
                        $xfer += $this->Rotation->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->Channels = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18) {
                            $elem19 = null;
                            $xfer += $input->readI32($elem19);
                            $this->Channels []= $elem19;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Parent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MJoint');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::STRING, 1);
            $xfer += $output->writeString($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Type !== null) {
            $xfer += $output->writeFieldBegin('Type', TType::I32, 2);
            $xfer += $output->writeI32($this->Type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Position !== null) {
            if (!is_object($this->Position)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Position', TType::STRUCT, 3);
            $xfer += $this->Position->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Rotation !== null) {
            if (!is_object($this->Rotation)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Rotation', TType::STRUCT, 4);
            $xfer += $this->Rotation->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Channels !== null) {
            if (!is_array($this->Channels)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Channels', TType::LST, 5);
            $output->writeListBegin(TType::I32, count($this->Channels));
            foreach ($this->Channels as $iter20) {
                $xfer += $output->writeI32($iter20);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Parent !== null) {
            $xfer += $output->writeFieldBegin('Parent', TType::STRING, 6);
            $xfer += $output->writeString($this->Parent);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
