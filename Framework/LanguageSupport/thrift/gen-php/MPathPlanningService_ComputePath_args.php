<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MPathPlanningService_ComputePath_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'start',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVector',
        ),
        2 => array(
            'var' => 'goal',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVector',
        ),
        3 => array(
            'var' => 'sceneObjects',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneObject',
                ),
        ),
        4 => array(
            'var' => 'properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \MVector
     */
    public $start = null;
    /**
     * @var \MVector
     */
    public $goal = null;
    /**
     * @var \MSceneObject[]
     */
    public $sceneObjects = null;
    /**
     * @var array
     */
    public $properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['start'])) {
                $this->start = $vals['start'];
            }
            if (isset($vals['goal'])) {
                $this->goal = $vals['goal'];
            }
            if (isset($vals['sceneObjects'])) {
                $this->sceneObjects = $vals['sceneObjects'];
            }
            if (isset($vals['properties'])) {
                $this->properties = $vals['properties'];
            }
        }
    }

    public function getName()
    {
        return 'MPathPlanningService_ComputePath_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->start = new \MVector();
                        $xfer += $this->start->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->goal = new \MVector();
                        $xfer += $this->goal->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->sceneObjects = array();
                        $_size241 = 0;
                        $_etype244 = 0;
                        $xfer += $input->readListBegin($_etype244, $_size241);
                        for ($_i245 = 0; $_i245 < $_size241; ++$_i245) {
                            $elem246 = null;
                            $elem246 = new \MSceneObject();
                            $xfer += $elem246->read($input);
                            $this->sceneObjects []= $elem246;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->properties = array();
                        $_size247 = 0;
                        $_ktype248 = 0;
                        $_vtype249 = 0;
                        $xfer += $input->readMapBegin($_ktype248, $_vtype249, $_size247);
                        for ($_i251 = 0; $_i251 < $_size247; ++$_i251) {
                            $key252 = '';
                            $val253 = '';
                            $xfer += $input->readString($key252);
                            $xfer += $input->readString($val253);
                            $this->properties[$key252] = $val253;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MPathPlanningService_ComputePath_args');
        if ($this->start !== null) {
            if (!is_object($this->start)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('start', TType::STRUCT, 1);
            $xfer += $this->start->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->goal !== null) {
            if (!is_object($this->goal)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('goal', TType::STRUCT, 2);
            $xfer += $this->goal->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sceneObjects !== null) {
            if (!is_array($this->sceneObjects)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sceneObjects', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->sceneObjects));
            foreach ($this->sceneObjects as $iter254) {
                $xfer += $iter254->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->properties !== null) {
            if (!is_array($this->properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('properties', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->properties));
            foreach ($this->properties as $kiter255 => $viter256) {
                $xfer += $output->writeString($kiter255);
                $xfer += $output->writeString($viter256);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
