<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MPhysicsProperties
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Mass',
            'isRequired' => true,
            'type' => TType::DOUBLE,
        ),
        2 => array(
            'var' => 'CenterOfMass',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        3 => array(
            'var' => 'Inertia',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        4 => array(
            'var' => 'Velocity',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        5 => array(
            'var' => 'AngularVelocity',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        6 => array(
            'var' => 'NetForce',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        7 => array(
            'var' => 'NetTorque',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        8 => array(
            'var' => 'Mu1',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        9 => array(
            'var' => 'Mu2',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        10 => array(
            'var' => 'Bounciness',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        11 => array(
            'var' => 'MuTorsion',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        12 => array(
            'var' => 'TorsionSurfaceRadius',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
    );

    /**
     * @var double
     */
    public $Mass = null;
    /**
     * @var double[]
     */
    public $CenterOfMass = null;
    /**
     * @var double[]
     */
    public $Inertia = null;
    /**
     * @var double[]
     */
    public $Velocity = null;
    /**
     * @var double[]
     */
    public $AngularVelocity = null;
    /**
     * @var double[]
     */
    public $NetForce = null;
    /**
     * @var double[]
     */
    public $NetTorque = null;
    /**
     * @var double
     */
    public $Mu1 = null;
    /**
     * @var double
     */
    public $Mu2 = null;
    /**
     * @var double
     */
    public $Bounciness = null;
    /**
     * @var double
     */
    public $MuTorsion = null;
    /**
     * @var double
     */
    public $TorsionSurfaceRadius = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Mass'])) {
                $this->Mass = $vals['Mass'];
            }
            if (isset($vals['CenterOfMass'])) {
                $this->CenterOfMass = $vals['CenterOfMass'];
            }
            if (isset($vals['Inertia'])) {
                $this->Inertia = $vals['Inertia'];
            }
            if (isset($vals['Velocity'])) {
                $this->Velocity = $vals['Velocity'];
            }
            if (isset($vals['AngularVelocity'])) {
                $this->AngularVelocity = $vals['AngularVelocity'];
            }
            if (isset($vals['NetForce'])) {
                $this->NetForce = $vals['NetForce'];
            }
            if (isset($vals['NetTorque'])) {
                $this->NetTorque = $vals['NetTorque'];
            }
            if (isset($vals['Mu1'])) {
                $this->Mu1 = $vals['Mu1'];
            }
            if (isset($vals['Mu2'])) {
                $this->Mu2 = $vals['Mu2'];
            }
            if (isset($vals['Bounciness'])) {
                $this->Bounciness = $vals['Bounciness'];
            }
            if (isset($vals['MuTorsion'])) {
                $this->MuTorsion = $vals['MuTorsion'];
            }
            if (isset($vals['TorsionSurfaceRadius'])) {
                $this->TorsionSurfaceRadius = $vals['TorsionSurfaceRadius'];
            }
        }
    }

    public function getName()
    {
        return 'MPhysicsProperties';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Mass);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->CenterOfMass = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18) {
                            $elem19 = null;
                            $xfer += $input->readDouble($elem19);
                            $this->CenterOfMass []= $elem19;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Inertia = array();
                        $_size20 = 0;
                        $_etype23 = 0;
                        $xfer += $input->readListBegin($_etype23, $_size20);
                        for ($_i24 = 0; $_i24 < $_size20; ++$_i24) {
                            $elem25 = null;
                            $xfer += $input->readDouble($elem25);
                            $this->Inertia []= $elem25;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->Velocity = array();
                        $_size26 = 0;
                        $_etype29 = 0;
                        $xfer += $input->readListBegin($_etype29, $_size26);
                        for ($_i30 = 0; $_i30 < $_size26; ++$_i30) {
                            $elem31 = null;
                            $xfer += $input->readDouble($elem31);
                            $this->Velocity []= $elem31;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->AngularVelocity = array();
                        $_size32 = 0;
                        $_etype35 = 0;
                        $xfer += $input->readListBegin($_etype35, $_size32);
                        for ($_i36 = 0; $_i36 < $_size32; ++$_i36) {
                            $elem37 = null;
                            $xfer += $input->readDouble($elem37);
                            $this->AngularVelocity []= $elem37;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->NetForce = array();
                        $_size38 = 0;
                        $_etype41 = 0;
                        $xfer += $input->readListBegin($_etype41, $_size38);
                        for ($_i42 = 0; $_i42 < $_size38; ++$_i42) {
                            $elem43 = null;
                            $xfer += $input->readDouble($elem43);
                            $this->NetForce []= $elem43;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->NetTorque = array();
                        $_size44 = 0;
                        $_etype47 = 0;
                        $xfer += $input->readListBegin($_etype47, $_size44);
                        for ($_i48 = 0; $_i48 < $_size44; ++$_i48) {
                            $elem49 = null;
                            $xfer += $input->readDouble($elem49);
                            $this->NetTorque []= $elem49;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Mu1);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Mu2);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Bounciness);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->MuTorsion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->TorsionSurfaceRadius);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MPhysicsProperties');
        if ($this->Mass !== null) {
            $xfer += $output->writeFieldBegin('Mass', TType::DOUBLE, 1);
            $xfer += $output->writeDouble($this->Mass);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CenterOfMass !== null) {
            if (!is_array($this->CenterOfMass)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CenterOfMass', TType::LST, 2);
            $output->writeListBegin(TType::DOUBLE, count($this->CenterOfMass));
            foreach ($this->CenterOfMass as $iter50) {
                $xfer += $output->writeDouble($iter50);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Inertia !== null) {
            if (!is_array($this->Inertia)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Inertia', TType::LST, 3);
            $output->writeListBegin(TType::DOUBLE, count($this->Inertia));
            foreach ($this->Inertia as $iter51) {
                $xfer += $output->writeDouble($iter51);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Velocity !== null) {
            if (!is_array($this->Velocity)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Velocity', TType::LST, 4);
            $output->writeListBegin(TType::DOUBLE, count($this->Velocity));
            foreach ($this->Velocity as $iter52) {
                $xfer += $output->writeDouble($iter52);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AngularVelocity !== null) {
            if (!is_array($this->AngularVelocity)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AngularVelocity', TType::LST, 5);
            $output->writeListBegin(TType::DOUBLE, count($this->AngularVelocity));
            foreach ($this->AngularVelocity as $iter53) {
                $xfer += $output->writeDouble($iter53);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->NetForce !== null) {
            if (!is_array($this->NetForce)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('NetForce', TType::LST, 6);
            $output->writeListBegin(TType::DOUBLE, count($this->NetForce));
            foreach ($this->NetForce as $iter54) {
                $xfer += $output->writeDouble($iter54);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->NetTorque !== null) {
            if (!is_array($this->NetTorque)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('NetTorque', TType::LST, 7);
            $output->writeListBegin(TType::DOUBLE, count($this->NetTorque));
            foreach ($this->NetTorque as $iter55) {
                $xfer += $output->writeDouble($iter55);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Mu1 !== null) {
            $xfer += $output->writeFieldBegin('Mu1', TType::DOUBLE, 8);
            $xfer += $output->writeDouble($this->Mu1);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Mu2 !== null) {
            $xfer += $output->writeFieldBegin('Mu2', TType::DOUBLE, 9);
            $xfer += $output->writeDouble($this->Mu2);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Bounciness !== null) {
            $xfer += $output->writeFieldBegin('Bounciness', TType::DOUBLE, 10);
            $xfer += $output->writeDouble($this->Bounciness);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MuTorsion !== null) {
            $xfer += $output->writeFieldBegin('MuTorsion', TType::DOUBLE, 11);
            $xfer += $output->writeDouble($this->MuTorsion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TorsionSurfaceRadius !== null) {
            $xfer += $output->writeFieldBegin('TorsionSurfaceRadius', TType::DOUBLE, 12);
            $xfer += $output->writeDouble($this->TorsionSurfaceRadius);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
