<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MExecutableDescription
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'ID',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Language',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'ExecutableName',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'Author',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'Version',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'Dependencies',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $Name = null;
    /**
     * @var string
     */
    public $ID = null;
    /**
     * @var string
     */
    public $Language = null;
    /**
     * @var string
     */
    public $ExecutableName = null;
    /**
     * @var string
     */
    public $Author = null;
    /**
     * @var string
     */
    public $Version = null;
    /**
     * @var string[]
     */
    public $Dependencies = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Name'])) {
                $this->Name = $vals['Name'];
            }
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['Language'])) {
                $this->Language = $vals['Language'];
            }
            if (isset($vals['ExecutableName'])) {
                $this->ExecutableName = $vals['ExecutableName'];
            }
            if (isset($vals['Author'])) {
                $this->Author = $vals['Author'];
            }
            if (isset($vals['Version'])) {
                $this->Version = $vals['Version'];
            }
            if (isset($vals['Dependencies'])) {
                $this->Dependencies = $vals['Dependencies'];
            }
        }
    }

    public function getName()
    {
        return 'MExecutableDescription';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ExecutableName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Author);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->Dependencies = array();
                        $_size7 = 0;
                        $_etype10 = 0;
                        $xfer += $input->readListBegin($_etype10, $_size7);
                        for ($_i11 = 0; $_i11 < $_size7; ++$_i11) {
                            $elem12 = null;
                            $xfer += $input->readString($elem12);
                            $this->Dependencies []= $elem12;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MExecutableDescription');
        if ($this->Name !== null) {
            $xfer += $output->writeFieldBegin('Name', TType::STRING, 1);
            $xfer += $output->writeString($this->Name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::STRING, 2);
            $xfer += $output->writeString($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Language !== null) {
            $xfer += $output->writeFieldBegin('Language', TType::STRING, 3);
            $xfer += $output->writeString($this->Language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ExecutableName !== null) {
            $xfer += $output->writeFieldBegin('ExecutableName', TType::STRING, 4);
            $xfer += $output->writeString($this->ExecutableName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Author !== null) {
            $xfer += $output->writeFieldBegin('Author', TType::STRING, 5);
            $xfer += $output->writeString($this->Author);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Version !== null) {
            $xfer += $output->writeFieldBegin('Version', TType::STRING, 6);
            $xfer += $output->writeString($this->Version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Dependencies !== null) {
            if (!is_array($this->Dependencies)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Dependencies', TType::LST, 7);
            $output->writeListBegin(TType::STRING, count($this->Dependencies));
            foreach ($this->Dependencies as $iter13) {
                $xfer += $output->writeString($iter13);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
