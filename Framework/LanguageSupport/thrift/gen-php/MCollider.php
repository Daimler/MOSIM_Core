<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MCollider
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'Type',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'BoxColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MBoxColliderProperties',
        ),
        4 => array(
            'var' => 'SphereColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MSphereColliderProperties',
        ),
        5 => array(
            'var' => 'CapsuleColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MCapsuleColliderProperties',
        ),
        6 => array(
            'var' => 'ConeColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MConeColliderProperties',
        ),
        7 => array(
            'var' => 'CylinderColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MCylinderColliderProperties',
        ),
        8 => array(
            'var' => 'MeshColliderProperties',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MMeshColliderProperties',
        ),
        9 => array(
            'var' => 'PositionOffset',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVector3',
        ),
        10 => array(
            'var' => 'RotationOffset',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MQuaternion',
        ),
        11 => array(
            'var' => 'Colliders',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MCollider',
                ),
        ),
        12 => array(
            'var' => 'Properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $ID = null;
    /**
     * @var int
     */
    public $Type = null;
    /**
     * @var \MBoxColliderProperties
     */
    public $BoxColliderProperties = null;
    /**
     * @var \MSphereColliderProperties
     */
    public $SphereColliderProperties = null;
    /**
     * @var \MCapsuleColliderProperties
     */
    public $CapsuleColliderProperties = null;
    /**
     * @var \MConeColliderProperties
     */
    public $ConeColliderProperties = null;
    /**
     * @var \MCylinderColliderProperties
     */
    public $CylinderColliderProperties = null;
    /**
     * @var \MMeshColliderProperties
     */
    public $MeshColliderProperties = null;
    /**
     * @var \MVector3
     */
    public $PositionOffset = null;
    /**
     * @var \MQuaternion
     */
    public $RotationOffset = null;
    /**
     * @var \MCollider[]
     */
    public $Colliders = null;
    /**
     * @var array
     */
    public $Properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['Type'])) {
                $this->Type = $vals['Type'];
            }
            if (isset($vals['BoxColliderProperties'])) {
                $this->BoxColliderProperties = $vals['BoxColliderProperties'];
            }
            if (isset($vals['SphereColliderProperties'])) {
                $this->SphereColliderProperties = $vals['SphereColliderProperties'];
            }
            if (isset($vals['CapsuleColliderProperties'])) {
                $this->CapsuleColliderProperties = $vals['CapsuleColliderProperties'];
            }
            if (isset($vals['ConeColliderProperties'])) {
                $this->ConeColliderProperties = $vals['ConeColliderProperties'];
            }
            if (isset($vals['CylinderColliderProperties'])) {
                $this->CylinderColliderProperties = $vals['CylinderColliderProperties'];
            }
            if (isset($vals['MeshColliderProperties'])) {
                $this->MeshColliderProperties = $vals['MeshColliderProperties'];
            }
            if (isset($vals['PositionOffset'])) {
                $this->PositionOffset = $vals['PositionOffset'];
            }
            if (isset($vals['RotationOffset'])) {
                $this->RotationOffset = $vals['RotationOffset'];
            }
            if (isset($vals['Colliders'])) {
                $this->Colliders = $vals['Colliders'];
            }
            if (isset($vals['Properties'])) {
                $this->Properties = $vals['Properties'];
            }
        }
    }

    public function getName()
    {
        return 'MCollider';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->Type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->BoxColliderProperties = new \MBoxColliderProperties();
                        $xfer += $this->BoxColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->SphereColliderProperties = new \MSphereColliderProperties();
                        $xfer += $this->SphereColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->CapsuleColliderProperties = new \MCapsuleColliderProperties();
                        $xfer += $this->CapsuleColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->ConeColliderProperties = new \MConeColliderProperties();
                        $xfer += $this->ConeColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->CylinderColliderProperties = new \MCylinderColliderProperties();
                        $xfer += $this->CylinderColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->MeshColliderProperties = new \MMeshColliderProperties();
                        $xfer += $this->MeshColliderProperties->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->PositionOffset = new \MVector3();
                        $xfer += $this->PositionOffset->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->RotationOffset = new \MQuaternion();
                        $xfer += $this->RotationOffset->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->Colliders = array();
                        $_size183 = 0;
                        $_etype186 = 0;
                        $xfer += $input->readListBegin($_etype186, $_size183);
                        for ($_i187 = 0; $_i187 < $_size183; ++$_i187) {
                            $elem188 = null;
                            $elem188 = new \MCollider();
                            $xfer += $elem188->read($input);
                            $this->Colliders []= $elem188;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::MAP) {
                        $this->Properties = array();
                        $_size189 = 0;
                        $_ktype190 = 0;
                        $_vtype191 = 0;
                        $xfer += $input->readMapBegin($_ktype190, $_vtype191, $_size189);
                        for ($_i193 = 0; $_i193 < $_size189; ++$_i193) {
                            $key194 = '';
                            $val195 = '';
                            $xfer += $input->readString($key194);
                            $xfer += $input->readString($val195);
                            $this->Properties[$key194] = $val195;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MCollider');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::STRING, 1);
            $xfer += $output->writeString($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Type !== null) {
            $xfer += $output->writeFieldBegin('Type', TType::I32, 2);
            $xfer += $output->writeI32($this->Type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BoxColliderProperties !== null) {
            if (!is_object($this->BoxColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BoxColliderProperties', TType::STRUCT, 3);
            $xfer += $this->BoxColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SphereColliderProperties !== null) {
            if (!is_object($this->SphereColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SphereColliderProperties', TType::STRUCT, 4);
            $xfer += $this->SphereColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CapsuleColliderProperties !== null) {
            if (!is_object($this->CapsuleColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CapsuleColliderProperties', TType::STRUCT, 5);
            $xfer += $this->CapsuleColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ConeColliderProperties !== null) {
            if (!is_object($this->ConeColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ConeColliderProperties', TType::STRUCT, 6);
            $xfer += $this->ConeColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CylinderColliderProperties !== null) {
            if (!is_object($this->CylinderColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CylinderColliderProperties', TType::STRUCT, 7);
            $xfer += $this->CylinderColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MeshColliderProperties !== null) {
            if (!is_object($this->MeshColliderProperties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MeshColliderProperties', TType::STRUCT, 8);
            $xfer += $this->MeshColliderProperties->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PositionOffset !== null) {
            if (!is_object($this->PositionOffset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PositionOffset', TType::STRUCT, 9);
            $xfer += $this->PositionOffset->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RotationOffset !== null) {
            if (!is_object($this->RotationOffset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RotationOffset', TType::STRUCT, 10);
            $xfer += $this->RotationOffset->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Colliders !== null) {
            if (!is_array($this->Colliders)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Colliders', TType::LST, 11);
            $output->writeListBegin(TType::STRUCT, count($this->Colliders));
            foreach ($this->Colliders as $iter196) {
                $xfer += $iter196->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Properties !== null) {
            if (!is_array($this->Properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Properties', TType::MAP, 12);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->Properties));
            foreach ($this->Properties as $kiter197 => $viter198) {
                $xfer += $output->writeString($kiter197);
                $xfer += $output->writeString($viter198);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
