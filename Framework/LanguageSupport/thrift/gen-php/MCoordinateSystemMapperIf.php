<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface MCoordinateSystemMapperIf extends \MMIServiceBaseIf
{
    /**
     * @param \MTransform $transform
     * @param int[] $coordinateSystem
     * @return \MTransform
     */
    public function TransformToMMI_L(\MTransform $transform, array $coordinateSystem);
    /**
     * @param \MTransform $transform
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MTransform
     */
    public function TransformToMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis);
    /**
     * @param \MTransform $transform
     * @param int[] $coordinateSystem
     * @return \MTransform
     */
    public function TransformFromMMI_L(\MTransform $transform, array $coordinateSystem);
    /**
     * @param \MTransform $transform
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MTransform
     */
    public function TransformFromMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis);
    /**
     * @param \MQuaternion $quat
     * @param int[] $coordinateSystem
     * @return \MQuaternion
     */
    public function QuaternionToMMI_L(\MQuaternion $quat, array $coordinateSystem);
    /**
     * @param \MQuaternion $quat
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MQuaternion
     */
    public function QuaternionToMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis);
    /**
     * @param \MQuaternion $quat
     * @param int[] $coordinateSystem
     * @return \MQuaternion
     */
    public function QuaternionFromMMI_L(\MQuaternion $quat, array $coordinateSystem);
    /**
     * @param \MQuaternion $quat
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MQuaternion
     */
    public function QuaternionFromMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis);
    /**
     * @param \MVector3 $quat
     * @param int[] $coordinateSystem
     * @return \MVector3
     */
    public function VectorToMMI_L(\MVector3 $quat, array $coordinateSystem);
    /**
     * @param \MVector3 $quat
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MVector3
     */
    public function VectorToMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis);
    /**
     * @param \MVector3 $quat
     * @param int[] $coordinateSystem
     * @return \MVector3
     */
    public function VectorFromMMI_L(\MVector3 $quat, array $coordinateSystem);
    /**
     * @param \MVector3 $quat
     * @param int $firstAxis
     * @param int $secondAxis
     * @param int $thirdAxis
     * @return \MVector3
     */
    public function VectorFromMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis);
}
