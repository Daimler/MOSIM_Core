<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MSceneManipulation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Transforms',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MTransformManipulation',
                ),
        ),
        2 => array(
            'var' => 'PhysicsInteractions',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MPhysicsInteraction',
                ),
        ),
        3 => array(
            'var' => 'Properties',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MPropertyManipulation',
                ),
        ),
        4 => array(
            'var' => 'Attachments',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MAttachmentManipulation',
                ),
        ),
    );

    /**
     * @var \MTransformManipulation[]
     */
    public $Transforms = null;
    /**
     * @var \MPhysicsInteraction[]
     */
    public $PhysicsInteractions = null;
    /**
     * @var \MPropertyManipulation[]
     */
    public $Properties = null;
    /**
     * @var \MAttachmentManipulation[]
     */
    public $Attachments = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Transforms'])) {
                $this->Transforms = $vals['Transforms'];
            }
            if (isset($vals['PhysicsInteractions'])) {
                $this->PhysicsInteractions = $vals['PhysicsInteractions'];
            }
            if (isset($vals['Properties'])) {
                $this->Properties = $vals['Properties'];
            }
            if (isset($vals['Attachments'])) {
                $this->Attachments = $vals['Attachments'];
            }
        }
    }

    public function getName()
    {
        return 'MSceneManipulation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->Transforms = array();
                        $_size155 = 0;
                        $_etype158 = 0;
                        $xfer += $input->readListBegin($_etype158, $_size155);
                        for ($_i159 = 0; $_i159 < $_size155; ++$_i159) {
                            $elem160 = null;
                            $elem160 = new \MTransformManipulation();
                            $xfer += $elem160->read($input);
                            $this->Transforms []= $elem160;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->PhysicsInteractions = array();
                        $_size161 = 0;
                        $_etype164 = 0;
                        $xfer += $input->readListBegin($_etype164, $_size161);
                        for ($_i165 = 0; $_i165 < $_size161; ++$_i165) {
                            $elem166 = null;
                            $elem166 = new \MPhysicsInteraction();
                            $xfer += $elem166->read($input);
                            $this->PhysicsInteractions []= $elem166;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Properties = array();
                        $_size167 = 0;
                        $_etype170 = 0;
                        $xfer += $input->readListBegin($_etype170, $_size167);
                        for ($_i171 = 0; $_i171 < $_size167; ++$_i171) {
                            $elem172 = null;
                            $elem172 = new \MPropertyManipulation();
                            $xfer += $elem172->read($input);
                            $this->Properties []= $elem172;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->Attachments = array();
                        $_size173 = 0;
                        $_etype176 = 0;
                        $xfer += $input->readListBegin($_etype176, $_size173);
                        for ($_i177 = 0; $_i177 < $_size173; ++$_i177) {
                            $elem178 = null;
                            $elem178 = new \MAttachmentManipulation();
                            $xfer += $elem178->read($input);
                            $this->Attachments []= $elem178;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MSceneManipulation');
        if ($this->Transforms !== null) {
            if (!is_array($this->Transforms)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Transforms', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->Transforms));
            foreach ($this->Transforms as $iter179) {
                $xfer += $iter179->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PhysicsInteractions !== null) {
            if (!is_array($this->PhysicsInteractions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PhysicsInteractions', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->PhysicsInteractions));
            foreach ($this->PhysicsInteractions as $iter180) {
                $xfer += $iter180->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Properties !== null) {
            if (!is_array($this->Properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Properties', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->Properties));
            foreach ($this->Properties as $iter181) {
                $xfer += $iter181->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Attachments !== null) {
            if (!is_array($this->Attachments)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Attachments', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->Attachments));
            foreach ($this->Attachments as $iter182) {
                $xfer += $iter182->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
