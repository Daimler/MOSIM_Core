<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface MSkeletonAccessIf extends \MMIServiceBaseIf
{
    /**
     * @param \MAvatarDescription $description
     */
    public function InitializeAnthropometry(\MAvatarDescription $description);
    /**
     * @param string $avatarID
     * @return \MAvatarDescription
     */
    public function GetAvatarDescription($avatarID);
    /**
     * @param string $avatarID
     * @param int[] $joints
     */
    public function SetAnimatedJoints($avatarID, array $joints);
    /**
     * @param \MAvatarPostureValues $values
     */
    public function SetChannelData(\MAvatarPostureValues $values);
    /**
     * @param string $avatarID
     * @return \MAvatarPosture
     */
    public function GetCurrentGlobalPosture($avatarID);
    /**
     * @param string $avatarID
     * @return \MAvatarPosture
     */
    public function GetCurrentLocalPosture($avatarID);
    /**
     * @param string $avatarID
     * @return \MAvatarPostureValues
     */
    public function GetCurrentPostureValues($avatarID);
    /**
     * @param string $avatarID
     * @param int[] $joints
     * @return \MAvatarPostureValues
     */
    public function GetCurrentPostureValuesPartial($avatarID, array $joints);
    /**
     * @param string $avatarID
     * @return \MVector3[]
     */
    public function GetCurrentJointPositions($avatarID);
    /**
     * @param string $avatarID
     * @return \MVector3
     */
    public function GetRootPosition($avatarID);
    /**
     * @param string $avatarID
     * @return \MQuaternion
     */
    public function GetRootRotation($avatarID);
    /**
     * @param string $avatarId
     * @param int $joint
     * @return \MVector3
     */
    public function GetGlobalJointPosition($avatarId, $joint);
    /**
     * @param string $avatarId
     * @param int $joint
     * @return \MQuaternion
     */
    public function GetGlobalJointRotation($avatarId, $joint);
    /**
     * @param string $avatarId
     * @param int $joint
     * @return \MVector3
     */
    public function GetLocalJointPosition($avatarId, $joint);
    /**
     * @param string $avatarId
     * @param int $joint
     * @return \MQuaternion
     */
    public function GetLocalJointRotation($avatarId, $joint);
    /**
     * @param string $avatarId
     * @param \MVector3 $position
     */
    public function SetRootPosition($avatarId, \MVector3 $position);
    /**
     * @param string $avatarId
     * @param \MQuaternion $rotation
     */
    public function SetRootRotation($avatarId, \MQuaternion $rotation);
    /**
     * @param string $avatarId
     * @param int $joint
     * @param \MVector3 $position
     */
    public function SetGlobalJointPosition($avatarId, $joint, \MVector3 $position);
    /**
     * @param string $avatarId
     * @param int $joint
     * @param \MQuaternion $rotation
     */
    public function SetGlobalJointRotation($avatarId, $joint, \MQuaternion $rotation);
    /**
     * @param string $avatarId
     * @param int $joint
     * @param \MVector3 $position
     */
    public function SetLocalJointPosition($avatarId, $joint, \MVector3 $position);
    /**
     * @param string $avatarId
     * @param int $joint
     * @param \MQuaternion $rotation
     */
    public function SetLocalJointRotation($avatarId, $joint, \MQuaternion $rotation);
    /**
     * @param string $avatarId
     * @return \MAvatarPostureValues
     */
    public function RecomputeCurrentPostureValues($avatarId);
}
