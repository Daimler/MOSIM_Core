<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MCollisionDetectionServiceClient extends \MMIServiceBaseClient implements \MCollisionDetectionServiceIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }


    public function ComputePenetration(\MCollider $colliderA, \MTransform $transformA, \MCollider $colliderB, \MTransform $transformB)
    {
        $this->send_ComputePenetration($colliderA, $transformA, $colliderB, $transformB);
        return $this->recv_ComputePenetration();
    }

    public function send_ComputePenetration(\MCollider $colliderA, \MTransform $transformA, \MCollider $colliderB, \MTransform $transformB)
    {
        $args = new \MCollisionDetectionService_ComputePenetration_args();
        $args->colliderA = $colliderA;
        $args->transformA = $transformA;
        $args->colliderB = $colliderB;
        $args->transformB = $transformB;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComputePenetration',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComputePenetration', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComputePenetration()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCollisionDetectionService_ComputePenetration_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCollisionDetectionService_ComputePenetration_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComputePenetration failed: unknown result");
    }

    public function CausesCollision(\MCollider $colliderA, \MTransform $transformA, \MCollider $colliderB, \MTransform $transformB)
    {
        $this->send_CausesCollision($colliderA, $transformA, $colliderB, $transformB);
        return $this->recv_CausesCollision();
    }

    public function send_CausesCollision(\MCollider $colliderA, \MTransform $transformA, \MCollider $colliderB, \MTransform $transformB)
    {
        $args = new \MCollisionDetectionService_CausesCollision_args();
        $args->colliderA = $colliderA;
        $args->transformA = $transformA;
        $args->colliderB = $colliderB;
        $args->transformB = $transformB;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CausesCollision',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CausesCollision', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CausesCollision()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCollisionDetectionService_CausesCollision_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCollisionDetectionService_CausesCollision_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CausesCollision failed: unknown result");
    }
}
