<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MCollisionDetectionService_ComputePenetration_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'colliderA',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MCollider',
        ),
        2 => array(
            'var' => 'transformA',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MTransform',
        ),
        3 => array(
            'var' => 'colliderB',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MCollider',
        ),
        4 => array(
            'var' => 'transformB',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MTransform',
        ),
    );

    /**
     * @var \MCollider
     */
    public $colliderA = null;
    /**
     * @var \MTransform
     */
    public $transformA = null;
    /**
     * @var \MCollider
     */
    public $colliderB = null;
    /**
     * @var \MTransform
     */
    public $transformB = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['colliderA'])) {
                $this->colliderA = $vals['colliderA'];
            }
            if (isset($vals['transformA'])) {
                $this->transformA = $vals['transformA'];
            }
            if (isset($vals['colliderB'])) {
                $this->colliderB = $vals['colliderB'];
            }
            if (isset($vals['transformB'])) {
                $this->transformB = $vals['transformB'];
            }
        }
    }

    public function getName()
    {
        return 'MCollisionDetectionService_ComputePenetration_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->colliderA = new \MCollider();
                        $xfer += $this->colliderA->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->transformA = new \MTransform();
                        $xfer += $this->transformA->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->colliderB = new \MCollider();
                        $xfer += $this->colliderB->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->transformB = new \MTransform();
                        $xfer += $this->transformB->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MCollisionDetectionService_ComputePenetration_args');
        if ($this->colliderA !== null) {
            if (!is_object($this->colliderA)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('colliderA', TType::STRUCT, 1);
            $xfer += $this->colliderA->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->transformA !== null) {
            if (!is_object($this->transformA)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('transformA', TType::STRUCT, 2);
            $xfer += $this->transformA->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->colliderB !== null) {
            if (!is_object($this->colliderB)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('colliderB', TType::STRUCT, 3);
            $xfer += $this->colliderB->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->transformB !== null) {
            if (!is_object($this->transformB)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('transformB', TType::STRUCT, 4);
            $xfer += $this->transformB->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
