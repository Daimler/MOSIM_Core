<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MPathPlanningService_ComputePathDirection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'current',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVector',
        ),
        2 => array(
            'var' => 'goal',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVector',
        ),
        3 => array(
            'var' => 'sceneObject',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneObject',
                ),
        ),
        4 => array(
            'var' => 'properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \MVector
     */
    public $current = null;
    /**
     * @var \MVector
     */
    public $goal = null;
    /**
     * @var \MSceneObject[]
     */
    public $sceneObject = null;
    /**
     * @var array
     */
    public $properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['current'])) {
                $this->current = $vals['current'];
            }
            if (isset($vals['goal'])) {
                $this->goal = $vals['goal'];
            }
            if (isset($vals['sceneObject'])) {
                $this->sceneObject = $vals['sceneObject'];
            }
            if (isset($vals['properties'])) {
                $this->properties = $vals['properties'];
            }
        }
    }

    public function getName()
    {
        return 'MPathPlanningService_ComputePathDirection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->current = new \MVector();
                        $xfer += $this->current->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->goal = new \MVector();
                        $xfer += $this->goal->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->sceneObject = array();
                        $_size257 = 0;
                        $_etype260 = 0;
                        $xfer += $input->readListBegin($_etype260, $_size257);
                        for ($_i261 = 0; $_i261 < $_size257; ++$_i261) {
                            $elem262 = null;
                            $elem262 = new \MSceneObject();
                            $xfer += $elem262->read($input);
                            $this->sceneObject []= $elem262;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->properties = array();
                        $_size263 = 0;
                        $_ktype264 = 0;
                        $_vtype265 = 0;
                        $xfer += $input->readMapBegin($_ktype264, $_vtype265, $_size263);
                        for ($_i267 = 0; $_i267 < $_size263; ++$_i267) {
                            $key268 = '';
                            $val269 = '';
                            $xfer += $input->readString($key268);
                            $xfer += $input->readString($val269);
                            $this->properties[$key268] = $val269;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MPathPlanningService_ComputePathDirection_args');
        if ($this->current !== null) {
            if (!is_object($this->current)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('current', TType::STRUCT, 1);
            $xfer += $this->current->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->goal !== null) {
            if (!is_object($this->goal)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('goal', TType::STRUCT, 2);
            $xfer += $this->goal->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sceneObject !== null) {
            if (!is_array($this->sceneObject)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sceneObject', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->sceneObject));
            foreach ($this->sceneObject as $iter270) {
                $xfer += $iter270->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->properties !== null) {
            if (!is_array($this->properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('properties', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->properties));
            foreach ($this->properties as $kiter271 => $viter272) {
                $xfer += $output->writeString($kiter271);
                $xfer += $output->writeString($viter272);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
