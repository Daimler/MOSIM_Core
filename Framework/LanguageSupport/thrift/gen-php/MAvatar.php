<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MAvatar
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'Name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Description',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MAvatarDescription',
        ),
        4 => array(
            'var' => 'PostureValues',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        5 => array(
            'var' => 'SceneObjects',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'Properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $ID = null;
    /**
     * @var string
     */
    public $Name = null;
    /**
     * @var \MAvatarDescription
     */
    public $Description = null;
    /**
     * @var \MAvatarPostureValues
     */
    public $PostureValues = null;
    /**
     * @var string[]
     */
    public $SceneObjects = null;
    /**
     * @var array
     */
    public $Properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['Name'])) {
                $this->Name = $vals['Name'];
            }
            if (isset($vals['Description'])) {
                $this->Description = $vals['Description'];
            }
            if (isset($vals['PostureValues'])) {
                $this->PostureValues = $vals['PostureValues'];
            }
            if (isset($vals['SceneObjects'])) {
                $this->SceneObjects = $vals['SceneObjects'];
            }
            if (isset($vals['Properties'])) {
                $this->Properties = $vals['Properties'];
            }
        }
    }

    public function getName()
    {
        return 'MAvatar';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->Description = new \MAvatarDescription();
                        $xfer += $this->Description->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->PostureValues = new \MAvatarPostureValues();
                        $xfer += $this->PostureValues->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->SceneObjects = array();
                        $_size53 = 0;
                        $_etype56 = 0;
                        $xfer += $input->readListBegin($_etype56, $_size53);
                        for ($_i57 = 0; $_i57 < $_size53; ++$_i57) {
                            $elem58 = null;
                            $xfer += $input->readString($elem58);
                            $this->SceneObjects []= $elem58;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::MAP) {
                        $this->Properties = array();
                        $_size59 = 0;
                        $_ktype60 = 0;
                        $_vtype61 = 0;
                        $xfer += $input->readMapBegin($_ktype60, $_vtype61, $_size59);
                        for ($_i63 = 0; $_i63 < $_size59; ++$_i63) {
                            $key64 = '';
                            $val65 = '';
                            $xfer += $input->readString($key64);
                            $xfer += $input->readString($val65);
                            $this->Properties[$key64] = $val65;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MAvatar');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::STRING, 1);
            $xfer += $output->writeString($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Name !== null) {
            $xfer += $output->writeFieldBegin('Name', TType::STRING, 2);
            $xfer += $output->writeString($this->Name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Description !== null) {
            if (!is_object($this->Description)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Description', TType::STRUCT, 3);
            $xfer += $this->Description->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PostureValues !== null) {
            if (!is_object($this->PostureValues)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PostureValues', TType::STRUCT, 4);
            $xfer += $this->PostureValues->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SceneObjects !== null) {
            if (!is_array($this->SceneObjects)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SceneObjects', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->SceneObjects));
            foreach ($this->SceneObjects as $iter66) {
                $xfer += $output->writeString($iter66);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Properties !== null) {
            if (!is_array($this->Properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Properties', TType::MAP, 6);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->Properties));
            foreach ($this->Properties as $kiter67 => $viter68) {
                $xfer += $output->writeString($kiter67);
                $xfer += $output->writeString($viter68);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
