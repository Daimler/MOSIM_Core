<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MCoordinateSystemMapperClient extends \MMIServiceBaseClient implements \MCoordinateSystemMapperIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }


    public function TransformToMMI_L(\MTransform $transform, array $coordinateSystem)
    {
        $this->send_TransformToMMI_L($transform, $coordinateSystem);
        return $this->recv_TransformToMMI_L();
    }

    public function send_TransformToMMI_L(\MTransform $transform, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_TransformToMMI_L_args();
        $args->transform = $transform;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'TransformToMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('TransformToMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_TransformToMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_TransformToMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_TransformToMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("TransformToMMI_L failed: unknown result");
    }

    public function TransformToMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_TransformToMMI($transform, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_TransformToMMI();
    }

    public function send_TransformToMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_TransformToMMI_args();
        $args->transform = $transform;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'TransformToMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('TransformToMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_TransformToMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_TransformToMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_TransformToMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("TransformToMMI failed: unknown result");
    }

    public function TransformFromMMI_L(\MTransform $transform, array $coordinateSystem)
    {
        $this->send_TransformFromMMI_L($transform, $coordinateSystem);
        return $this->recv_TransformFromMMI_L();
    }

    public function send_TransformFromMMI_L(\MTransform $transform, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_TransformFromMMI_L_args();
        $args->transform = $transform;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'TransformFromMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('TransformFromMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_TransformFromMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_TransformFromMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_TransformFromMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("TransformFromMMI_L failed: unknown result");
    }

    public function TransformFromMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_TransformFromMMI($transform, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_TransformFromMMI();
    }

    public function send_TransformFromMMI(\MTransform $transform, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_TransformFromMMI_args();
        $args->transform = $transform;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'TransformFromMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('TransformFromMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_TransformFromMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_TransformFromMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_TransformFromMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("TransformFromMMI failed: unknown result");
    }

    public function QuaternionToMMI_L(\MQuaternion $quat, array $coordinateSystem)
    {
        $this->send_QuaternionToMMI_L($quat, $coordinateSystem);
        return $this->recv_QuaternionToMMI_L();
    }

    public function send_QuaternionToMMI_L(\MQuaternion $quat, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_QuaternionToMMI_L_args();
        $args->quat = $quat;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QuaternionToMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QuaternionToMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QuaternionToMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_QuaternionToMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_QuaternionToMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QuaternionToMMI_L failed: unknown result");
    }

    public function QuaternionToMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_QuaternionToMMI($quat, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_QuaternionToMMI();
    }

    public function send_QuaternionToMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_QuaternionToMMI_args();
        $args->quat = $quat;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QuaternionToMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QuaternionToMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QuaternionToMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_QuaternionToMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_QuaternionToMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QuaternionToMMI failed: unknown result");
    }

    public function QuaternionFromMMI_L(\MQuaternion $quat, array $coordinateSystem)
    {
        $this->send_QuaternionFromMMI_L($quat, $coordinateSystem);
        return $this->recv_QuaternionFromMMI_L();
    }

    public function send_QuaternionFromMMI_L(\MQuaternion $quat, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_QuaternionFromMMI_L_args();
        $args->quat = $quat;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QuaternionFromMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QuaternionFromMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QuaternionFromMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_QuaternionFromMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_QuaternionFromMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QuaternionFromMMI_L failed: unknown result");
    }

    public function QuaternionFromMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_QuaternionFromMMI($quat, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_QuaternionFromMMI();
    }

    public function send_QuaternionFromMMI(\MQuaternion $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_QuaternionFromMMI_args();
        $args->quat = $quat;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QuaternionFromMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QuaternionFromMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QuaternionFromMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_QuaternionFromMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_QuaternionFromMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QuaternionFromMMI failed: unknown result");
    }

    public function VectorToMMI_L(\MVector3 $quat, array $coordinateSystem)
    {
        $this->send_VectorToMMI_L($quat, $coordinateSystem);
        return $this->recv_VectorToMMI_L();
    }

    public function send_VectorToMMI_L(\MVector3 $quat, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_VectorToMMI_L_args();
        $args->quat = $quat;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'VectorToMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('VectorToMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_VectorToMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_VectorToMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_VectorToMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("VectorToMMI_L failed: unknown result");
    }

    public function VectorToMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_VectorToMMI($quat, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_VectorToMMI();
    }

    public function send_VectorToMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_VectorToMMI_args();
        $args->quat = $quat;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'VectorToMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('VectorToMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_VectorToMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_VectorToMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_VectorToMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("VectorToMMI failed: unknown result");
    }

    public function VectorFromMMI_L(\MVector3 $quat, array $coordinateSystem)
    {
        $this->send_VectorFromMMI_L($quat, $coordinateSystem);
        return $this->recv_VectorFromMMI_L();
    }

    public function send_VectorFromMMI_L(\MVector3 $quat, array $coordinateSystem)
    {
        $args = new \MCoordinateSystemMapper_VectorFromMMI_L_args();
        $args->quat = $quat;
        $args->coordinateSystem = $coordinateSystem;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'VectorFromMMI_L',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('VectorFromMMI_L', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_VectorFromMMI_L()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_VectorFromMMI_L_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_VectorFromMMI_L_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("VectorFromMMI_L failed: unknown result");
    }

    public function VectorFromMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $this->send_VectorFromMMI($quat, $firstAxis, $secondAxis, $thirdAxis);
        return $this->recv_VectorFromMMI();
    }

    public function send_VectorFromMMI(\MVector3 $quat, $firstAxis, $secondAxis, $thirdAxis)
    {
        $args = new \MCoordinateSystemMapper_VectorFromMMI_args();
        $args->quat = $quat;
        $args->firstAxis = $firstAxis;
        $args->secondAxis = $secondAxis;
        $args->thirdAxis = $thirdAxis;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'VectorFromMMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('VectorFromMMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_VectorFromMMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MCoordinateSystemMapper_VectorFromMMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MCoordinateSystemMapper_VectorFromMMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("VectorFromMMI failed: unknown result");
    }
}
