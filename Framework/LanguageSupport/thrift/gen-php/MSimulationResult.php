<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MSimulationResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Posture',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        2 => array(
            'var' => 'Constraints',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MConstraint',
                ),
        ),
        3 => array(
            'var' => 'Events',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSimulationEvent',
                ),
        ),
        4 => array(
            'var' => 'SceneManipulations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneManipulation',
                ),
        ),
        5 => array(
            'var' => 'DrawingCalls',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MDrawingCall',
                ),
        ),
        6 => array(
            'var' => 'LogData',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \MAvatarPostureValues
     */
    public $Posture = null;
    /**
     * @var \MConstraint[]
     */
    public $Constraints = null;
    /**
     * @var \MSimulationEvent[]
     */
    public $Events = null;
    /**
     * @var \MSceneManipulation[]
     */
    public $SceneManipulations = null;
    /**
     * @var \MDrawingCall[]
     */
    public $DrawingCalls = null;
    /**
     * @var string[]
     */
    public $LogData = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Posture'])) {
                $this->Posture = $vals['Posture'];
            }
            if (isset($vals['Constraints'])) {
                $this->Constraints = $vals['Constraints'];
            }
            if (isset($vals['Events'])) {
                $this->Events = $vals['Events'];
            }
            if (isset($vals['SceneManipulations'])) {
                $this->SceneManipulations = $vals['SceneManipulations'];
            }
            if (isset($vals['DrawingCalls'])) {
                $this->DrawingCalls = $vals['DrawingCalls'];
            }
            if (isset($vals['LogData'])) {
                $this->LogData = $vals['LogData'];
            }
        }
    }

    public function getName()
    {
        return 'MSimulationResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->Posture = new \MAvatarPostureValues();
                        $xfer += $this->Posture->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->Constraints = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $elem26 = null;
                            $elem26 = new \MConstraint();
                            $xfer += $elem26->read($input);
                            $this->Constraints []= $elem26;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Events = array();
                        $_size27 = 0;
                        $_etype30 = 0;
                        $xfer += $input->readListBegin($_etype30, $_size27);
                        for ($_i31 = 0; $_i31 < $_size27; ++$_i31) {
                            $elem32 = null;
                            $elem32 = new \MSimulationEvent();
                            $xfer += $elem32->read($input);
                            $this->Events []= $elem32;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->SceneManipulations = array();
                        $_size33 = 0;
                        $_etype36 = 0;
                        $xfer += $input->readListBegin($_etype36, $_size33);
                        for ($_i37 = 0; $_i37 < $_size33; ++$_i37) {
                            $elem38 = null;
                            $elem38 = new \MSceneManipulation();
                            $xfer += $elem38->read($input);
                            $this->SceneManipulations []= $elem38;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->DrawingCalls = array();
                        $_size39 = 0;
                        $_etype42 = 0;
                        $xfer += $input->readListBegin($_etype42, $_size39);
                        for ($_i43 = 0; $_i43 < $_size39; ++$_i43) {
                            $elem44 = null;
                            $elem44 = new \MDrawingCall();
                            $xfer += $elem44->read($input);
                            $this->DrawingCalls []= $elem44;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->LogData = array();
                        $_size45 = 0;
                        $_etype48 = 0;
                        $xfer += $input->readListBegin($_etype48, $_size45);
                        for ($_i49 = 0; $_i49 < $_size45; ++$_i49) {
                            $elem50 = null;
                            $xfer += $input->readString($elem50);
                            $this->LogData []= $elem50;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MSimulationResult');
        if ($this->Posture !== null) {
            if (!is_object($this->Posture)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Posture', TType::STRUCT, 1);
            $xfer += $this->Posture->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Constraints !== null) {
            if (!is_array($this->Constraints)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Constraints', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->Constraints));
            foreach ($this->Constraints as $iter51) {
                $xfer += $iter51->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Events !== null) {
            if (!is_array($this->Events)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Events', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->Events));
            foreach ($this->Events as $iter52) {
                $xfer += $iter52->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SceneManipulations !== null) {
            if (!is_array($this->SceneManipulations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SceneManipulations', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->SceneManipulations));
            foreach ($this->SceneManipulations as $iter53) {
                $xfer += $iter53->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DrawingCalls !== null) {
            if (!is_array($this->DrawingCalls)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('DrawingCalls', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->DrawingCalls));
            foreach ($this->DrawingCalls as $iter54) {
                $xfer += $iter54->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->LogData !== null) {
            if (!is_array($this->LogData)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('LogData', TType::LST, 6);
            $output->writeListBegin(TType::STRING, count($this->LogData));
            foreach ($this->LogData as $iter55) {
                $xfer += $output->writeString($iter55);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
