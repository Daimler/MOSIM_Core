<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MPostureBlendingServiceClient extends \MMIServiceBaseClient implements \MPostureBlendingServiceIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }


    public function Blend(\MAvatarPostureValues $startPosture, \MAvatarPostureValues $targetPosture, $weight, array $mask, array $properties)
    {
        $this->send_Blend($startPosture, $targetPosture, $weight, $mask, $properties);
        return $this->recv_Blend();
    }

    public function send_Blend(\MAvatarPostureValues $startPosture, \MAvatarPostureValues $targetPosture, $weight, array $mask, array $properties)
    {
        $args = new \MPostureBlendingService_Blend_args();
        $args->startPosture = $startPosture;
        $args->targetPosture = $targetPosture;
        $args->weight = $weight;
        $args->mask = $mask;
        $args->properties = $properties;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Blend',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Blend', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Blend()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MPostureBlendingService_Blend_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MPostureBlendingService_Blend_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Blend failed: unknown result");
    }

    public function BlendMany(\MAvatarPostureValues $startPosture, \MAvatarPostureValues $targetPosture, array $weights, array $mask, array $properties)
    {
        $this->send_BlendMany($startPosture, $targetPosture, $weights, $mask, $properties);
        return $this->recv_BlendMany();
    }

    public function send_BlendMany(\MAvatarPostureValues $startPosture, \MAvatarPostureValues $targetPosture, array $weights, array $mask, array $properties)
    {
        $args = new \MPostureBlendingService_BlendMany_args();
        $args->startPosture = $startPosture;
        $args->targetPosture = $targetPosture;
        $args->weights = $weights;
        $args->mask = $mask;
        $args->properties = $properties;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BlendMany',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BlendMany', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BlendMany()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\MPostureBlendingService_BlendMany_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \MPostureBlendingService_BlendMany_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BlendMany failed: unknown result");
    }
}
