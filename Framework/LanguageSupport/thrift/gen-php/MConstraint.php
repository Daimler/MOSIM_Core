<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MConstraint
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'GeometryConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MGeometryConstraint',
        ),
        3 => array(
            'var' => 'VelocityConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MVelocityConstraint',
        ),
        4 => array(
            'var' => 'AccelerationConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MAccelerationConstraint',
        ),
        5 => array(
            'var' => 'PathConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MPathConstraint',
        ),
        6 => array(
            'var' => 'JointPathConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MJointPathConstraint',
        ),
        7 => array(
            'var' => 'PostureConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MPostureConstraint',
        ),
        8 => array(
            'var' => 'JointConstraint',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MJointConstraint',
        ),
        9 => array(
            'var' => 'Properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $ID = null;
    /**
     * @var \MGeometryConstraint
     */
    public $GeometryConstraint = null;
    /**
     * @var \MVelocityConstraint
     */
    public $VelocityConstraint = null;
    /**
     * @var \MAccelerationConstraint
     */
    public $AccelerationConstraint = null;
    /**
     * @var \MPathConstraint
     */
    public $PathConstraint = null;
    /**
     * @var \MJointPathConstraint
     */
    public $JointPathConstraint = null;
    /**
     * @var \MPostureConstraint
     */
    public $PostureConstraint = null;
    /**
     * @var \MJointConstraint
     */
    public $JointConstraint = null;
    /**
     * @var array
     */
    public $Properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['GeometryConstraint'])) {
                $this->GeometryConstraint = $vals['GeometryConstraint'];
            }
            if (isset($vals['VelocityConstraint'])) {
                $this->VelocityConstraint = $vals['VelocityConstraint'];
            }
            if (isset($vals['AccelerationConstraint'])) {
                $this->AccelerationConstraint = $vals['AccelerationConstraint'];
            }
            if (isset($vals['PathConstraint'])) {
                $this->PathConstraint = $vals['PathConstraint'];
            }
            if (isset($vals['JointPathConstraint'])) {
                $this->JointPathConstraint = $vals['JointPathConstraint'];
            }
            if (isset($vals['PostureConstraint'])) {
                $this->PostureConstraint = $vals['PostureConstraint'];
            }
            if (isset($vals['JointConstraint'])) {
                $this->JointConstraint = $vals['JointConstraint'];
            }
            if (isset($vals['Properties'])) {
                $this->Properties = $vals['Properties'];
            }
        }
    }

    public function getName()
    {
        return 'MConstraint';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->GeometryConstraint = new \MGeometryConstraint();
                        $xfer += $this->GeometryConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->VelocityConstraint = new \MVelocityConstraint();
                        $xfer += $this->VelocityConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->AccelerationConstraint = new \MAccelerationConstraint();
                        $xfer += $this->AccelerationConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->PathConstraint = new \MPathConstraint();
                        $xfer += $this->PathConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->JointPathConstraint = new \MJointPathConstraint();
                        $xfer += $this->JointPathConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->PostureConstraint = new \MPostureConstraint();
                        $xfer += $this->PostureConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->JointConstraint = new \MJointConstraint();
                        $xfer += $this->JointConstraint->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->Properties = array();
                        $_size14 = 0;
                        $_ktype15 = 0;
                        $_vtype16 = 0;
                        $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18) {
                            $key19 = '';
                            $val20 = '';
                            $xfer += $input->readString($key19);
                            $xfer += $input->readString($val20);
                            $this->Properties[$key19] = $val20;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MConstraint');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::STRING, 1);
            $xfer += $output->writeString($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GeometryConstraint !== null) {
            if (!is_object($this->GeometryConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GeometryConstraint', TType::STRUCT, 2);
            $xfer += $this->GeometryConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->VelocityConstraint !== null) {
            if (!is_object($this->VelocityConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('VelocityConstraint', TType::STRUCT, 3);
            $xfer += $this->VelocityConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AccelerationConstraint !== null) {
            if (!is_object($this->AccelerationConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AccelerationConstraint', TType::STRUCT, 4);
            $xfer += $this->AccelerationConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PathConstraint !== null) {
            if (!is_object($this->PathConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PathConstraint', TType::STRUCT, 5);
            $xfer += $this->PathConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->JointPathConstraint !== null) {
            if (!is_object($this->JointPathConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('JointPathConstraint', TType::STRUCT, 6);
            $xfer += $this->JointPathConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PostureConstraint !== null) {
            if (!is_object($this->PostureConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PostureConstraint', TType::STRUCT, 7);
            $xfer += $this->PostureConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->JointConstraint !== null) {
            if (!is_object($this->JointConstraint)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('JointConstraint', TType::STRUCT, 8);
            $xfer += $this->JointConstraint->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Properties !== null) {
            if (!is_array($this->Properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Properties', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->Properties));
            foreach ($this->Properties as $kiter21 => $viter22) {
                $xfer += $output->writeString($kiter21);
                $xfer += $output->writeString($viter22);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
