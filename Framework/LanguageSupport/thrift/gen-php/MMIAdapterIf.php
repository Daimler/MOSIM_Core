<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface MMIAdapterIf
{
    /**
     * @param \MAvatarDescription $avatarDescription
     * @param array $properties
     * @param string $mmuID
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function Initialize(\MAvatarDescription $avatarDescription, array $properties, $mmuID, $sessionID);
    /**
     * @param \MInstruction $instruction
     * @param \MSimulationState $simulationState
     * @param string $mmuID
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function AssignInstruction(\MInstruction $instruction, \MSimulationState $simulationState, $mmuID, $sessionID);
    /**
     * @param double $time
     * @param \MSimulationState $simulationState
     * @param string $mmuID
     * @param string $sessionID
     * @return \MSimulationResult
     */
    public function DoStep($time, \MSimulationState $simulationState, $mmuID, $sessionID);
    /**
     * @param \MInstruction $instruction
     * @param string $mmuID
     * @param string $sessionID
     * @return \MConstraint[]
     */
    public function GetBoundaryConstraints(\MInstruction $instruction, $mmuID, $sessionID);
    /**
     * @param \MInstruction $instruction
     * @param string $mmuID
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function CheckPrerequisites(\MInstruction $instruction, $mmuID, $sessionID);
    /**
     * @param string $instructionID
     * @param string $mmuID
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function Abort($instructionID, $mmuID, $sessionID);
    /**
     * @param string $mmuID
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function Dispose($mmuID, $sessionID);
    /**
     * @param string $name
     * @param array $parameters
     * @param string $mmuID
     * @param string $sessionID
     * @return array
     */
    public function ExecuteFunction($name, array $parameters, $mmuID, $sessionID);
    /**
     * @return array
     */
    public function GetStatus();
    /**
     * @return \MAdapterDescription
     */
    public function GetAdapterDescription();
    /**
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function CreateSession($sessionID);
    /**
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function CloseSession($sessionID);
    /**
     * @param \MSceneUpdate $sceneUpdates
     * @param string $sessionID
     * @return \MBoolResponse
     */
    public function PushScene(\MSceneUpdate $sceneUpdates, $sessionID);
    /**
     * @return \MMUDescription[]
     */
    public function GetLoadableMMUs();
    /**
     * @param string $sessionID
     * @return \MMUDescription[]
     */
    public function GetMMus($sessionID);
    /**
     * @param string $mmuID
     * @param string $sessionID
     * @return \MMUDescription
     */
    public function GetDescription($mmuID, $sessionID);
    /**
     * @param string $sessionID
     * @return \MSceneObject[]
     */
    public function GetScene($sessionID);
    /**
     * @param string $sessionID
     * @return \MSceneUpdate
     */
    public function GetSceneChanges($sessionID);
    /**
     * @param string[] $mmus
     * @param string $sessionID
     * @return array
     */
    public function LoadMMUs(array $mmus, $sessionID);
    /**
     * @param string $mmuID
     * @param string $sessionID
     * @return string
     */
    public function CreateCheckpoint($mmuID, $sessionID);
    /**
     * @param string $mmuID
     * @param string $sessionID
     * @param string $checkpointData
     * @return \MBoolResponse
     */
    public function RestoreCheckpoint($mmuID, $sessionID, $checkpointData);
}
