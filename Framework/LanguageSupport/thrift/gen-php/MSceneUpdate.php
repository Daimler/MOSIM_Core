<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MSceneUpdate
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'AddedSceneObjects',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneObject',
                ),
        ),
        2 => array(
            'var' => 'ChangedSceneObjects',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MSceneObjectUpdate',
                ),
        ),
        3 => array(
            'var' => 'RemovedSceneObjects',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'AddedAvatars',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MAvatar',
                ),
        ),
        6 => array(
            'var' => 'ChangedAvatars',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\MAvatarUpdate',
                ),
        ),
        7 => array(
            'var' => 'RemovedAvatars',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \MSceneObject[]
     */
    public $AddedSceneObjects = null;
    /**
     * @var \MSceneObjectUpdate[]
     */
    public $ChangedSceneObjects = null;
    /**
     * @var string[]
     */
    public $RemovedSceneObjects = null;
    /**
     * @var \MAvatar[]
     */
    public $AddedAvatars = null;
    /**
     * @var \MAvatarUpdate[]
     */
    public $ChangedAvatars = null;
    /**
     * @var string[]
     */
    public $RemovedAvatars = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['AddedSceneObjects'])) {
                $this->AddedSceneObjects = $vals['AddedSceneObjects'];
            }
            if (isset($vals['ChangedSceneObjects'])) {
                $this->ChangedSceneObjects = $vals['ChangedSceneObjects'];
            }
            if (isset($vals['RemovedSceneObjects'])) {
                $this->RemovedSceneObjects = $vals['RemovedSceneObjects'];
            }
            if (isset($vals['AddedAvatars'])) {
                $this->AddedAvatars = $vals['AddedAvatars'];
            }
            if (isset($vals['ChangedAvatars'])) {
                $this->ChangedAvatars = $vals['ChangedAvatars'];
            }
            if (isset($vals['RemovedAvatars'])) {
                $this->RemovedAvatars = $vals['RemovedAvatars'];
            }
        }
    }

    public function getName()
    {
        return 'MSceneUpdate';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->AddedSceneObjects = array();
                        $_size250 = 0;
                        $_etype253 = 0;
                        $xfer += $input->readListBegin($_etype253, $_size250);
                        for ($_i254 = 0; $_i254 < $_size250; ++$_i254) {
                            $elem255 = null;
                            $elem255 = new \MSceneObject();
                            $xfer += $elem255->read($input);
                            $this->AddedSceneObjects []= $elem255;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->ChangedSceneObjects = array();
                        $_size256 = 0;
                        $_etype259 = 0;
                        $xfer += $input->readListBegin($_etype259, $_size256);
                        for ($_i260 = 0; $_i260 < $_size256; ++$_i260) {
                            $elem261 = null;
                            $elem261 = new \MSceneObjectUpdate();
                            $xfer += $elem261->read($input);
                            $this->ChangedSceneObjects []= $elem261;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->RemovedSceneObjects = array();
                        $_size262 = 0;
                        $_etype265 = 0;
                        $xfer += $input->readListBegin($_etype265, $_size262);
                        for ($_i266 = 0; $_i266 < $_size262; ++$_i266) {
                            $elem267 = null;
                            $xfer += $input->readString($elem267);
                            $this->RemovedSceneObjects []= $elem267;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->AddedAvatars = array();
                        $_size268 = 0;
                        $_etype271 = 0;
                        $xfer += $input->readListBegin($_etype271, $_size268);
                        for ($_i272 = 0; $_i272 < $_size268; ++$_i272) {
                            $elem273 = null;
                            $elem273 = new \MAvatar();
                            $xfer += $elem273->read($input);
                            $this->AddedAvatars []= $elem273;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->ChangedAvatars = array();
                        $_size274 = 0;
                        $_etype277 = 0;
                        $xfer += $input->readListBegin($_etype277, $_size274);
                        for ($_i278 = 0; $_i278 < $_size274; ++$_i278) {
                            $elem279 = null;
                            $elem279 = new \MAvatarUpdate();
                            $xfer += $elem279->read($input);
                            $this->ChangedAvatars []= $elem279;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->RemovedAvatars = array();
                        $_size280 = 0;
                        $_etype283 = 0;
                        $xfer += $input->readListBegin($_etype283, $_size280);
                        for ($_i284 = 0; $_i284 < $_size280; ++$_i284) {
                            $elem285 = null;
                            $xfer += $input->readString($elem285);
                            $this->RemovedAvatars []= $elem285;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MSceneUpdate');
        if ($this->AddedSceneObjects !== null) {
            if (!is_array($this->AddedSceneObjects)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AddedSceneObjects', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->AddedSceneObjects));
            foreach ($this->AddedSceneObjects as $iter286) {
                $xfer += $iter286->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ChangedSceneObjects !== null) {
            if (!is_array($this->ChangedSceneObjects)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ChangedSceneObjects', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->ChangedSceneObjects));
            foreach ($this->ChangedSceneObjects as $iter287) {
                $xfer += $iter287->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RemovedSceneObjects !== null) {
            if (!is_array($this->RemovedSceneObjects)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RemovedSceneObjects', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->RemovedSceneObjects));
            foreach ($this->RemovedSceneObjects as $iter288) {
                $xfer += $output->writeString($iter288);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AddedAvatars !== null) {
            if (!is_array($this->AddedAvatars)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AddedAvatars', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->AddedAvatars));
            foreach ($this->AddedAvatars as $iter289) {
                $xfer += $iter289->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ChangedAvatars !== null) {
            if (!is_array($this->ChangedAvatars)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ChangedAvatars', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->ChangedAvatars));
            foreach ($this->ChangedAvatars as $iter290) {
                $xfer += $iter290->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RemovedAvatars !== null) {
            if (!is_array($this->RemovedAvatars)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RemovedAvatars', TType::LST, 7);
            $output->writeListBegin(TType::STRING, count($this->RemovedAvatars));
            foreach ($this->RemovedAvatars as $iter291) {
                $xfer += $output->writeString($iter291);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
