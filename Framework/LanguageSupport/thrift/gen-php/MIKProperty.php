<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MIKProperty
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Values',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::DOUBLE,
            'elem' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        2 => array(
            'var' => 'Weight',
            'isRequired' => true,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'Target',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'OperationType',
            'isRequired' => true,
            'type' => TType::I32,
        ),
    );

    /**
     * @var double[]
     */
    public $Values = null;
    /**
     * @var double
     */
    public $Weight = null;
    /**
     * @var int
     */
    public $Target = null;
    /**
     * @var int
     */
    public $OperationType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Values'])) {
                $this->Values = $vals['Values'];
            }
            if (isset($vals['Weight'])) {
                $this->Weight = $vals['Weight'];
            }
            if (isset($vals['Target'])) {
                $this->Target = $vals['Target'];
            }
            if (isset($vals['OperationType'])) {
                $this->OperationType = $vals['OperationType'];
            }
        }
    }

    public function getName()
    {
        return 'MIKProperty';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->Values = array();
                        $_size7 = 0;
                        $_etype10 = 0;
                        $xfer += $input->readListBegin($_etype10, $_size7);
                        for ($_i11 = 0; $_i11 < $_size7; ++$_i11) {
                            $elem12 = null;
                            $xfer += $input->readDouble($elem12);
                            $this->Values []= $elem12;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Weight);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->Target);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->OperationType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MIKProperty');
        if ($this->Values !== null) {
            if (!is_array($this->Values)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Values', TType::LST, 1);
            $output->writeListBegin(TType::DOUBLE, count($this->Values));
            foreach ($this->Values as $iter13) {
                $xfer += $output->writeDouble($iter13);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Weight !== null) {
            $xfer += $output->writeFieldBegin('Weight', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->Weight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Target !== null) {
            $xfer += $output->writeFieldBegin('Target', TType::I32, 3);
            $xfer += $output->writeI32($this->Target);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OperationType !== null) {
            $xfer += $output->writeFieldBegin('OperationType', TType::I32, 4);
            $xfer += $output->writeI32($this->OperationType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
